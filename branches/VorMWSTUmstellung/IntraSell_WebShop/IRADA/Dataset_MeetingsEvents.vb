'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset_MeetingsEvents
    Inherits DataSet
    
    Private tableEvents As EventsDataTable
    
    Private tableMeetings As MeetingsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Events")) Is Nothing) Then
                Me.Tables.Add(New EventsDataTable(ds.Tables("Events")))
            End If
            If (Not (ds.Tables("Meetings")) Is Nothing) Then
                Me.Tables.Add(New MeetingsDataTable(ds.Tables("Meetings")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Events As EventsDataTable
        Get
            Return Me.tableEvents
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Meetings As MeetingsDataTable
        Get
            Return Me.tableMeetings
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset_MeetingsEvents = CType(MyBase.Clone,Dataset_MeetingsEvents)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Events")) Is Nothing) Then
            Me.Tables.Add(New EventsDataTable(ds.Tables("Events")))
        End If
        If (Not (ds.Tables("Meetings")) Is Nothing) Then
            Me.Tables.Add(New MeetingsDataTable(ds.Tables("Meetings")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableEvents = CType(Me.Tables("Events"),EventsDataTable)
        If (Not (Me.tableEvents) Is Nothing) Then
            Me.tableEvents.InitVars
        End If
        Me.tableMeetings = CType(Me.Tables("Meetings"),MeetingsDataTable)
        If (Not (Me.tableMeetings) Is Nothing) Then
            Me.tableMeetings.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset_MeetingsEvents"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset_MeetingsEvents.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableEvents = New EventsDataTable
        Me.Tables.Add(Me.tableEvents)
        Me.tableMeetings = New MeetingsDataTable
        Me.Tables.Add(Me.tableMeetings)
    End Sub
    
    Private Function ShouldSerializeEvents() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMeetings() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub EventsRowChangeEventHandler(ByVal sender As Object, ByVal e As EventsRowChangeEvent)
    
    Public Delegate Sub MeetingsRowChangeEventHandler(ByVal sender As Object, ByVal e As MeetingsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EventsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnPresenter As DataColumn
        
        Private columnTopic As DataColumn
        
        Private columnSchedule As DataColumn
        
        Private columnPlace As DataColumn
        
        Private columnPrice As DataColumn
        
        Private columnRegistrations As DataColumn
        
        Friend Sub New()
            MyBase.New("Events")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property PresenterColumn As DataColumn
            Get
                Return Me.columnPresenter
            End Get
        End Property
        
        Friend ReadOnly Property TopicColumn As DataColumn
            Get
                Return Me.columnTopic
            End Get
        End Property
        
        Friend ReadOnly Property ScheduleColumn As DataColumn
            Get
                Return Me.columnSchedule
            End Get
        End Property
        
        Friend ReadOnly Property PlaceColumn As DataColumn
            Get
                Return Me.columnPlace
            End Get
        End Property
        
        Friend ReadOnly Property PriceColumn As DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        Friend ReadOnly Property RegistrationsColumn As DataColumn
            Get
                Return Me.columnRegistrations
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EventsRow
            Get
                Return CType(Me.Rows(index),EventsRow)
            End Get
        End Property
        
        Public Event EventsRowChanged As EventsRowChangeEventHandler
        
        Public Event EventsRowChanging As EventsRowChangeEventHandler
        
        Public Event EventsRowDeleted As EventsRowChangeEventHandler
        
        Public Event EventsRowDeleting As EventsRowChangeEventHandler
        
        Public Overloads Sub AddEventsRow(ByVal row As EventsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEventsRow(ByVal Presenter As String, ByVal Topic As String, ByVal Schedule As Date, ByVal Place As String, ByVal Price As Integer, ByVal Registrations As System.UInt64) As EventsRow
            Dim rowEventsRow As EventsRow = CType(Me.NewRow,EventsRow)
            rowEventsRow.ItemArray = New Object() {Nothing, Presenter, Topic, Schedule, Place, Price, Registrations}
            Me.Rows.Add(rowEventsRow)
            Return rowEventsRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As EventsRow
            Return CType(Me.Rows.Find(New Object() {Id}),EventsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EventsDataTable = CType(MyBase.Clone,EventsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EventsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnPresenter = Me.Columns("Presenter")
            Me.columnTopic = Me.Columns("Topic")
            Me.columnSchedule = Me.Columns("Schedule")
            Me.columnPlace = Me.Columns("Place")
            Me.columnPrice = Me.Columns("Price")
            Me.columnRegistrations = Me.Columns("Registrations")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnPresenter = New DataColumn("Presenter", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPresenter)
            Me.columnTopic = New DataColumn("Topic", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTopic)
            Me.columnSchedule = New DataColumn("Schedule", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSchedule)
            Me.columnPlace = New DataColumn("Place", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlace)
            Me.columnPrice = New DataColumn("Price", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice)
            Me.columnRegistrations = New DataColumn("Registrations", GetType(System.UInt64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegistrations)
            Me.Constraints.Add(New UniqueConstraint("Dataset_MeetingsEventsKey1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewEventsRow() As EventsRow
            Return CType(Me.NewRow,EventsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EventsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EventsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EventsRowChangedEvent) Is Nothing) Then
                RaiseEvent EventsRowChanged(Me, New EventsRowChangeEvent(CType(e.Row,EventsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EventsRowChangingEvent) Is Nothing) Then
                RaiseEvent EventsRowChanging(Me, New EventsRowChangeEvent(CType(e.Row,EventsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EventsRowDeletedEvent) Is Nothing) Then
                RaiseEvent EventsRowDeleted(Me, New EventsRowChangeEvent(CType(e.Row,EventsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EventsRowDeletingEvent) Is Nothing) Then
                RaiseEvent EventsRowDeleting(Me, New EventsRowChangeEvent(CType(e.Row,EventsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEventsRow(ByVal row As EventsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EventsRow
        Inherits DataRow
        
        Private tableEvents As EventsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEvents = CType(Me.Table,EventsDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableEvents.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableEvents.IdColumn) = value
            End Set
        End Property
        
        Public Property Presenter As String
            Get
                Try 
                    Return CType(Me(Me.tableEvents.PresenterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableEvents.PresenterColumn) = value
            End Set
        End Property
        
        Public Property Topic As String
            Get
                Try 
                    Return CType(Me(Me.tableEvents.TopicColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableEvents.TopicColumn) = value
            End Set
        End Property
        
        Public Property Schedule As Date
            Get
                Try 
                    Return CType(Me(Me.tableEvents.ScheduleColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableEvents.ScheduleColumn) = value
            End Set
        End Property
        
        Public Property Place As String
            Get
                Try 
                    Return CType(Me(Me.tableEvents.PlaceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableEvents.PlaceColumn) = value
            End Set
        End Property
        
        Public Property Price As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEvents.PriceColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableEvents.PriceColumn) = value
            End Set
        End Property
        
        Public Property Registrations As System.UInt64
            Get
                Try 
                    Return CType(Me(Me.tableEvents.RegistrationsColumn),System.UInt64)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableEvents.RegistrationsColumn) = value
            End Set
        End Property
        
        Public Function IsPresenterNull() As Boolean
            Return Me.IsNull(Me.tableEvents.PresenterColumn)
        End Function
        
        Public Sub SetPresenterNull()
            Me(Me.tableEvents.PresenterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTopicNull() As Boolean
            Return Me.IsNull(Me.tableEvents.TopicColumn)
        End Function
        
        Public Sub SetTopicNull()
            Me(Me.tableEvents.TopicColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsScheduleNull() As Boolean
            Return Me.IsNull(Me.tableEvents.ScheduleColumn)
        End Function
        
        Public Sub SetScheduleNull()
            Me(Me.tableEvents.ScheduleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPlaceNull() As Boolean
            Return Me.IsNull(Me.tableEvents.PlaceColumn)
        End Function
        
        Public Sub SetPlaceNull()
            Me(Me.tableEvents.PlaceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableEvents.PriceColumn)
        End Function
        
        Public Sub SetPriceNull()
            Me(Me.tableEvents.PriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegistrationsNull() As Boolean
            Return Me.IsNull(Me.tableEvents.RegistrationsColumn)
        End Function
        
        Public Sub SetRegistrationsNull()
            Me(Me.tableEvents.RegistrationsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EventsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EventsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EventsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EventsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MeetingsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnPrice As DataColumn
        
        Private columnRegistrations As DataColumn
        
        Friend Sub New()
            MyBase.New("Meetings")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property PriceColumn As DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        Friend ReadOnly Property RegistrationsColumn As DataColumn
            Get
                Return Me.columnRegistrations
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MeetingsRow
            Get
                Return CType(Me.Rows(index),MeetingsRow)
            End Get
        End Property
        
        Public Event MeetingsRowChanged As MeetingsRowChangeEventHandler
        
        Public Event MeetingsRowChanging As MeetingsRowChangeEventHandler
        
        Public Event MeetingsRowDeleted As MeetingsRowChangeEventHandler
        
        Public Event MeetingsRowDeleting As MeetingsRowChangeEventHandler
        
        Public Overloads Sub AddMeetingsRow(ByVal row As MeetingsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMeetingsRow(ByVal Description As String, ByVal Price As Integer, ByVal Registrations As System.UInt64) As MeetingsRow
            Dim rowMeetingsRow As MeetingsRow = CType(Me.NewRow,MeetingsRow)
            rowMeetingsRow.ItemArray = New Object() {Nothing, Description, Price, Registrations}
            Me.Rows.Add(rowMeetingsRow)
            Return rowMeetingsRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As MeetingsRow
            Return CType(Me.Rows.Find(New Object() {Id}),MeetingsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MeetingsDataTable = CType(MyBase.Clone,MeetingsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MeetingsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnDescription = Me.Columns("Description")
            Me.columnPrice = Me.Columns("Price")
            Me.columnRegistrations = Me.Columns("Registrations")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnPrice = New DataColumn("Price", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice)
            Me.columnRegistrations = New DataColumn("Registrations", GetType(System.UInt64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegistrations)
            Me.Constraints.Add(New UniqueConstraint("Dataset_MeetingsEventsKey2", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewMeetingsRow() As MeetingsRow
            Return CType(Me.NewRow,MeetingsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MeetingsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MeetingsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MeetingsRowChangedEvent) Is Nothing) Then
                RaiseEvent MeetingsRowChanged(Me, New MeetingsRowChangeEvent(CType(e.Row,MeetingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MeetingsRowChangingEvent) Is Nothing) Then
                RaiseEvent MeetingsRowChanging(Me, New MeetingsRowChangeEvent(CType(e.Row,MeetingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MeetingsRowDeletedEvent) Is Nothing) Then
                RaiseEvent MeetingsRowDeleted(Me, New MeetingsRowChangeEvent(CType(e.Row,MeetingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MeetingsRowDeletingEvent) Is Nothing) Then
                RaiseEvent MeetingsRowDeleting(Me, New MeetingsRowChangeEvent(CType(e.Row,MeetingsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMeetingsRow(ByVal row As MeetingsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MeetingsRow
        Inherits DataRow
        
        Private tableMeetings As MeetingsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMeetings = CType(Me.Table,MeetingsDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableMeetings.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableMeetings.IdColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableMeetings.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMeetings.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property Price As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMeetings.PriceColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMeetings.PriceColumn) = value
            End Set
        End Property
        
        Public Property Registrations As System.UInt64
            Get
                Try 
                    Return CType(Me(Me.tableMeetings.RegistrationsColumn),System.UInt64)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMeetings.RegistrationsColumn) = value
            End Set
        End Property
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableMeetings.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableMeetings.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableMeetings.PriceColumn)
        End Function
        
        Public Sub SetPriceNull()
            Me(Me.tableMeetings.PriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegistrationsNull() As Boolean
            Return Me.IsNull(Me.tableMeetings.RegistrationsColumn)
        End Function
        
        Public Sub SetRegistrationsNull()
            Me(Me.tableMeetings.RegistrationsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MeetingsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MeetingsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MeetingsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MeetingsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
