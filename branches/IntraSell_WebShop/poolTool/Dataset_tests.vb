'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset_tests
    Inherits DataSet
    
    Private tabletest_Questions As test_QuestionsDataTable
    
    Private tabletest_Answers As test_AnswersDataTable
    
    Private tabletest_Tests As test_TestsDataTable
    
    Private tablestatistictsAnswers As statistictsAnswersDataTable
    
    Private tabletest_User As test_UserDataTable
    
    Private tablestatisticsCountUsers As statisticsCountUsersDataTable
    
    Private relationtest_Questionstest_Answers As DataRelation
    
    Private relationtest_Teststest_Questions As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("test_Questions")) Is Nothing) Then
                Me.Tables.Add(New test_QuestionsDataTable(ds.Tables("test_Questions")))
            End If
            If (Not (ds.Tables("test_Answers")) Is Nothing) Then
                Me.Tables.Add(New test_AnswersDataTable(ds.Tables("test_Answers")))
            End If
            If (Not (ds.Tables("test_Tests")) Is Nothing) Then
                Me.Tables.Add(New test_TestsDataTable(ds.Tables("test_Tests")))
            End If
            If (Not (ds.Tables("statistictsAnswers")) Is Nothing) Then
                Me.Tables.Add(New statistictsAnswersDataTable(ds.Tables("statistictsAnswers")))
            End If
            If (Not (ds.Tables("test_User")) Is Nothing) Then
                Me.Tables.Add(New test_UserDataTable(ds.Tables("test_User")))
            End If
            If (Not (ds.Tables("statisticsCountUsers")) Is Nothing) Then
                Me.Tables.Add(New statisticsCountUsersDataTable(ds.Tables("statisticsCountUsers")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property test_Questions As test_QuestionsDataTable
        Get
            Return Me.tabletest_Questions
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property test_Answers As test_AnswersDataTable
        Get
            Return Me.tabletest_Answers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property test_Tests As test_TestsDataTable
        Get
            Return Me.tabletest_Tests
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property statistictsAnswers As statistictsAnswersDataTable
        Get
            Return Me.tablestatistictsAnswers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property test_User As test_UserDataTable
        Get
            Return Me.tabletest_User
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property statisticsCountUsers As statisticsCountUsersDataTable
        Get
            Return Me.tablestatisticsCountUsers
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset_tests = CType(MyBase.Clone,Dataset_tests)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("test_Questions")) Is Nothing) Then
            Me.Tables.Add(New test_QuestionsDataTable(ds.Tables("test_Questions")))
        End If
        If (Not (ds.Tables("test_Answers")) Is Nothing) Then
            Me.Tables.Add(New test_AnswersDataTable(ds.Tables("test_Answers")))
        End If
        If (Not (ds.Tables("test_Tests")) Is Nothing) Then
            Me.Tables.Add(New test_TestsDataTable(ds.Tables("test_Tests")))
        End If
        If (Not (ds.Tables("statistictsAnswers")) Is Nothing) Then
            Me.Tables.Add(New statistictsAnswersDataTable(ds.Tables("statistictsAnswers")))
        End If
        If (Not (ds.Tables("test_User")) Is Nothing) Then
            Me.Tables.Add(New test_UserDataTable(ds.Tables("test_User")))
        End If
        If (Not (ds.Tables("statisticsCountUsers")) Is Nothing) Then
            Me.Tables.Add(New statisticsCountUsersDataTable(ds.Tables("statisticsCountUsers")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabletest_Questions = CType(Me.Tables("test_Questions"),test_QuestionsDataTable)
        If (Not (Me.tabletest_Questions) Is Nothing) Then
            Me.tabletest_Questions.InitVars
        End If
        Me.tabletest_Answers = CType(Me.Tables("test_Answers"),test_AnswersDataTable)
        If (Not (Me.tabletest_Answers) Is Nothing) Then
            Me.tabletest_Answers.InitVars
        End If
        Me.tabletest_Tests = CType(Me.Tables("test_Tests"),test_TestsDataTable)
        If (Not (Me.tabletest_Tests) Is Nothing) Then
            Me.tabletest_Tests.InitVars
        End If
        Me.tablestatistictsAnswers = CType(Me.Tables("statistictsAnswers"),statistictsAnswersDataTable)
        If (Not (Me.tablestatistictsAnswers) Is Nothing) Then
            Me.tablestatistictsAnswers.InitVars
        End If
        Me.tabletest_User = CType(Me.Tables("test_User"),test_UserDataTable)
        If (Not (Me.tabletest_User) Is Nothing) Then
            Me.tabletest_User.InitVars
        End If
        Me.tablestatisticsCountUsers = CType(Me.Tables("statisticsCountUsers"),statisticsCountUsersDataTable)
        If (Not (Me.tablestatisticsCountUsers) Is Nothing) Then
            Me.tablestatisticsCountUsers.InitVars
        End If
        Me.relationtest_Questionstest_Answers = Me.Relations("test_Questionstest_Answers")
        Me.relationtest_Teststest_Questions = Me.Relations("test_Teststest_Questions")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset_tests"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset_tests.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabletest_Questions = New test_QuestionsDataTable
        Me.Tables.Add(Me.tabletest_Questions)
        Me.tabletest_Answers = New test_AnswersDataTable
        Me.Tables.Add(Me.tabletest_Answers)
        Me.tabletest_Tests = New test_TestsDataTable
        Me.Tables.Add(Me.tabletest_Tests)
        Me.tablestatistictsAnswers = New statistictsAnswersDataTable
        Me.Tables.Add(Me.tablestatistictsAnswers)
        Me.tabletest_User = New test_UserDataTable
        Me.Tables.Add(Me.tabletest_User)
        Me.tablestatisticsCountUsers = New statisticsCountUsersDataTable
        Me.Tables.Add(Me.tablestatisticsCountUsers)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("test_Teststest_Questions", New DataColumn() {Me.tabletest_Tests.Test_IdColumn}, New DataColumn() {Me.tabletest_Questions.FK_Test_IdColumn})
        Me.tabletest_Questions.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("test_Questionstest_Answers", New DataColumn() {Me.tabletest_Questions.Question_IdColumn}, New DataColumn() {Me.tabletest_Answers.FK_Question_IdColumn})
        Me.tabletest_Answers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationtest_Questionstest_Answers = New DataRelation("test_Questionstest_Answers", New DataColumn() {Me.tabletest_Questions.Question_IdColumn}, New DataColumn() {Me.tabletest_Answers.FK_Question_IdColumn}, false)
        Me.Relations.Add(Me.relationtest_Questionstest_Answers)
        Me.relationtest_Teststest_Questions = New DataRelation("test_Teststest_Questions", New DataColumn() {Me.tabletest_Tests.Test_IdColumn}, New DataColumn() {Me.tabletest_Questions.FK_Test_IdColumn}, false)
        Me.Relations.Add(Me.relationtest_Teststest_Questions)
    End Sub
    
    Private Function ShouldSerializetest_Questions() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetest_Answers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetest_Tests() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializestatistictsAnswers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetest_User() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializestatisticsCountUsers() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub test_QuestionsRowChangeEventHandler(ByVal sender As Object, ByVal e As test_QuestionsRowChangeEvent)
    
    Public Delegate Sub test_AnswersRowChangeEventHandler(ByVal sender As Object, ByVal e As test_AnswersRowChangeEvent)
    
    Public Delegate Sub test_TestsRowChangeEventHandler(ByVal sender As Object, ByVal e As test_TestsRowChangeEvent)
    
    Public Delegate Sub statistictsAnswersRowChangeEventHandler(ByVal sender As Object, ByVal e As statistictsAnswersRowChangeEvent)
    
    Public Delegate Sub test_UserRowChangeEventHandler(ByVal sender As Object, ByVal e As test_UserRowChangeEvent)
    
    Public Delegate Sub statisticsCountUsersRowChangeEventHandler(ByVal sender As Object, ByVal e As statisticsCountUsersRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class test_QuestionsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnQuestion_Id As DataColumn
        
        Private columnFK_Test_Id As DataColumn
        
        Private columnQuestion As DataColumn
        
        Private columnTimeToSolve As DataColumn
        
        Private columnPicture As DataColumn
        
        Friend Sub New()
            MyBase.New("test_Questions")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Question_IdColumn As DataColumn
            Get
                Return Me.columnQuestion_Id
            End Get
        End Property
        
        Friend ReadOnly Property FK_Test_IdColumn As DataColumn
            Get
                Return Me.columnFK_Test_Id
            End Get
        End Property
        
        Friend ReadOnly Property QuestionColumn As DataColumn
            Get
                Return Me.columnQuestion
            End Get
        End Property
        
        Friend ReadOnly Property TimeToSolveColumn As DataColumn
            Get
                Return Me.columnTimeToSolve
            End Get
        End Property
        
        Friend ReadOnly Property PictureColumn As DataColumn
            Get
                Return Me.columnPicture
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As test_QuestionsRow
            Get
                Return CType(Me.Rows(index),test_QuestionsRow)
            End Get
        End Property
        
        Public Event test_QuestionsRowChanged As test_QuestionsRowChangeEventHandler
        
        Public Event test_QuestionsRowChanging As test_QuestionsRowChangeEventHandler
        
        Public Event test_QuestionsRowDeleted As test_QuestionsRowChangeEventHandler
        
        Public Event test_QuestionsRowDeleting As test_QuestionsRowChangeEventHandler
        
        Public Overloads Sub Addtest_QuestionsRow(ByVal row As test_QuestionsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addtest_QuestionsRow(ByVal parenttest_TestsRowBytest_Teststest_Questions As test_TestsRow, ByVal Question As String, ByVal TimeToSolve As Single, ByVal Picture As String) As test_QuestionsRow
            Dim rowtest_QuestionsRow As test_QuestionsRow = CType(Me.NewRow,test_QuestionsRow)
            rowtest_QuestionsRow.ItemArray = New Object() {Nothing, parenttest_TestsRowBytest_Teststest_Questions(0), Question, TimeToSolve, Picture}
            Me.Rows.Add(rowtest_QuestionsRow)
            Return rowtest_QuestionsRow
        End Function
        
        Public Function FindByQuestion_Id(ByVal Question_Id As Integer) As test_QuestionsRow
            Return CType(Me.Rows.Find(New Object() {Question_Id}),test_QuestionsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As test_QuestionsDataTable = CType(MyBase.Clone,test_QuestionsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New test_QuestionsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnQuestion_Id = Me.Columns("Question_Id")
            Me.columnFK_Test_Id = Me.Columns("FK_Test_Id")
            Me.columnQuestion = Me.Columns("Question")
            Me.columnTimeToSolve = Me.Columns("TimeToSolve")
            Me.columnPicture = Me.Columns("Picture")
        End Sub
        
        Private Sub InitClass()
            Me.columnQuestion_Id = New DataColumn("Question_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuestion_Id)
            Me.columnFK_Test_Id = New DataColumn("FK_Test_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFK_Test_Id)
            Me.columnQuestion = New DataColumn("Question", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuestion)
            Me.columnTimeToSolve = New DataColumn("TimeToSolve", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeToSolve)
            Me.columnPicture = New DataColumn("Picture", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPicture)
            Me.Constraints.Add(New UniqueConstraint("Dataset_testsKey1", New DataColumn() {Me.columnQuestion_Id}, true))
            Me.columnQuestion_Id.AutoIncrement = true
            Me.columnQuestion_Id.AllowDBNull = false
            Me.columnQuestion_Id.Unique = true
        End Sub
        
        Public Function Newtest_QuestionsRow() As test_QuestionsRow
            Return CType(Me.NewRow,test_QuestionsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New test_QuestionsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(test_QuestionsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.test_QuestionsRowChangedEvent) Is Nothing) Then
                RaiseEvent test_QuestionsRowChanged(Me, New test_QuestionsRowChangeEvent(CType(e.Row,test_QuestionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.test_QuestionsRowChangingEvent) Is Nothing) Then
                RaiseEvent test_QuestionsRowChanging(Me, New test_QuestionsRowChangeEvent(CType(e.Row,test_QuestionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.test_QuestionsRowDeletedEvent) Is Nothing) Then
                RaiseEvent test_QuestionsRowDeleted(Me, New test_QuestionsRowChangeEvent(CType(e.Row,test_QuestionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.test_QuestionsRowDeletingEvent) Is Nothing) Then
                RaiseEvent test_QuestionsRowDeleting(Me, New test_QuestionsRowChangeEvent(CType(e.Row,test_QuestionsRow), e.Action))
            End If
        End Sub
        
        Public Sub Removetest_QuestionsRow(ByVal row As test_QuestionsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class test_QuestionsRow
        Inherits DataRow
        
        Private tabletest_Questions As test_QuestionsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletest_Questions = CType(Me.Table,test_QuestionsDataTable)
        End Sub
        
        Public Property Question_Id As Integer
            Get
                Return CType(Me(Me.tabletest_Questions.Question_IdColumn),Integer)
            End Get
            Set
                Me(Me.tabletest_Questions.Question_IdColumn) = value
            End Set
        End Property
        
        Public Property FK_Test_Id As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletest_Questions.FK_Test_IdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_Questions.FK_Test_IdColumn) = value
            End Set
        End Property
        
        Public Property Question As String
            Get
                Try 
                    Return CType(Me(Me.tabletest_Questions.QuestionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_Questions.QuestionColumn) = value
            End Set
        End Property
        
        Public Property TimeToSolve As Single
            Get
                Try 
                    Return CType(Me(Me.tabletest_Questions.TimeToSolveColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_Questions.TimeToSolveColumn) = value
            End Set
        End Property
        
        Public Property Picture As String
            Get
                Try 
                    Return CType(Me(Me.tabletest_Questions.PictureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_Questions.PictureColumn) = value
            End Set
        End Property
        
        Public Property test_TestsRow As test_TestsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("test_Teststest_Questions")),test_TestsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("test_Teststest_Questions"))
            End Set
        End Property
        
        Public Function IsFK_Test_IdNull() As Boolean
            Return Me.IsNull(Me.tabletest_Questions.FK_Test_IdColumn)
        End Function
        
        Public Sub SetFK_Test_IdNull()
            Me(Me.tabletest_Questions.FK_Test_IdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuestionNull() As Boolean
            Return Me.IsNull(Me.tabletest_Questions.QuestionColumn)
        End Function
        
        Public Sub SetQuestionNull()
            Me(Me.tabletest_Questions.QuestionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeToSolveNull() As Boolean
            Return Me.IsNull(Me.tabletest_Questions.TimeToSolveColumn)
        End Function
        
        Public Sub SetTimeToSolveNull()
            Me(Me.tabletest_Questions.TimeToSolveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPictureNull() As Boolean
            Return Me.IsNull(Me.tabletest_Questions.PictureColumn)
        End Function
        
        Public Sub SetPictureNull()
            Me(Me.tabletest_Questions.PictureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Gettest_AnswersRows() As test_AnswersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("test_Questionstest_Answers")),test_AnswersRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class test_QuestionsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As test_QuestionsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As test_QuestionsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As test_QuestionsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class test_AnswersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAnswer_Id As DataColumn
        
        Private columnFK_Question_Id As DataColumn
        
        Private columnPoints As DataColumn
        
        Private columnAnswer As DataColumn
        
        Friend Sub New()
            MyBase.New("test_Answers")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Answer_IdColumn As DataColumn
            Get
                Return Me.columnAnswer_Id
            End Get
        End Property
        
        Friend ReadOnly Property FK_Question_IdColumn As DataColumn
            Get
                Return Me.columnFK_Question_Id
            End Get
        End Property
        
        Friend ReadOnly Property PointsColumn As DataColumn
            Get
                Return Me.columnPoints
            End Get
        End Property
        
        Friend ReadOnly Property AnswerColumn As DataColumn
            Get
                Return Me.columnAnswer
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As test_AnswersRow
            Get
                Return CType(Me.Rows(index),test_AnswersRow)
            End Get
        End Property
        
        Public Event test_AnswersRowChanged As test_AnswersRowChangeEventHandler
        
        Public Event test_AnswersRowChanging As test_AnswersRowChangeEventHandler
        
        Public Event test_AnswersRowDeleted As test_AnswersRowChangeEventHandler
        
        Public Event test_AnswersRowDeleting As test_AnswersRowChangeEventHandler
        
        Public Overloads Sub Addtest_AnswersRow(ByVal row As test_AnswersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addtest_AnswersRow(ByVal parenttest_QuestionsRowBytest_Questionstest_Answers As test_QuestionsRow, ByVal Points As Integer, ByVal Answer As String) As test_AnswersRow
            Dim rowtest_AnswersRow As test_AnswersRow = CType(Me.NewRow,test_AnswersRow)
            rowtest_AnswersRow.ItemArray = New Object() {Nothing, parenttest_QuestionsRowBytest_Questionstest_Answers(0), Points, Answer}
            Me.Rows.Add(rowtest_AnswersRow)
            Return rowtest_AnswersRow
        End Function
        
        Public Function FindByAnswer_Id(ByVal Answer_Id As Integer) As test_AnswersRow
            Return CType(Me.Rows.Find(New Object() {Answer_Id}),test_AnswersRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As test_AnswersDataTable = CType(MyBase.Clone,test_AnswersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New test_AnswersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAnswer_Id = Me.Columns("Answer_Id")
            Me.columnFK_Question_Id = Me.Columns("FK_Question_Id")
            Me.columnPoints = Me.Columns("Points")
            Me.columnAnswer = Me.Columns("Answer")
        End Sub
        
        Private Sub InitClass()
            Me.columnAnswer_Id = New DataColumn("Answer_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnswer_Id)
            Me.columnFK_Question_Id = New DataColumn("FK_Question_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFK_Question_Id)
            Me.columnPoints = New DataColumn("Points", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPoints)
            Me.columnAnswer = New DataColumn("Answer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnswer)
            Me.Constraints.Add(New UniqueConstraint("Dataset_testsKey2", New DataColumn() {Me.columnAnswer_Id}, true))
            Me.columnAnswer_Id.AutoIncrement = true
            Me.columnAnswer_Id.AllowDBNull = false
            Me.columnAnswer_Id.Unique = true
        End Sub
        
        Public Function Newtest_AnswersRow() As test_AnswersRow
            Return CType(Me.NewRow,test_AnswersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New test_AnswersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(test_AnswersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.test_AnswersRowChangedEvent) Is Nothing) Then
                RaiseEvent test_AnswersRowChanged(Me, New test_AnswersRowChangeEvent(CType(e.Row,test_AnswersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.test_AnswersRowChangingEvent) Is Nothing) Then
                RaiseEvent test_AnswersRowChanging(Me, New test_AnswersRowChangeEvent(CType(e.Row,test_AnswersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.test_AnswersRowDeletedEvent) Is Nothing) Then
                RaiseEvent test_AnswersRowDeleted(Me, New test_AnswersRowChangeEvent(CType(e.Row,test_AnswersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.test_AnswersRowDeletingEvent) Is Nothing) Then
                RaiseEvent test_AnswersRowDeleting(Me, New test_AnswersRowChangeEvent(CType(e.Row,test_AnswersRow), e.Action))
            End If
        End Sub
        
        Public Sub Removetest_AnswersRow(ByVal row As test_AnswersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class test_AnswersRow
        Inherits DataRow
        
        Private tabletest_Answers As test_AnswersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletest_Answers = CType(Me.Table,test_AnswersDataTable)
        End Sub
        
        Public Property Answer_Id As Integer
            Get
                Return CType(Me(Me.tabletest_Answers.Answer_IdColumn),Integer)
            End Get
            Set
                Me(Me.tabletest_Answers.Answer_IdColumn) = value
            End Set
        End Property
        
        Public Property FK_Question_Id As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletest_Answers.FK_Question_IdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_Answers.FK_Question_IdColumn) = value
            End Set
        End Property
        
        Public Property Points As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletest_Answers.PointsColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_Answers.PointsColumn) = value
            End Set
        End Property
        
        Public Property Answer As String
            Get
                Try 
                    Return CType(Me(Me.tabletest_Answers.AnswerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_Answers.AnswerColumn) = value
            End Set
        End Property
        
        Public Property test_QuestionsRow As test_QuestionsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("test_Questionstest_Answers")),test_QuestionsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("test_Questionstest_Answers"))
            End Set
        End Property
        
        Public Function IsFK_Question_IdNull() As Boolean
            Return Me.IsNull(Me.tabletest_Answers.FK_Question_IdColumn)
        End Function
        
        Public Sub SetFK_Question_IdNull()
            Me(Me.tabletest_Answers.FK_Question_IdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPointsNull() As Boolean
            Return Me.IsNull(Me.tabletest_Answers.PointsColumn)
        End Function
        
        Public Sub SetPointsNull()
            Me(Me.tabletest_Answers.PointsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAnswerNull() As Boolean
            Return Me.IsNull(Me.tabletest_Answers.AnswerColumn)
        End Function
        
        Public Sub SetAnswerNull()
            Me(Me.tabletest_Answers.AnswerColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class test_AnswersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As test_AnswersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As test_AnswersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As test_AnswersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class test_TestsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTest_Id As DataColumn
        
        Private columnTestname As DataColumn
        
        Private columnDescription As DataColumn
        
        Friend Sub New()
            MyBase.New("test_Tests")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Test_IdColumn As DataColumn
            Get
                Return Me.columnTest_Id
            End Get
        End Property
        
        Friend ReadOnly Property TestnameColumn As DataColumn
            Get
                Return Me.columnTestname
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As test_TestsRow
            Get
                Return CType(Me.Rows(index),test_TestsRow)
            End Get
        End Property
        
        Public Event test_TestsRowChanged As test_TestsRowChangeEventHandler
        
        Public Event test_TestsRowChanging As test_TestsRowChangeEventHandler
        
        Public Event test_TestsRowDeleted As test_TestsRowChangeEventHandler
        
        Public Event test_TestsRowDeleting As test_TestsRowChangeEventHandler
        
        Public Overloads Sub Addtest_TestsRow(ByVal row As test_TestsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addtest_TestsRow(ByVal Testname As String, ByVal Description As String) As test_TestsRow
            Dim rowtest_TestsRow As test_TestsRow = CType(Me.NewRow,test_TestsRow)
            rowtest_TestsRow.ItemArray = New Object() {Nothing, Testname, Description}
            Me.Rows.Add(rowtest_TestsRow)
            Return rowtest_TestsRow
        End Function
        
        Public Function FindByTest_Id(ByVal Test_Id As Integer) As test_TestsRow
            Return CType(Me.Rows.Find(New Object() {Test_Id}),test_TestsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As test_TestsDataTable = CType(MyBase.Clone,test_TestsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New test_TestsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTest_Id = Me.Columns("Test_Id")
            Me.columnTestname = Me.Columns("Testname")
            Me.columnDescription = Me.Columns("Description")
        End Sub
        
        Private Sub InitClass()
            Me.columnTest_Id = New DataColumn("Test_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTest_Id)
            Me.columnTestname = New DataColumn("Testname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTestname)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New UniqueConstraint("Dataset_testsKey3", New DataColumn() {Me.columnTest_Id}, true))
            Me.columnTest_Id.AutoIncrement = true
            Me.columnTest_Id.AllowDBNull = false
            Me.columnTest_Id.Unique = true
        End Sub
        
        Public Function Newtest_TestsRow() As test_TestsRow
            Return CType(Me.NewRow,test_TestsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New test_TestsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(test_TestsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.test_TestsRowChangedEvent) Is Nothing) Then
                RaiseEvent test_TestsRowChanged(Me, New test_TestsRowChangeEvent(CType(e.Row,test_TestsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.test_TestsRowChangingEvent) Is Nothing) Then
                RaiseEvent test_TestsRowChanging(Me, New test_TestsRowChangeEvent(CType(e.Row,test_TestsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.test_TestsRowDeletedEvent) Is Nothing) Then
                RaiseEvent test_TestsRowDeleted(Me, New test_TestsRowChangeEvent(CType(e.Row,test_TestsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.test_TestsRowDeletingEvent) Is Nothing) Then
                RaiseEvent test_TestsRowDeleting(Me, New test_TestsRowChangeEvent(CType(e.Row,test_TestsRow), e.Action))
            End If
        End Sub
        
        Public Sub Removetest_TestsRow(ByVal row As test_TestsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class test_TestsRow
        Inherits DataRow
        
        Private tabletest_Tests As test_TestsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletest_Tests = CType(Me.Table,test_TestsDataTable)
        End Sub
        
        Public Property Test_Id As Integer
            Get
                Return CType(Me(Me.tabletest_Tests.Test_IdColumn),Integer)
            End Get
            Set
                Me(Me.tabletest_Tests.Test_IdColumn) = value
            End Set
        End Property
        
        Public Property Testname As String
            Get
                Try 
                    Return CType(Me(Me.tabletest_Tests.TestnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_Tests.TestnameColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tabletest_Tests.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_Tests.DescriptionColumn) = value
            End Set
        End Property
        
        Public Function IsTestnameNull() As Boolean
            Return Me.IsNull(Me.tabletest_Tests.TestnameColumn)
        End Function
        
        Public Sub SetTestnameNull()
            Me(Me.tabletest_Tests.TestnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletest_Tests.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tabletest_Tests.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Gettest_QuestionsRows() As test_QuestionsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("test_Teststest_Questions")),test_QuestionsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class test_TestsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As test_TestsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As test_TestsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As test_TestsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class statistictsAnswersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnQuestion_Id As DataColumn
        
        Private columnQuestion As DataColumn
        
        Private columnAnswer As DataColumn
        
        Private columnCountAnswers As DataColumn
        
        Private columnCountTotalAnswers As DataColumn
        
        Private columnInPercent As DataColumn
        
        Friend Sub New()
            MyBase.New("statistictsAnswers")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Question_IdColumn As DataColumn
            Get
                Return Me.columnQuestion_Id
            End Get
        End Property
        
        Friend ReadOnly Property QuestionColumn As DataColumn
            Get
                Return Me.columnQuestion
            End Get
        End Property
        
        Friend ReadOnly Property AnswerColumn As DataColumn
            Get
                Return Me.columnAnswer
            End Get
        End Property
        
        Friend ReadOnly Property CountAnswersColumn As DataColumn
            Get
                Return Me.columnCountAnswers
            End Get
        End Property
        
        Friend ReadOnly Property CountTotalAnswersColumn As DataColumn
            Get
                Return Me.columnCountTotalAnswers
            End Get
        End Property
        
        Friend ReadOnly Property InPercentColumn As DataColumn
            Get
                Return Me.columnInPercent
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As statistictsAnswersRow
            Get
                Return CType(Me.Rows(index),statistictsAnswersRow)
            End Get
        End Property
        
        Public Event statistictsAnswersRowChanged As statistictsAnswersRowChangeEventHandler
        
        Public Event statistictsAnswersRowChanging As statistictsAnswersRowChangeEventHandler
        
        Public Event statistictsAnswersRowDeleted As statistictsAnswersRowChangeEventHandler
        
        Public Event statistictsAnswersRowDeleting As statistictsAnswersRowChangeEventHandler
        
        Public Overloads Sub AddstatistictsAnswersRow(ByVal row As statistictsAnswersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddstatistictsAnswersRow(ByVal Question As String, ByVal Answer As String, ByVal CountAnswers As Integer, ByVal CountTotalAnswers As Integer, ByVal InPercent As Double) As statistictsAnswersRow
            Dim rowstatistictsAnswersRow As statistictsAnswersRow = CType(Me.NewRow,statistictsAnswersRow)
            rowstatistictsAnswersRow.ItemArray = New Object() {Nothing, Question, Answer, CountAnswers, CountTotalAnswers, InPercent}
            Me.Rows.Add(rowstatistictsAnswersRow)
            Return rowstatistictsAnswersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As statistictsAnswersDataTable = CType(MyBase.Clone,statistictsAnswersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New statistictsAnswersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnQuestion_Id = Me.Columns("Question_Id")
            Me.columnQuestion = Me.Columns("Question")
            Me.columnAnswer = Me.Columns("Answer")
            Me.columnCountAnswers = Me.Columns("CountAnswers")
            Me.columnCountTotalAnswers = Me.Columns("CountTotalAnswers")
            Me.columnInPercent = Me.Columns("InPercent")
        End Sub
        
        Private Sub InitClass()
            Me.columnQuestion_Id = New DataColumn("Question_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuestion_Id)
            Me.columnQuestion = New DataColumn("Question", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuestion)
            Me.columnAnswer = New DataColumn("Answer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnswer)
            Me.columnCountAnswers = New DataColumn("CountAnswers", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountAnswers)
            Me.columnCountTotalAnswers = New DataColumn("CountTotalAnswers", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountTotalAnswers)
            Me.columnInPercent = New DataColumn("InPercent", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInPercent)
            Me.columnQuestion_Id.AutoIncrement = true
            Me.columnInPercent.ReadOnly = true
        End Sub
        
        Public Function NewstatistictsAnswersRow() As statistictsAnswersRow
            Return CType(Me.NewRow,statistictsAnswersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New statistictsAnswersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(statistictsAnswersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.statistictsAnswersRowChangedEvent) Is Nothing) Then
                RaiseEvent statistictsAnswersRowChanged(Me, New statistictsAnswersRowChangeEvent(CType(e.Row,statistictsAnswersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.statistictsAnswersRowChangingEvent) Is Nothing) Then
                RaiseEvent statistictsAnswersRowChanging(Me, New statistictsAnswersRowChangeEvent(CType(e.Row,statistictsAnswersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.statistictsAnswersRowDeletedEvent) Is Nothing) Then
                RaiseEvent statistictsAnswersRowDeleted(Me, New statistictsAnswersRowChangeEvent(CType(e.Row,statistictsAnswersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.statistictsAnswersRowDeletingEvent) Is Nothing) Then
                RaiseEvent statistictsAnswersRowDeleting(Me, New statistictsAnswersRowChangeEvent(CType(e.Row,statistictsAnswersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovestatistictsAnswersRow(ByVal row As statistictsAnswersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class statistictsAnswersRow
        Inherits DataRow
        
        Private tablestatistictsAnswers As statistictsAnswersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablestatistictsAnswers = CType(Me.Table,statistictsAnswersDataTable)
        End Sub
        
        Public Property Question_Id As Integer
            Get
                Try 
                    Return CType(Me(Me.tablestatistictsAnswers.Question_IdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatistictsAnswers.Question_IdColumn) = value
            End Set
        End Property
        
        Public Property Question As String
            Get
                Try 
                    Return CType(Me(Me.tablestatistictsAnswers.QuestionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatistictsAnswers.QuestionColumn) = value
            End Set
        End Property
        
        Public Property Answer As String
            Get
                Try 
                    Return CType(Me(Me.tablestatistictsAnswers.AnswerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatistictsAnswers.AnswerColumn) = value
            End Set
        End Property
        
        Public Property CountAnswers As Integer
            Get
                Try 
                    Return CType(Me(Me.tablestatistictsAnswers.CountAnswersColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatistictsAnswers.CountAnswersColumn) = value
            End Set
        End Property
        
        Public Property CountTotalAnswers As Integer
            Get
                Try 
                    Return CType(Me(Me.tablestatistictsAnswers.CountTotalAnswersColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatistictsAnswers.CountTotalAnswersColumn) = value
            End Set
        End Property
        
        Public Property InPercent As Double
            Get
                Try 
                    Return CType(Me(Me.tablestatistictsAnswers.InPercentColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatistictsAnswers.InPercentColumn) = value
            End Set
        End Property
        
        Public Function IsQuestion_IdNull() As Boolean
            Return Me.IsNull(Me.tablestatistictsAnswers.Question_IdColumn)
        End Function
        
        Public Sub SetQuestion_IdNull()
            Me(Me.tablestatistictsAnswers.Question_IdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuestionNull() As Boolean
            Return Me.IsNull(Me.tablestatistictsAnswers.QuestionColumn)
        End Function
        
        Public Sub SetQuestionNull()
            Me(Me.tablestatistictsAnswers.QuestionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAnswerNull() As Boolean
            Return Me.IsNull(Me.tablestatistictsAnswers.AnswerColumn)
        End Function
        
        Public Sub SetAnswerNull()
            Me(Me.tablestatistictsAnswers.AnswerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCountAnswersNull() As Boolean
            Return Me.IsNull(Me.tablestatistictsAnswers.CountAnswersColumn)
        End Function
        
        Public Sub SetCountAnswersNull()
            Me(Me.tablestatistictsAnswers.CountAnswersColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCountTotalAnswersNull() As Boolean
            Return Me.IsNull(Me.tablestatistictsAnswers.CountTotalAnswersColumn)
        End Function
        
        Public Sub SetCountTotalAnswersNull()
            Me(Me.tablestatistictsAnswers.CountTotalAnswersColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInPercentNull() As Boolean
            Return Me.IsNull(Me.tablestatistictsAnswers.InPercentColumn)
        End Function
        
        Public Sub SetInPercentNull()
            Me(Me.tablestatistictsAnswers.InPercentColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class statistictsAnswersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As statistictsAnswersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As statistictsAnswersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As statistictsAnswersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class test_UserDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPerson_Id As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnName As DataColumn
        
        Private columnLastname As DataColumn
        
        Private columnPhone As DataColumn
        
        Friend Sub New()
            MyBase.New("test_User")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Person_IdColumn As DataColumn
            Get
                Return Me.columnPerson_Id
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property LastnameColumn As DataColumn
            Get
                Return Me.columnLastname
            End Get
        End Property
        
        Friend ReadOnly Property PhoneColumn As DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As test_UserRow
            Get
                Return CType(Me.Rows(index),test_UserRow)
            End Get
        End Property
        
        Public Event test_UserRowChanged As test_UserRowChangeEventHandler
        
        Public Event test_UserRowChanging As test_UserRowChangeEventHandler
        
        Public Event test_UserRowDeleted As test_UserRowChangeEventHandler
        
        Public Event test_UserRowDeleting As test_UserRowChangeEventHandler
        
        Public Overloads Sub Addtest_UserRow(ByVal row As test_UserRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addtest_UserRow(ByVal Email As String, ByVal Name As String, ByVal Lastname As String, ByVal Phone As String) As test_UserRow
            Dim rowtest_UserRow As test_UserRow = CType(Me.NewRow,test_UserRow)
            rowtest_UserRow.ItemArray = New Object() {Nothing, Email, Name, Lastname, Phone}
            Me.Rows.Add(rowtest_UserRow)
            Return rowtest_UserRow
        End Function
        
        Public Function FindByPerson_Id(ByVal Person_Id As Integer) As test_UserRow
            Return CType(Me.Rows.Find(New Object() {Person_Id}),test_UserRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As test_UserDataTable = CType(MyBase.Clone,test_UserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New test_UserDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPerson_Id = Me.Columns("Person_Id")
            Me.columnEmail = Me.Columns("Email")
            Me.columnName = Me.Columns("Name")
            Me.columnLastname = Me.Columns("Lastname")
            Me.columnPhone = Me.Columns("Phone")
        End Sub
        
        Private Sub InitClass()
            Me.columnPerson_Id = New DataColumn("Person_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPerson_Id)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnLastname = New DataColumn("Lastname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastname)
            Me.columnPhone = New DataColumn("Phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhone)
            Me.Constraints.Add(New UniqueConstraint("Dataset_testsKey4", New DataColumn() {Me.columnPerson_Id}, true))
            Me.columnPerson_Id.AutoIncrement = true
            Me.columnPerson_Id.AllowDBNull = false
            Me.columnPerson_Id.Unique = true
        End Sub
        
        Public Function Newtest_UserRow() As test_UserRow
            Return CType(Me.NewRow,test_UserRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New test_UserRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(test_UserRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.test_UserRowChangedEvent) Is Nothing) Then
                RaiseEvent test_UserRowChanged(Me, New test_UserRowChangeEvent(CType(e.Row,test_UserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.test_UserRowChangingEvent) Is Nothing) Then
                RaiseEvent test_UserRowChanging(Me, New test_UserRowChangeEvent(CType(e.Row,test_UserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.test_UserRowDeletedEvent) Is Nothing) Then
                RaiseEvent test_UserRowDeleted(Me, New test_UserRowChangeEvent(CType(e.Row,test_UserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.test_UserRowDeletingEvent) Is Nothing) Then
                RaiseEvent test_UserRowDeleting(Me, New test_UserRowChangeEvent(CType(e.Row,test_UserRow), e.Action))
            End If
        End Sub
        
        Public Sub Removetest_UserRow(ByVal row As test_UserRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class test_UserRow
        Inherits DataRow
        
        Private tabletest_User As test_UserDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletest_User = CType(Me.Table,test_UserDataTable)
        End Sub
        
        Public Property Person_Id As Integer
            Get
                Return CType(Me(Me.tabletest_User.Person_IdColumn),Integer)
            End Get
            Set
                Me(Me.tabletest_User.Person_IdColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.tabletest_User.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_User.EmailColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tabletest_User.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_User.NameColumn) = value
            End Set
        End Property
        
        Public Property Lastname As String
            Get
                Try 
                    Return CType(Me(Me.tabletest_User.LastnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_User.LastnameColumn) = value
            End Set
        End Property
        
        Public Property Phone As String
            Get
                Try 
                    Return CType(Me(Me.tabletest_User.PhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tabletest_User.PhoneColumn) = value
            End Set
        End Property
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tabletest_User.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.tabletest_User.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tabletest_User.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tabletest_User.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastnameNull() As Boolean
            Return Me.IsNull(Me.tabletest_User.LastnameColumn)
        End Function
        
        Public Sub SetLastnameNull()
            Me(Me.tabletest_User.LastnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneNull() As Boolean
            Return Me.IsNull(Me.tabletest_User.PhoneColumn)
        End Function
        
        Public Sub SetPhoneNull()
            Me(Me.tabletest_User.PhoneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class test_UserRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As test_UserRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As test_UserRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As test_UserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class statisticsCountUsersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncountusers As DataColumn
        
        Friend Sub New()
            MyBase.New("statisticsCountUsers")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property countusersColumn As DataColumn
            Get
                Return Me.columncountusers
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As statisticsCountUsersRow
            Get
                Return CType(Me.Rows(index),statisticsCountUsersRow)
            End Get
        End Property
        
        Public Event statisticsCountUsersRowChanged As statisticsCountUsersRowChangeEventHandler
        
        Public Event statisticsCountUsersRowChanging As statisticsCountUsersRowChangeEventHandler
        
        Public Event statisticsCountUsersRowDeleted As statisticsCountUsersRowChangeEventHandler
        
        Public Event statisticsCountUsersRowDeleting As statisticsCountUsersRowChangeEventHandler
        
        Public Overloads Sub AddstatisticsCountUsersRow(ByVal row As statisticsCountUsersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddstatisticsCountUsersRow(ByVal countusers As Integer) As statisticsCountUsersRow
            Dim rowstatisticsCountUsersRow As statisticsCountUsersRow = CType(Me.NewRow,statisticsCountUsersRow)
            rowstatisticsCountUsersRow.ItemArray = New Object() {countusers}
            Me.Rows.Add(rowstatisticsCountUsersRow)
            Return rowstatisticsCountUsersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As statisticsCountUsersDataTable = CType(MyBase.Clone,statisticsCountUsersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New statisticsCountUsersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncountusers = Me.Columns("countusers")
        End Sub
        
        Private Sub InitClass()
            Me.columncountusers = New DataColumn("countusers", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncountusers)
            Me.columncountusers.ReadOnly = true
        End Sub
        
        Public Function NewstatisticsCountUsersRow() As statisticsCountUsersRow
            Return CType(Me.NewRow,statisticsCountUsersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New statisticsCountUsersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(statisticsCountUsersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.statisticsCountUsersRowChangedEvent) Is Nothing) Then
                RaiseEvent statisticsCountUsersRowChanged(Me, New statisticsCountUsersRowChangeEvent(CType(e.Row,statisticsCountUsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.statisticsCountUsersRowChangingEvent) Is Nothing) Then
                RaiseEvent statisticsCountUsersRowChanging(Me, New statisticsCountUsersRowChangeEvent(CType(e.Row,statisticsCountUsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.statisticsCountUsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent statisticsCountUsersRowDeleted(Me, New statisticsCountUsersRowChangeEvent(CType(e.Row,statisticsCountUsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.statisticsCountUsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent statisticsCountUsersRowDeleting(Me, New statisticsCountUsersRowChangeEvent(CType(e.Row,statisticsCountUsersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovestatisticsCountUsersRow(ByVal row As statisticsCountUsersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class statisticsCountUsersRow
        Inherits DataRow
        
        Private tablestatisticsCountUsers As statisticsCountUsersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablestatisticsCountUsers = CType(Me.Table,statisticsCountUsersDataTable)
        End Sub
        
        Public Property countusers As Integer
            Get
                Try 
                    Return CType(Me(Me.tablestatisticsCountUsers.countusersColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatisticsCountUsers.countusersColumn) = value
            End Set
        End Property
        
        Public Function IscountusersNull() As Boolean
            Return Me.IsNull(Me.tablestatisticsCountUsers.countusersColumn)
        End Function
        
        Public Sub SetcountusersNull()
            Me(Me.tablestatisticsCountUsers.countusersColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class statisticsCountUsersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As statisticsCountUsersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As statisticsCountUsersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As statisticsCountUsersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
