'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet_Members
    Inherits DataSet
    
    Private tableMembers As MembersDataTable
    
    Private tableMeetings As MeetingsDataTable
    
    Private tableEvents As EventsDataTable
    
    Private tableMember_Events As Member_EventsDataTable
    
    Private tableMember_Meetings As Member_MeetingsDataTable
    
    Private tableMember_Payment As Member_PaymentDataTable
    
    Private relationMembersMember_Meetings As DataRelation
    
    Private relationMembersMember_Events As DataRelation
    
    Private relationMeetingsMember_Meetings As DataRelation
    
    Private relationEventsMember_Events As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Members")) Is Nothing) Then
                Me.Tables.Add(New MembersDataTable(ds.Tables("Members")))
            End If
            If (Not (ds.Tables("Meetings")) Is Nothing) Then
                Me.Tables.Add(New MeetingsDataTable(ds.Tables("Meetings")))
            End If
            If (Not (ds.Tables("Events")) Is Nothing) Then
                Me.Tables.Add(New EventsDataTable(ds.Tables("Events")))
            End If
            If (Not (ds.Tables("Member_Events")) Is Nothing) Then
                Me.Tables.Add(New Member_EventsDataTable(ds.Tables("Member_Events")))
            End If
            If (Not (ds.Tables("Member_Meetings")) Is Nothing) Then
                Me.Tables.Add(New Member_MeetingsDataTable(ds.Tables("Member_Meetings")))
            End If
            If (Not (ds.Tables("Member_Payment")) Is Nothing) Then
                Me.Tables.Add(New Member_PaymentDataTable(ds.Tables("Member_Payment")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Members As MembersDataTable
        Get
            Return Me.tableMembers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Meetings As MeetingsDataTable
        Get
            Return Me.tableMeetings
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Events As EventsDataTable
        Get
            Return Me.tableEvents
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Member_Events As Member_EventsDataTable
        Get
            Return Me.tableMember_Events
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Member_Meetings As Member_MeetingsDataTable
        Get
            Return Me.tableMember_Meetings
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Member_Payment As Member_PaymentDataTable
        Get
            Return Me.tableMember_Payment
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet_Members = CType(MyBase.Clone,DataSet_Members)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Members")) Is Nothing) Then
            Me.Tables.Add(New MembersDataTable(ds.Tables("Members")))
        End If
        If (Not (ds.Tables("Meetings")) Is Nothing) Then
            Me.Tables.Add(New MeetingsDataTable(ds.Tables("Meetings")))
        End If
        If (Not (ds.Tables("Events")) Is Nothing) Then
            Me.Tables.Add(New EventsDataTable(ds.Tables("Events")))
        End If
        If (Not (ds.Tables("Member_Events")) Is Nothing) Then
            Me.Tables.Add(New Member_EventsDataTable(ds.Tables("Member_Events")))
        End If
        If (Not (ds.Tables("Member_Meetings")) Is Nothing) Then
            Me.Tables.Add(New Member_MeetingsDataTable(ds.Tables("Member_Meetings")))
        End If
        If (Not (ds.Tables("Member_Payment")) Is Nothing) Then
            Me.Tables.Add(New Member_PaymentDataTable(ds.Tables("Member_Payment")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMembers = CType(Me.Tables("Members"),MembersDataTable)
        If (Not (Me.tableMembers) Is Nothing) Then
            Me.tableMembers.InitVars
        End If
        Me.tableMeetings = CType(Me.Tables("Meetings"),MeetingsDataTable)
        If (Not (Me.tableMeetings) Is Nothing) Then
            Me.tableMeetings.InitVars
        End If
        Me.tableEvents = CType(Me.Tables("Events"),EventsDataTable)
        If (Not (Me.tableEvents) Is Nothing) Then
            Me.tableEvents.InitVars
        End If
        Me.tableMember_Events = CType(Me.Tables("Member_Events"),Member_EventsDataTable)
        If (Not (Me.tableMember_Events) Is Nothing) Then
            Me.tableMember_Events.InitVars
        End If
        Me.tableMember_Meetings = CType(Me.Tables("Member_Meetings"),Member_MeetingsDataTable)
        If (Not (Me.tableMember_Meetings) Is Nothing) Then
            Me.tableMember_Meetings.InitVars
        End If
        Me.tableMember_Payment = CType(Me.Tables("Member_Payment"),Member_PaymentDataTable)
        If (Not (Me.tableMember_Payment) Is Nothing) Then
            Me.tableMember_Payment.InitVars
        End If
        Me.relationMembersMember_Meetings = Me.Relations("MembersMember_Meetings")
        Me.relationMembersMember_Events = Me.Relations("MembersMember_Events")
        Me.relationMeetingsMember_Meetings = Me.Relations("MeetingsMember_Meetings")
        Me.relationEventsMember_Events = Me.Relations("EventsMember_Events")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet_Members"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet_Members.xsd"
        Me.Locale = New System.Globalization.CultureInfo("de-AT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMembers = New MembersDataTable
        Me.Tables.Add(Me.tableMembers)
        Me.tableMeetings = New MeetingsDataTable
        Me.Tables.Add(Me.tableMeetings)
        Me.tableEvents = New EventsDataTable
        Me.Tables.Add(Me.tableEvents)
        Me.tableMember_Events = New Member_EventsDataTable
        Me.Tables.Add(Me.tableMember_Events)
        Me.tableMember_Meetings = New Member_MeetingsDataTable
        Me.Tables.Add(Me.tableMember_Meetings)
        Me.tableMember_Payment = New Member_PaymentDataTable
        Me.Tables.Add(Me.tableMember_Payment)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("MembersMember_Events", New DataColumn() {Me.tableMembers.ID1Column}, New DataColumn() {Me.tableMember_Events.MemberColumn})
        Me.tableMember_Events.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("EventsMember_Events", New DataColumn() {Me.tableEvents.IdColumn}, New DataColumn() {Me.tableMember_Events._EventColumn})
        Me.tableMember_Events.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("MembersMember_Meetings", New DataColumn() {Me.tableMembers.ID1Column}, New DataColumn() {Me.tableMember_Meetings.MemberColumn})
        Me.tableMember_Meetings.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("MeetingsMember_Meetings", New DataColumn() {Me.tableMeetings.IdColumn}, New DataColumn() {Me.tableMember_Meetings.MeetingColumn})
        Me.tableMember_Meetings.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationMembersMember_Meetings = New DataRelation("MembersMember_Meetings", New DataColumn() {Me.tableMembers.ID1Column}, New DataColumn() {Me.tableMember_Meetings.MemberColumn}, false)
        Me.Relations.Add(Me.relationMembersMember_Meetings)
        Me.relationMembersMember_Events = New DataRelation("MembersMember_Events", New DataColumn() {Me.tableMembers.ID1Column}, New DataColumn() {Me.tableMember_Events.MemberColumn}, false)
        Me.Relations.Add(Me.relationMembersMember_Events)
        Me.relationMeetingsMember_Meetings = New DataRelation("MeetingsMember_Meetings", New DataColumn() {Me.tableMeetings.IdColumn}, New DataColumn() {Me.tableMember_Meetings.MeetingColumn}, false)
        Me.Relations.Add(Me.relationMeetingsMember_Meetings)
        Me.relationEventsMember_Events = New DataRelation("EventsMember_Events", New DataColumn() {Me.tableEvents.IdColumn}, New DataColumn() {Me.tableMember_Events._EventColumn}, false)
        Me.Relations.Add(Me.relationEventsMember_Events)
    End Sub
    
    Private Function ShouldSerializeMembers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMeetings() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEvents() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMember_Events() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMember_Meetings() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMember_Payment() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MembersRowChangeEventHandler(ByVal sender As Object, ByVal e As MembersRowChangeEvent)
    
    Public Delegate Sub MeetingsRowChangeEventHandler(ByVal sender As Object, ByVal e As MeetingsRowChangeEvent)
    
    Public Delegate Sub EventsRowChangeEventHandler(ByVal sender As Object, ByVal e As EventsRowChangeEvent)
    
    Public Delegate Sub Member_EventsRowChangeEventHandler(ByVal sender As Object, ByVal e As Member_EventsRowChangeEvent)
    
    Public Delegate Sub Member_MeetingsRowChangeEventHandler(ByVal sender As Object, ByVal e As Member_MeetingsRowChangeEvent)
    
    Public Delegate Sub Member_PaymentRowChangeEventHandler(ByVal sender As Object, ByVal e As Member_PaymentRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MembersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID1 As DataColumn
        
        Private columnID As DataColumn
        
        Private columnTypeOfAccount As DataColumn
        
        Private columnCategory_5 As DataColumn
        
        Private columnCategory_6 As DataColumn
        
        Private columnTitle As DataColumn
        
        Private columnFirst_name As DataColumn
        
        Private columnMiddle_Name As DataColumn
        
        Private columnLast_Name As DataColumn
        
        Private columnStudent As DataColumn
        
        Private columnAddress As DataColumn
        
        Private columnCity As DataColumn
        
        Private columnState As DataColumn
        
        Private columnZipCode As DataColumn
        
        Private columnWork_Phone As DataColumn
        
        Private columnFax_Phone As DataColumn
        
        Private columnOther_Phone As DataColumn
        
        Private columnBoard_Member As DataColumn
        
        Private column_E_mail_Address As DataColumn
        
        Private columnContact As DataColumn
        
        Private columnPaymentMethod As DataColumn
        
        Private columnNotes_1 As DataColumn
        
        Private columnNotes As DataColumn
        
        Private columnpaid_2005 As DataColumn
        
        Private columnpayment_2005 As DataColumn
        
        Private columnDate_paid_2005 As DataColumn
        
        Private columnPaid_2004 As DataColumn
        
        Private columnPayment_2004 As DataColumn
        
        Private columndate_paid_2004 As DataColumn
        
        Private columnpaid_Member_2003 As DataColumn
        
        Private columnPayment2003 As DataColumn
        
        Private columnPrivacy_Option As DataColumn
        
        Private columnPaid_Member_2002 As DataColumn
        
        Private columnPaid_Member_2001 As DataColumn
        
        Private columnDelivery_Point As DataColumn
        
        Private columnPayment As DataColumn
        
        Private columnDatePaid As DataColumn
        
        Private columnLicenseNumber As DataColumn
        
        Private columnJan292003Payment As DataColumn
        
        Private columnApril02event As DataColumn
        
        Private columnCreationTime As DataColumn
        
        Private columnChangeTime As DataColumn
        
        Private columnPassword As DataColumn
        
        Private columnPasswordConfirmation As DataColumn
        
        Private columnOfficeAddress As DataColumn
        
        Private columnTypeOfPraxis As DataColumn
        
        Private columnWebsite As DataColumn
        
        Private columnEdu_First_Degree As DataColumn
        
        Private columnEdu_First_Year As DataColumn
        
        Private columnEdu_First_School As DataColumn
        
        Private columnEdu_Second_Degree As DataColumn
        
        Private columnEdu_Second_Year As DataColumn
        
        Private columnEdu_Second_School As DataColumn
        
        Private columnEdu_Spec_Degree As DataColumn
        
        Private columnEdu_Spec_Year As DataColumn
        
        Private columnEdu_Spec_School As DataColumn
        
        Friend Sub New()
            MyBase.New("Members")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID1Column As DataColumn
            Get
                Return Me.columnID1
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property TypeOfAccountColumn As DataColumn
            Get
                Return Me.columnTypeOfAccount
            End Get
        End Property
        
        Friend ReadOnly Property Category_5Column As DataColumn
            Get
                Return Me.columnCategory_5
            End Get
        End Property
        
        Friend ReadOnly Property Category_6Column As DataColumn
            Get
                Return Me.columnCategory_6
            End Get
        End Property
        
        Friend ReadOnly Property TitleColumn As DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        Friend ReadOnly Property First_nameColumn As DataColumn
            Get
                Return Me.columnFirst_name
            End Get
        End Property
        
        Friend ReadOnly Property Middle_NameColumn As DataColumn
            Get
                Return Me.columnMiddle_Name
            End Get
        End Property
        
        Friend ReadOnly Property Last_NameColumn As DataColumn
            Get
                Return Me.columnLast_Name
            End Get
        End Property
        
        Friend ReadOnly Property StudentColumn As DataColumn
            Get
                Return Me.columnStudent
            End Get
        End Property
        
        Friend ReadOnly Property AddressColumn As DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Friend ReadOnly Property CityColumn As DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Friend ReadOnly Property StateColumn As DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        Friend ReadOnly Property ZipCodeColumn As DataColumn
            Get
                Return Me.columnZipCode
            End Get
        End Property
        
        Friend ReadOnly Property Work_PhoneColumn As DataColumn
            Get
                Return Me.columnWork_Phone
            End Get
        End Property
        
        Friend ReadOnly Property Fax_PhoneColumn As DataColumn
            Get
                Return Me.columnFax_Phone
            End Get
        End Property
        
        Friend ReadOnly Property Other_PhoneColumn As DataColumn
            Get
                Return Me.columnOther_Phone
            End Get
        End Property
        
        Friend ReadOnly Property Board_MemberColumn As DataColumn
            Get
                Return Me.columnBoard_Member
            End Get
        End Property
        
        Friend ReadOnly Property _E_mail_AddressColumn As DataColumn
            Get
                Return Me.column_E_mail_Address
            End Get
        End Property
        
        Friend ReadOnly Property ContactColumn As DataColumn
            Get
                Return Me.columnContact
            End Get
        End Property
        
        Friend ReadOnly Property PaymentMethodColumn As DataColumn
            Get
                Return Me.columnPaymentMethod
            End Get
        End Property
        
        Friend ReadOnly Property Notes_1Column As DataColumn
            Get
                Return Me.columnNotes_1
            End Get
        End Property
        
        Friend ReadOnly Property NotesColumn As DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        Friend ReadOnly Property paid_2005Column As DataColumn
            Get
                Return Me.columnpaid_2005
            End Get
        End Property
        
        Friend ReadOnly Property payment_2005Column As DataColumn
            Get
                Return Me.columnpayment_2005
            End Get
        End Property
        
        Friend ReadOnly Property Date_paid_2005Column As DataColumn
            Get
                Return Me.columnDate_paid_2005
            End Get
        End Property
        
        Friend ReadOnly Property Paid_2004Column As DataColumn
            Get
                Return Me.columnPaid_2004
            End Get
        End Property
        
        Friend ReadOnly Property Payment_2004Column As DataColumn
            Get
                Return Me.columnPayment_2004
            End Get
        End Property
        
        Friend ReadOnly Property date_paid_2004Column As DataColumn
            Get
                Return Me.columndate_paid_2004
            End Get
        End Property
        
        Friend ReadOnly Property paid_Member_2003Column As DataColumn
            Get
                Return Me.columnpaid_Member_2003
            End Get
        End Property
        
        Friend ReadOnly Property Payment2003Column As DataColumn
            Get
                Return Me.columnPayment2003
            End Get
        End Property
        
        Friend ReadOnly Property Privacy_OptionColumn As DataColumn
            Get
                Return Me.columnPrivacy_Option
            End Get
        End Property
        
        Friend ReadOnly Property Paid_Member_2002Column As DataColumn
            Get
                Return Me.columnPaid_Member_2002
            End Get
        End Property
        
        Friend ReadOnly Property Paid_Member_2001Column As DataColumn
            Get
                Return Me.columnPaid_Member_2001
            End Get
        End Property
        
        Friend ReadOnly Property Delivery_PointColumn As DataColumn
            Get
                Return Me.columnDelivery_Point
            End Get
        End Property
        
        Friend ReadOnly Property PaymentColumn As DataColumn
            Get
                Return Me.columnPayment
            End Get
        End Property
        
        Friend ReadOnly Property DatePaidColumn As DataColumn
            Get
                Return Me.columnDatePaid
            End Get
        End Property
        
        Friend ReadOnly Property LicenseNumberColumn As DataColumn
            Get
                Return Me.columnLicenseNumber
            End Get
        End Property
        
        Friend ReadOnly Property Jan292003PaymentColumn As DataColumn
            Get
                Return Me.columnJan292003Payment
            End Get
        End Property
        
        Friend ReadOnly Property April02eventColumn As DataColumn
            Get
                Return Me.columnApril02event
            End Get
        End Property
        
        Friend ReadOnly Property CreationTimeColumn As DataColumn
            Get
                Return Me.columnCreationTime
            End Get
        End Property
        
        Friend ReadOnly Property ChangeTimeColumn As DataColumn
            Get
                Return Me.columnChangeTime
            End Get
        End Property
        
        Friend ReadOnly Property PasswordColumn As DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        Friend ReadOnly Property PasswordConfirmationColumn As DataColumn
            Get
                Return Me.columnPasswordConfirmation
            End Get
        End Property
        
        Friend ReadOnly Property OfficeAddressColumn As DataColumn
            Get
                Return Me.columnOfficeAddress
            End Get
        End Property
        
        Friend ReadOnly Property TypeOfPraxisColumn As DataColumn
            Get
                Return Me.columnTypeOfPraxis
            End Get
        End Property
        
        Friend ReadOnly Property WebsiteColumn As DataColumn
            Get
                Return Me.columnWebsite
            End Get
        End Property
        
        Friend ReadOnly Property Edu_First_DegreeColumn As DataColumn
            Get
                Return Me.columnEdu_First_Degree
            End Get
        End Property
        
        Friend ReadOnly Property Edu_First_YearColumn As DataColumn
            Get
                Return Me.columnEdu_First_Year
            End Get
        End Property
        
        Friend ReadOnly Property Edu_First_SchoolColumn As DataColumn
            Get
                Return Me.columnEdu_First_School
            End Get
        End Property
        
        Friend ReadOnly Property Edu_Second_DegreeColumn As DataColumn
            Get
                Return Me.columnEdu_Second_Degree
            End Get
        End Property
        
        Friend ReadOnly Property Edu_Second_YearColumn As DataColumn
            Get
                Return Me.columnEdu_Second_Year
            End Get
        End Property
        
        Friend ReadOnly Property Edu_Second_SchoolColumn As DataColumn
            Get
                Return Me.columnEdu_Second_School
            End Get
        End Property
        
        Friend ReadOnly Property Edu_Spec_DegreeColumn As DataColumn
            Get
                Return Me.columnEdu_Spec_Degree
            End Get
        End Property
        
        Friend ReadOnly Property Edu_Spec_YearColumn As DataColumn
            Get
                Return Me.columnEdu_Spec_Year
            End Get
        End Property
        
        Friend ReadOnly Property Edu_Spec_SchoolColumn As DataColumn
            Get
                Return Me.columnEdu_Spec_School
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MembersRow
            Get
                Return CType(Me.Rows(index),MembersRow)
            End Get
        End Property
        
        Public Event MembersRowChanged As MembersRowChangeEventHandler
        
        Public Event MembersRowChanging As MembersRowChangeEventHandler
        
        Public Event MembersRowDeleted As MembersRowChangeEventHandler
        
        Public Event MembersRowDeleting As MembersRowChangeEventHandler
        
        Public Overloads Sub AddMembersRow(ByVal row As MembersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMembersRow( _
                    ByVal ID As Double,  _
                    ByVal TypeOfAccount As String,  _
                    ByVal Category_5 As String,  _
                    ByVal Category_6 As String,  _
                    ByVal Title As String,  _
                    ByVal First_name As String,  _
                    ByVal Middle_Name As String,  _
                    ByVal Last_Name As String,  _
                    ByVal Student As Boolean,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode As String,  _
                    ByVal Work_Phone As String,  _
                    ByVal Fax_Phone As String,  _
                    ByVal Other_Phone As String,  _
                    ByVal Board_Member As String,  _
                    ByVal _E_mail_Address As String,  _
                    ByVal Contact As String,  _
                    ByVal PaymentMethod As String,  _
                    ByVal Notes_1 As String,  _
                    ByVal Notes As String,  _
                    ByVal paid_2005 As Boolean,  _
                    ByVal payment_2005 As Decimal,  _
                    ByVal Date_paid_2005 As Date,  _
                    ByVal Paid_2004 As Boolean,  _
                    ByVal Payment_2004 As Decimal,  _
                    ByVal date_paid_2004 As Date,  _
                    ByVal paid_Member_2003 As Boolean,  _
                    ByVal Payment2003 As Decimal,  _
                    ByVal Privacy_Option As Boolean,  _
                    ByVal Paid_Member_2002 As Boolean,  _
                    ByVal Paid_Member_2001 As String,  _
                    ByVal Delivery_Point As String,  _
                    ByVal Payment As Decimal,  _
                    ByVal DatePaid As Date,  _
                    ByVal LicenseNumber As Double,  _
                    ByVal Jan292003Payment As Decimal,  _
                    ByVal April02event As Boolean,  _
                    ByVal CreationTime As Date,  _
                    ByVal ChangeTime As Date,  _
                    ByVal Password As String,  _
                    ByVal PasswordConfirmation As String,  _
                    ByVal OfficeAddress As String,  _
                    ByVal TypeOfPraxis As String,  _
                    ByVal Website As String,  _
                    ByVal Edu_First_Degree As String,  _
                    ByVal Edu_First_Year As String,  _
                    ByVal Edu_First_School As String,  _
                    ByVal Edu_Second_Degree As String,  _
                    ByVal Edu_Second_Year As String,  _
                    ByVal Edu_Second_School As String,  _
                    ByVal Edu_Spec_Degree As String,  _
                    ByVal Edu_Spec_Year As String,  _
                    ByVal Edu_Spec_School As String) As MembersRow
            Dim rowMembersRow As MembersRow = CType(Me.NewRow,MembersRow)
            rowMembersRow.ItemArray = New Object() {Nothing, ID, TypeOfAccount, Category_5, Category_6, Title, First_name, Middle_Name, Last_Name, Student, Address, City, State, ZipCode, Work_Phone, Fax_Phone, Other_Phone, Board_Member, _E_mail_Address, Contact, PaymentMethod, Notes_1, Notes, paid_2005, payment_2005, Date_paid_2005, Paid_2004, Payment_2004, date_paid_2004, paid_Member_2003, Payment2003, Privacy_Option, Paid_Member_2002, Paid_Member_2001, Delivery_Point, Payment, DatePaid, LicenseNumber, Jan292003Payment, April02event, CreationTime, ChangeTime, Password, PasswordConfirmation, OfficeAddress, TypeOfPraxis, Website, Edu_First_Degree, Edu_First_Year, Edu_First_School, Edu_Second_Degree, Edu_Second_Year, Edu_Second_School, Edu_Spec_Degree, Edu_Spec_Year, Edu_Spec_School}
            Me.Rows.Add(rowMembersRow)
            Return rowMembersRow
        End Function
        
        Public Function FindByID1(ByVal ID1 As Integer) As MembersRow
            Return CType(Me.Rows.Find(New Object() {ID1}),MembersRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MembersDataTable = CType(MyBase.Clone,MembersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MembersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID1 = Me.Columns("ID1")
            Me.columnID = Me.Columns("ID")
            Me.columnTypeOfAccount = Me.Columns("TypeOfAccount")
            Me.columnCategory_5 = Me.Columns("Category_5")
            Me.columnCategory_6 = Me.Columns("Category_6")
            Me.columnTitle = Me.Columns("Title")
            Me.columnFirst_name = Me.Columns("First_name")
            Me.columnMiddle_Name = Me.Columns("Middle_Name")
            Me.columnLast_Name = Me.Columns("Last_Name")
            Me.columnStudent = Me.Columns("Student")
            Me.columnAddress = Me.Columns("Address")
            Me.columnCity = Me.Columns("City")
            Me.columnState = Me.Columns("State")
            Me.columnZipCode = Me.Columns("ZipCode")
            Me.columnWork_Phone = Me.Columns("Work_Phone")
            Me.columnFax_Phone = Me.Columns("Fax_Phone")
            Me.columnOther_Phone = Me.Columns("Other_Phone")
            Me.columnBoard_Member = Me.Columns("Board Member")
            Me.column_E_mail_Address = Me.Columns("E-mail Address")
            Me.columnContact = Me.Columns("Contact")
            Me.columnPaymentMethod = Me.Columns("PaymentMethod")
            Me.columnNotes_1 = Me.Columns("Notes_1")
            Me.columnNotes = Me.Columns("Notes")
            Me.columnpaid_2005 = Me.Columns("paid 2005")
            Me.columnpayment_2005 = Me.Columns("payment 2005")
            Me.columnDate_paid_2005 = Me.Columns("Date paid 2005")
            Me.columnPaid_2004 = Me.Columns("Paid 2004")
            Me.columnPayment_2004 = Me.Columns("Payment 2004")
            Me.columndate_paid_2004 = Me.Columns("date paid 2004")
            Me.columnpaid_Member_2003 = Me.Columns("paid Member 2003")
            Me.columnPayment2003 = Me.Columns("Payment2003")
            Me.columnPrivacy_Option = Me.Columns("Privacy Option")
            Me.columnPaid_Member_2002 = Me.Columns("Paid Member 2002")
            Me.columnPaid_Member_2001 = Me.Columns("Paid Member 2001")
            Me.columnDelivery_Point = Me.Columns("Delivery Point")
            Me.columnPayment = Me.Columns("Payment")
            Me.columnDatePaid = Me.Columns("DatePaid")
            Me.columnLicenseNumber = Me.Columns("LicenseNumber")
            Me.columnJan292003Payment = Me.Columns("Jan292003Payment")
            Me.columnApril02event = Me.Columns("April02event")
            Me.columnCreationTime = Me.Columns("CreationTime")
            Me.columnChangeTime = Me.Columns("ChangeTime")
            Me.columnPassword = Me.Columns("Password")
            Me.columnPasswordConfirmation = Me.Columns("PasswordConfirmation")
            Me.columnOfficeAddress = Me.Columns("OfficeAddress")
            Me.columnTypeOfPraxis = Me.Columns("TypeOfPraxis")
            Me.columnWebsite = Me.Columns("Website")
            Me.columnEdu_First_Degree = Me.Columns("Edu_First_Degree")
            Me.columnEdu_First_Year = Me.Columns("Edu_First_Year")
            Me.columnEdu_First_School = Me.Columns("Edu_First_School")
            Me.columnEdu_Second_Degree = Me.Columns("Edu_Second_Degree")
            Me.columnEdu_Second_Year = Me.Columns("Edu_Second_Year")
            Me.columnEdu_Second_School = Me.Columns("Edu_Second_School")
            Me.columnEdu_Spec_Degree = Me.Columns("Edu_Spec_Degree")
            Me.columnEdu_Spec_Year = Me.Columns("Edu_Spec_Year")
            Me.columnEdu_Spec_School = Me.Columns("Edu_Spec_School")
        End Sub
        
        Private Sub InitClass()
            Me.columnID1 = New DataColumn("ID1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID1)
            Me.columnID = New DataColumn("ID", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnTypeOfAccount = New DataColumn("TypeOfAccount", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeOfAccount)
            Me.columnCategory_5 = New DataColumn("Category_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCategory_5)
            Me.columnCategory_6 = New DataColumn("Category_6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCategory_6)
            Me.columnTitle = New DataColumn("Title", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitle)
            Me.columnFirst_name = New DataColumn("First_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirst_name)
            Me.columnMiddle_Name = New DataColumn("Middle_Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMiddle_Name)
            Me.columnLast_Name = New DataColumn("Last_Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLast_Name)
            Me.columnStudent = New DataColumn("Student", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStudent)
            Me.columnAddress = New DataColumn("Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress)
            Me.columnCity = New DataColumn("City", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCity)
            Me.columnState = New DataColumn("State", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnState)
            Me.columnZipCode = New DataColumn("ZipCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZipCode)
            Me.columnWork_Phone = New DataColumn("Work_Phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWork_Phone)
            Me.columnFax_Phone = New DataColumn("Fax_Phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax_Phone)
            Me.columnOther_Phone = New DataColumn("Other_Phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOther_Phone)
            Me.columnBoard_Member = New DataColumn("Board Member", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBoard_Member)
            Me.column_E_mail_Address = New DataColumn("E-mail Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_E_mail_Address)
            Me.columnContact = New DataColumn("Contact", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContact)
            Me.columnPaymentMethod = New DataColumn("PaymentMethod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentMethod)
            Me.columnNotes_1 = New DataColumn("Notes_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotes_1)
            Me.columnNotes = New DataColumn("Notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotes)
            Me.columnpaid_2005 = New DataColumn("paid 2005", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpaid_2005)
            Me.columnpayment_2005 = New DataColumn("payment 2005", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_2005)
            Me.columnDate_paid_2005 = New DataColumn("Date paid 2005", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDate_paid_2005)
            Me.columnPaid_2004 = New DataColumn("Paid 2004", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_2004)
            Me.columnPayment_2004 = New DataColumn("Payment 2004", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment_2004)
            Me.columndate_paid_2004 = New DataColumn("date paid 2004", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_paid_2004)
            Me.columnpaid_Member_2003 = New DataColumn("paid Member 2003", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpaid_Member_2003)
            Me.columnPayment2003 = New DataColumn("Payment2003", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment2003)
            Me.columnPrivacy_Option = New DataColumn("Privacy Option", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrivacy_Option)
            Me.columnPaid_Member_2002 = New DataColumn("Paid Member 2002", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_Member_2002)
            Me.columnPaid_Member_2001 = New DataColumn("Paid Member 2001", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_Member_2001)
            Me.columnDelivery_Point = New DataColumn("Delivery Point", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDelivery_Point)
            Me.columnPayment = New DataColumn("Payment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment)
            Me.columnDatePaid = New DataColumn("DatePaid", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDatePaid)
            Me.columnLicenseNumber = New DataColumn("LicenseNumber", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicenseNumber)
            Me.columnJan292003Payment = New DataColumn("Jan292003Payment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJan292003Payment)
            Me.columnApril02event = New DataColumn("April02event", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApril02event)
            Me.columnCreationTime = New DataColumn("CreationTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreationTime)
            Me.columnChangeTime = New DataColumn("ChangeTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChangeTime)
            Me.columnPassword = New DataColumn("Password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPassword)
            Me.columnPasswordConfirmation = New DataColumn("PasswordConfirmation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPasswordConfirmation)
            Me.columnOfficeAddress = New DataColumn("OfficeAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOfficeAddress)
            Me.columnTypeOfPraxis = New DataColumn("TypeOfPraxis", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeOfPraxis)
            Me.columnWebsite = New DataColumn("Website", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWebsite)
            Me.columnEdu_First_Degree = New DataColumn("Edu_First_Degree", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_First_Degree)
            Me.columnEdu_First_Year = New DataColumn("Edu_First_Year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_First_Year)
            Me.columnEdu_First_School = New DataColumn("Edu_First_School", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_First_School)
            Me.columnEdu_Second_Degree = New DataColumn("Edu_Second_Degree", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_Second_Degree)
            Me.columnEdu_Second_Year = New DataColumn("Edu_Second_Year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_Second_Year)
            Me.columnEdu_Second_School = New DataColumn("Edu_Second_School", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_Second_School)
            Me.columnEdu_Spec_Degree = New DataColumn("Edu_Spec_Degree", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_Spec_Degree)
            Me.columnEdu_Spec_Year = New DataColumn("Edu_Spec_Year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_Spec_Year)
            Me.columnEdu_Spec_School = New DataColumn("Edu_Spec_School", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_Spec_School)
            Me.Constraints.Add(New UniqueConstraint("DataSet_MembersKey1", New DataColumn() {Me.columnID1}, true))
            Me.columnID1.AutoIncrement = true
            Me.columnID1.AllowDBNull = false
            Me.columnID1.Unique = true
        End Sub
        
        Public Function NewMembersRow() As MembersRow
            Return CType(Me.NewRow,MembersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MembersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MembersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MembersRowChangedEvent) Is Nothing) Then
                RaiseEvent MembersRowChanged(Me, New MembersRowChangeEvent(CType(e.Row,MembersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MembersRowChangingEvent) Is Nothing) Then
                RaiseEvent MembersRowChanging(Me, New MembersRowChangeEvent(CType(e.Row,MembersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MembersRowDeletedEvent) Is Nothing) Then
                RaiseEvent MembersRowDeleted(Me, New MembersRowChangeEvent(CType(e.Row,MembersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MembersRowDeletingEvent) Is Nothing) Then
                RaiseEvent MembersRowDeleting(Me, New MembersRowChangeEvent(CType(e.Row,MembersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMembersRow(ByVal row As MembersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MembersRow
        Inherits DataRow
        
        Private tableMembers As MembersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMembers = CType(Me.Table,MembersDataTable)
        End Sub
        
        Public Property ID1 As Integer
            Get
                Return CType(Me(Me.tableMembers.ID1Column),Integer)
            End Get
            Set
                Me(Me.tableMembers.ID1Column) = value
            End Set
        End Property
        
        Public Property ID As Double
            Get
                Try 
                    Return CType(Me(Me.tableMembers.IDColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.IDColumn) = value
            End Set
        End Property
        
        Public Property TypeOfAccount As String
            Get
                If Me.IsTypeOfAccountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.TypeOfAccountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.TypeOfAccountColumn) = value
            End Set
        End Property
        
        Public Property Category_5 As String
            Get
                If Me.IsCategory_5Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Category_5Column),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Category_5Column) = value
            End Set
        End Property
        
        Public Property Category_6 As String
            Get
                If Me.IsCategory_6Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Category_6Column),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Category_6Column) = value
            End Set
        End Property
        
        Public Property Title As String
            Get
                If Me.IsTitleNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.TitleColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.TitleColumn) = value
            End Set
        End Property
        
        Public Property First_name As String
            Get
                If Me.IsFirst_nameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.First_nameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.First_nameColumn) = value
            End Set
        End Property
        
        Public Property Middle_Name As String
            Get
                If Me.IsMiddle_NameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Middle_NameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Middle_NameColumn) = value
            End Set
        End Property
        
        Public Property Last_Name As String
            Get
                If Me.IsLast_NameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Last_NameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Last_NameColumn) = value
            End Set
        End Property
        
        Public Property Student As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.StudentColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.StudentColumn) = value
            End Set
        End Property
        
        Public Property Address As String
            Get
                If Me.IsAddressNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.AddressColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.AddressColumn) = value
            End Set
        End Property
        
        Public Property City As String
            Get
                If Me.IsCityNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.CityColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.CityColumn) = value
            End Set
        End Property
        
        Public Property State As String
            Get
                If Me.IsStateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.StateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.StateColumn) = value
            End Set
        End Property
        
        Public Property ZipCode As String
            Get
                If Me.IsZipCodeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.ZipCodeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.ZipCodeColumn) = value
            End Set
        End Property
        
        Public Property Work_Phone As String
            Get
                If Me.IsWork_PhoneNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Work_PhoneColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Work_PhoneColumn) = value
            End Set
        End Property
        
        Public Property Fax_Phone As String
            Get
                If Me.IsFax_PhoneNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Fax_PhoneColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Fax_PhoneColumn) = value
            End Set
        End Property
        
        Public Property Other_Phone As String
            Get
                If Me.IsOther_PhoneNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Other_PhoneColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Other_PhoneColumn) = value
            End Set
        End Property
        
        Public Property Board_Member As String
            Get
                If Me.IsBoard_MemberNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Board_MemberColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Board_MemberColumn) = value
            End Set
        End Property
        
        Public Property _E_mail_Address As String
            Get
                If Me.Is_E_mail_AddressNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers._E_mail_AddressColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers._E_mail_AddressColumn) = value
            End Set
        End Property
        
        Public Property Contact As String
            Get
                If Me.IsContactNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.ContactColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.ContactColumn) = value
            End Set
        End Property
        
        Public Property PaymentMethod As String
            Get
                If Me.IsPaymentMethodNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.PaymentMethodColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.PaymentMethodColumn) = value
            End Set
        End Property
        
        Public Property Notes_1 As String
            Get
                If Me.IsNotes_1Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Notes_1Column),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Notes_1Column) = value
            End Set
        End Property
        
        Public Property Notes As String
            Get
                If Me.IsNotesNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.NotesColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.NotesColumn) = value
            End Set
        End Property
        
        Public Property paid_2005 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.paid_2005Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.paid_2005Column) = value
            End Set
        End Property
        
        Public Property payment_2005 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMembers.payment_2005Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.payment_2005Column) = value
            End Set
        End Property
        
        Public Property Date_paid_2005 As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Date_paid_2005Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Date_paid_2005Column) = value
            End Set
        End Property
        
        Public Property Paid_2004 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Paid_2004Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Paid_2004Column) = value
            End Set
        End Property
        
        Public Property Payment_2004 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Payment_2004Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Payment_2004Column) = value
            End Set
        End Property
        
        Public Property date_paid_2004 As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.date_paid_2004Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.date_paid_2004Column) = value
            End Set
        End Property
        
        Public Property paid_Member_2003 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.paid_Member_2003Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.paid_Member_2003Column) = value
            End Set
        End Property
        
        Public Property Payment2003 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Payment2003Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Payment2003Column) = value
            End Set
        End Property
        
        Public Property Privacy_Option As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Privacy_OptionColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Privacy_OptionColumn) = value
            End Set
        End Property
        
        Public Property Paid_Member_2002 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Paid_Member_2002Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Paid_Member_2002Column) = value
            End Set
        End Property
        
        Public Property Paid_Member_2001 As String
            Get
                If Me.IsPaid_Member_2001Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Paid_Member_2001Column),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Paid_Member_2001Column) = value
            End Set
        End Property
        
        Public Property Delivery_Point As String
            Get
                If Me.IsDelivery_PointNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Delivery_PointColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Delivery_PointColumn) = value
            End Set
        End Property
        
        Public Property Payment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMembers.PaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.PaymentColumn) = value
            End Set
        End Property
        
        Public Property DatePaid As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.DatePaidColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.DatePaidColumn) = value
            End Set
        End Property
        
        Public Property LicenseNumber As Double
            Get
                Try 
                    Return CType(Me(Me.tableMembers.LicenseNumberColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.LicenseNumberColumn) = value
            End Set
        End Property
        
        Public Property Jan292003Payment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Jan292003PaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Jan292003PaymentColumn) = value
            End Set
        End Property
        
        Public Property April02event As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.April02eventColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.April02eventColumn) = value
            End Set
        End Property
        
        Public Property CreationTime As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.CreationTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.CreationTimeColumn) = value
            End Set
        End Property
        
        Public Property ChangeTime As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.ChangeTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.ChangeTimeColumn) = value
            End Set
        End Property
        
        Public Property Password As String
            Get
                If Me.IsPasswordNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.PasswordColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.PasswordColumn) = value
            End Set
        End Property
        
        Public Property PasswordConfirmation As String
            Get
                If Me.IsPasswordConfirmationNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.PasswordConfirmationColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.PasswordConfirmationColumn) = value
            End Set
        End Property
        
        Public Property OfficeAddress As String
            Get
                If Me.IsOfficeAddressNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.OfficeAddressColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.OfficeAddressColumn) = value
            End Set
        End Property
        
        Public Property TypeOfPraxis As String
            Get
                If Me.IsTypeOfPraxisNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.TypeOfPraxisColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.TypeOfPraxisColumn) = value
            End Set
        End Property
        
        Public Property Website As String
            Get
                If Me.IsWebsiteNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.WebsiteColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.WebsiteColumn) = value
            End Set
        End Property
        
        Public Property Edu_First_Degree As String
            Get
                If Me.IsEdu_First_DegreeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Edu_First_DegreeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Edu_First_DegreeColumn) = value
            End Set
        End Property
        
        Public Property Edu_First_Year As String
            Get
                If Me.IsEdu_First_YearNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Edu_First_YearColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Edu_First_YearColumn) = value
            End Set
        End Property
        
        Public Property Edu_First_School As String
            Get
                If Me.IsEdu_First_SchoolNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Edu_First_SchoolColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Edu_First_SchoolColumn) = value
            End Set
        End Property
        
        Public Property Edu_Second_Degree As String
            Get
                If Me.IsEdu_Second_DegreeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Edu_Second_DegreeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Edu_Second_DegreeColumn) = value
            End Set
        End Property
        
        Public Property Edu_Second_Year As String
            Get
                If Me.IsEdu_Second_YearNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Edu_Second_YearColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Edu_Second_YearColumn) = value
            End Set
        End Property
        
        Public Property Edu_Second_School As String
            Get
                If Me.IsEdu_Second_SchoolNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Edu_Second_SchoolColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Edu_Second_SchoolColumn) = value
            End Set
        End Property
        
        Public Property Edu_Spec_Degree As String
            Get
                If Me.IsEdu_Spec_DegreeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Edu_Spec_DegreeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Edu_Spec_DegreeColumn) = value
            End Set
        End Property
        
        Public Property Edu_Spec_Year As String
            Get
                If Me.IsEdu_Spec_YearNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Edu_Spec_YearColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Edu_Spec_YearColumn) = value
            End Set
        End Property
        
        Public Property Edu_Spec_School As String
            Get
                If Me.IsEdu_Spec_SchoolNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableMembers.Edu_Spec_SchoolColumn),String)
                End If
            End Get
            Set
                Me(Me.tableMembers.Edu_Spec_SchoolColumn) = value
            End Set
        End Property
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMembers.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableMembers.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeOfAccountNull() As Boolean
            Return Me.IsNull(Me.tableMembers.TypeOfAccountColumn)
        End Function
        
        Public Sub SetTypeOfAccountNull()
            Me(Me.tableMembers.TypeOfAccountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCategory_5Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Category_5Column)
        End Function
        
        Public Sub SetCategory_5Null()
            Me(Me.tableMembers.Category_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCategory_6Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Category_6Column)
        End Function
        
        Public Sub SetCategory_6Null()
            Me(Me.tableMembers.Category_6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tableMembers.TitleColumn)
        End Function
        
        Public Sub SetTitleNull()
            Me(Me.tableMembers.TitleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirst_nameNull() As Boolean
            Return Me.IsNull(Me.tableMembers.First_nameColumn)
        End Function
        
        Public Sub SetFirst_nameNull()
            Me(Me.tableMembers.First_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMiddle_NameNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Middle_NameColumn)
        End Function
        
        Public Sub SetMiddle_NameNull()
            Me(Me.tableMembers.Middle_NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLast_NameNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Last_NameColumn)
        End Function
        
        Public Sub SetLast_NameNull()
            Me(Me.tableMembers.Last_NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStudentNull() As Boolean
            Return Me.IsNull(Me.tableMembers.StudentColumn)
        End Function
        
        Public Sub SetStudentNull()
            Me(Me.tableMembers.StudentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableMembers.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tableMembers.AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableMembers.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tableMembers.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableMembers.StateColumn)
        End Function
        
        Public Sub SetStateNull()
            Me(Me.tableMembers.StateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsZipCodeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.ZipCodeColumn)
        End Function
        
        Public Sub SetZipCodeNull()
            Me(Me.tableMembers.ZipCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWork_PhoneNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Work_PhoneColumn)
        End Function
        
        Public Sub SetWork_PhoneNull()
            Me(Me.tableMembers.Work_PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFax_PhoneNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Fax_PhoneColumn)
        End Function
        
        Public Sub SetFax_PhoneNull()
            Me(Me.tableMembers.Fax_PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOther_PhoneNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Other_PhoneColumn)
        End Function
        
        Public Sub SetOther_PhoneNull()
            Me(Me.tableMembers.Other_PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBoard_MemberNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Board_MemberColumn)
        End Function
        
        Public Sub SetBoard_MemberNull()
            Me(Me.tableMembers.Board_MemberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_E_mail_AddressNull() As Boolean
            Return Me.IsNull(Me.tableMembers._E_mail_AddressColumn)
        End Function
        
        Public Sub Set_E_mail_AddressNull()
            Me(Me.tableMembers._E_mail_AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContactNull() As Boolean
            Return Me.IsNull(Me.tableMembers.ContactColumn)
        End Function
        
        Public Sub SetContactNull()
            Me(Me.tableMembers.ContactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentMethodNull() As Boolean
            Return Me.IsNull(Me.tableMembers.PaymentMethodColumn)
        End Function
        
        Public Sub SetPaymentMethodNull()
            Me(Me.tableMembers.PaymentMethodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotes_1Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Notes_1Column)
        End Function
        
        Public Sub SetNotes_1Null()
            Me(Me.tableMembers.Notes_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableMembers.NotesColumn)
        End Function
        
        Public Sub SetNotesNull()
            Me(Me.tableMembers.NotesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispaid_2005Null() As Boolean
            Return Me.IsNull(Me.tableMembers.paid_2005Column)
        End Function
        
        Public Sub Setpaid_2005Null()
            Me(Me.tableMembers.paid_2005Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_2005Null() As Boolean
            Return Me.IsNull(Me.tableMembers.payment_2005Column)
        End Function
        
        Public Sub Setpayment_2005Null()
            Me(Me.tableMembers.payment_2005Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDate_paid_2005Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Date_paid_2005Column)
        End Function
        
        Public Sub SetDate_paid_2005Null()
            Me(Me.tableMembers.Date_paid_2005Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_2004Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Paid_2004Column)
        End Function
        
        Public Sub SetPaid_2004Null()
            Me(Me.tableMembers.Paid_2004Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPayment_2004Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Payment_2004Column)
        End Function
        
        Public Sub SetPayment_2004Null()
            Me(Me.tableMembers.Payment_2004Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_paid_2004Null() As Boolean
            Return Me.IsNull(Me.tableMembers.date_paid_2004Column)
        End Function
        
        Public Sub Setdate_paid_2004Null()
            Me(Me.tableMembers.date_paid_2004Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ispaid_Member_2003Null() As Boolean
            Return Me.IsNull(Me.tableMembers.paid_Member_2003Column)
        End Function
        
        Public Sub Setpaid_Member_2003Null()
            Me(Me.tableMembers.paid_Member_2003Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPayment2003Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Payment2003Column)
        End Function
        
        Public Sub SetPayment2003Null()
            Me(Me.tableMembers.Payment2003Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrivacy_OptionNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Privacy_OptionColumn)
        End Function
        
        Public Sub SetPrivacy_OptionNull()
            Me(Me.tableMembers.Privacy_OptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_Member_2002Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Paid_Member_2002Column)
        End Function
        
        Public Sub SetPaid_Member_2002Null()
            Me(Me.tableMembers.Paid_Member_2002Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_Member_2001Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Paid_Member_2001Column)
        End Function
        
        Public Sub SetPaid_Member_2001Null()
            Me(Me.tableMembers.Paid_Member_2001Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDelivery_PointNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Delivery_PointColumn)
        End Function
        
        Public Sub SetDelivery_PointNull()
            Me(Me.tableMembers.Delivery_PointColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentNull() As Boolean
            Return Me.IsNull(Me.tableMembers.PaymentColumn)
        End Function
        
        Public Sub SetPaymentNull()
            Me(Me.tableMembers.PaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDatePaidNull() As Boolean
            Return Me.IsNull(Me.tableMembers.DatePaidColumn)
        End Function
        
        Public Sub SetDatePaidNull()
            Me(Me.tableMembers.DatePaidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNumberNull() As Boolean
            Return Me.IsNull(Me.tableMembers.LicenseNumberColumn)
        End Function
        
        Public Sub SetLicenseNumberNull()
            Me(Me.tableMembers.LicenseNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJan292003PaymentNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Jan292003PaymentColumn)
        End Function
        
        Public Sub SetJan292003PaymentNull()
            Me(Me.tableMembers.Jan292003PaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApril02eventNull() As Boolean
            Return Me.IsNull(Me.tableMembers.April02eventColumn)
        End Function
        
        Public Sub SetApril02eventNull()
            Me(Me.tableMembers.April02eventColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreationTimeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.CreationTimeColumn)
        End Function
        
        Public Sub SetCreationTimeNull()
            Me(Me.tableMembers.CreationTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChangeTimeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.ChangeTimeColumn)
        End Function
        
        Public Sub SetChangeTimeNull()
            Me(Me.tableMembers.ChangeTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tableMembers.PasswordColumn)
        End Function
        
        Public Sub SetPasswordNull()
            Me(Me.tableMembers.PasswordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPasswordConfirmationNull() As Boolean
            Return Me.IsNull(Me.tableMembers.PasswordConfirmationColumn)
        End Function
        
        Public Sub SetPasswordConfirmationNull()
            Me(Me.tableMembers.PasswordConfirmationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOfficeAddressNull() As Boolean
            Return Me.IsNull(Me.tableMembers.OfficeAddressColumn)
        End Function
        
        Public Sub SetOfficeAddressNull()
            Me(Me.tableMembers.OfficeAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeOfPraxisNull() As Boolean
            Return Me.IsNull(Me.tableMembers.TypeOfPraxisColumn)
        End Function
        
        Public Sub SetTypeOfPraxisNull()
            Me(Me.tableMembers.TypeOfPraxisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWebsiteNull() As Boolean
            Return Me.IsNull(Me.tableMembers.WebsiteColumn)
        End Function
        
        Public Sub SetWebsiteNull()
            Me(Me.tableMembers.WebsiteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_First_DegreeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_First_DegreeColumn)
        End Function
        
        Public Sub SetEdu_First_DegreeNull()
            Me(Me.tableMembers.Edu_First_DegreeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_First_YearNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_First_YearColumn)
        End Function
        
        Public Sub SetEdu_First_YearNull()
            Me(Me.tableMembers.Edu_First_YearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_First_SchoolNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_First_SchoolColumn)
        End Function
        
        Public Sub SetEdu_First_SchoolNull()
            Me(Me.tableMembers.Edu_First_SchoolColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_Second_DegreeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_Second_DegreeColumn)
        End Function
        
        Public Sub SetEdu_Second_DegreeNull()
            Me(Me.tableMembers.Edu_Second_DegreeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_Second_YearNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_Second_YearColumn)
        End Function
        
        Public Sub SetEdu_Second_YearNull()
            Me(Me.tableMembers.Edu_Second_YearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_Second_SchoolNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_Second_SchoolColumn)
        End Function
        
        Public Sub SetEdu_Second_SchoolNull()
            Me(Me.tableMembers.Edu_Second_SchoolColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_Spec_DegreeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_Spec_DegreeColumn)
        End Function
        
        Public Sub SetEdu_Spec_DegreeNull()
            Me(Me.tableMembers.Edu_Spec_DegreeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_Spec_YearNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_Spec_YearColumn)
        End Function
        
        Public Sub SetEdu_Spec_YearNull()
            Me(Me.tableMembers.Edu_Spec_YearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_Spec_SchoolNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_Spec_SchoolColumn)
        End Function
        
        Public Sub SetEdu_Spec_SchoolNull()
            Me(Me.tableMembers.Edu_Spec_SchoolColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetMember_MeetingsRows() As Member_MeetingsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("MembersMember_Meetings")),Member_MeetingsRow())
        End Function
        
        Public Function GetMember_EventsRows() As Member_EventsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("MembersMember_Events")),Member_EventsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MembersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MembersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MembersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MembersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MeetingsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnPrice As DataColumn
        
        Friend Sub New()
            MyBase.New("Meetings")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property PriceColumn As DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MeetingsRow
            Get
                Return CType(Me.Rows(index),MeetingsRow)
            End Get
        End Property
        
        Public Event MeetingsRowChanged As MeetingsRowChangeEventHandler
        
        Public Event MeetingsRowChanging As MeetingsRowChangeEventHandler
        
        Public Event MeetingsRowDeleted As MeetingsRowChangeEventHandler
        
        Public Event MeetingsRowDeleting As MeetingsRowChangeEventHandler
        
        Public Overloads Sub AddMeetingsRow(ByVal row As MeetingsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMeetingsRow(ByVal Description As String, ByVal Price As Integer) As MeetingsRow
            Dim rowMeetingsRow As MeetingsRow = CType(Me.NewRow,MeetingsRow)
            rowMeetingsRow.ItemArray = New Object() {Nothing, Description, Price}
            Me.Rows.Add(rowMeetingsRow)
            Return rowMeetingsRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As MeetingsRow
            Return CType(Me.Rows.Find(New Object() {Id}),MeetingsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MeetingsDataTable = CType(MyBase.Clone,MeetingsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MeetingsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnDescription = Me.Columns("Description")
            Me.columnPrice = Me.Columns("Price")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnPrice = New DataColumn("Price", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice)
            Me.Constraints.Add(New UniqueConstraint("DataSet_MembersKey2", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewMeetingsRow() As MeetingsRow
            Return CType(Me.NewRow,MeetingsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MeetingsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MeetingsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MeetingsRowChangedEvent) Is Nothing) Then
                RaiseEvent MeetingsRowChanged(Me, New MeetingsRowChangeEvent(CType(e.Row,MeetingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MeetingsRowChangingEvent) Is Nothing) Then
                RaiseEvent MeetingsRowChanging(Me, New MeetingsRowChangeEvent(CType(e.Row,MeetingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MeetingsRowDeletedEvent) Is Nothing) Then
                RaiseEvent MeetingsRowDeleted(Me, New MeetingsRowChangeEvent(CType(e.Row,MeetingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MeetingsRowDeletingEvent) Is Nothing) Then
                RaiseEvent MeetingsRowDeleting(Me, New MeetingsRowChangeEvent(CType(e.Row,MeetingsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMeetingsRow(ByVal row As MeetingsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MeetingsRow
        Inherits DataRow
        
        Private tableMeetings As MeetingsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMeetings = CType(Me.Table,MeetingsDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableMeetings.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableMeetings.IdColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableMeetings.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMeetings.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property Price As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMeetings.PriceColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMeetings.PriceColumn) = value
            End Set
        End Property
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableMeetings.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableMeetings.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableMeetings.PriceColumn)
        End Function
        
        Public Sub SetPriceNull()
            Me(Me.tableMeetings.PriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetMember_MeetingsRows() As Member_MeetingsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("MeetingsMember_Meetings")),Member_MeetingsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MeetingsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MeetingsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MeetingsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MeetingsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EventsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnPresenter As DataColumn
        
        Private columnTopic As DataColumn
        
        Private columnSchedule As DataColumn
        
        Private columnPlace As DataColumn
        
        Private columnPrice As DataColumn
        
        Friend Sub New()
            MyBase.New("Events")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property PresenterColumn As DataColumn
            Get
                Return Me.columnPresenter
            End Get
        End Property
        
        Friend ReadOnly Property TopicColumn As DataColumn
            Get
                Return Me.columnTopic
            End Get
        End Property
        
        Friend ReadOnly Property ScheduleColumn As DataColumn
            Get
                Return Me.columnSchedule
            End Get
        End Property
        
        Friend ReadOnly Property PlaceColumn As DataColumn
            Get
                Return Me.columnPlace
            End Get
        End Property
        
        Friend ReadOnly Property PriceColumn As DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EventsRow
            Get
                Return CType(Me.Rows(index),EventsRow)
            End Get
        End Property
        
        Public Event EventsRowChanged As EventsRowChangeEventHandler
        
        Public Event EventsRowChanging As EventsRowChangeEventHandler
        
        Public Event EventsRowDeleted As EventsRowChangeEventHandler
        
        Public Event EventsRowDeleting As EventsRowChangeEventHandler
        
        Public Overloads Sub AddEventsRow(ByVal row As EventsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEventsRow(ByVal Presenter As String, ByVal Topic As String, ByVal Schedule As Date, ByVal Place As String, ByVal Price As Integer) As EventsRow
            Dim rowEventsRow As EventsRow = CType(Me.NewRow,EventsRow)
            rowEventsRow.ItemArray = New Object() {Nothing, Presenter, Topic, Schedule, Place, Price}
            Me.Rows.Add(rowEventsRow)
            Return rowEventsRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As EventsRow
            Return CType(Me.Rows.Find(New Object() {Id}),EventsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EventsDataTable = CType(MyBase.Clone,EventsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EventsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnPresenter = Me.Columns("Presenter")
            Me.columnTopic = Me.Columns("Topic")
            Me.columnSchedule = Me.Columns("Schedule")
            Me.columnPlace = Me.Columns("Place")
            Me.columnPrice = Me.Columns("Price")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnPresenter = New DataColumn("Presenter", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPresenter)
            Me.columnTopic = New DataColumn("Topic", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTopic)
            Me.columnSchedule = New DataColumn("Schedule", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSchedule)
            Me.columnPlace = New DataColumn("Place", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlace)
            Me.columnPrice = New DataColumn("Price", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice)
            Me.Constraints.Add(New UniqueConstraint("DataSet_MembersKey3", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewEventsRow() As EventsRow
            Return CType(Me.NewRow,EventsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EventsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EventsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EventsRowChangedEvent) Is Nothing) Then
                RaiseEvent EventsRowChanged(Me, New EventsRowChangeEvent(CType(e.Row,EventsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EventsRowChangingEvent) Is Nothing) Then
                RaiseEvent EventsRowChanging(Me, New EventsRowChangeEvent(CType(e.Row,EventsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EventsRowDeletedEvent) Is Nothing) Then
                RaiseEvent EventsRowDeleted(Me, New EventsRowChangeEvent(CType(e.Row,EventsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EventsRowDeletingEvent) Is Nothing) Then
                RaiseEvent EventsRowDeleting(Me, New EventsRowChangeEvent(CType(e.Row,EventsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEventsRow(ByVal row As EventsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EventsRow
        Inherits DataRow
        
        Private tableEvents As EventsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEvents = CType(Me.Table,EventsDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableEvents.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableEvents.IdColumn) = value
            End Set
        End Property
        
        Public Property Presenter As String
            Get
                Try 
                    Return CType(Me(Me.tableEvents.PresenterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableEvents.PresenterColumn) = value
            End Set
        End Property
        
        Public Property Topic As String
            Get
                Try 
                    Return CType(Me(Me.tableEvents.TopicColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableEvents.TopicColumn) = value
            End Set
        End Property
        
        Public Property Schedule As Date
            Get
                Try 
                    Return CType(Me(Me.tableEvents.ScheduleColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableEvents.ScheduleColumn) = value
            End Set
        End Property
        
        Public Property Place As String
            Get
                Try 
                    Return CType(Me(Me.tableEvents.PlaceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableEvents.PlaceColumn) = value
            End Set
        End Property
        
        Public Property Price As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEvents.PriceColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableEvents.PriceColumn) = value
            End Set
        End Property
        
        Public Function IsPresenterNull() As Boolean
            Return Me.IsNull(Me.tableEvents.PresenterColumn)
        End Function
        
        Public Sub SetPresenterNull()
            Me(Me.tableEvents.PresenterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTopicNull() As Boolean
            Return Me.IsNull(Me.tableEvents.TopicColumn)
        End Function
        
        Public Sub SetTopicNull()
            Me(Me.tableEvents.TopicColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsScheduleNull() As Boolean
            Return Me.IsNull(Me.tableEvents.ScheduleColumn)
        End Function
        
        Public Sub SetScheduleNull()
            Me(Me.tableEvents.ScheduleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPlaceNull() As Boolean
            Return Me.IsNull(Me.tableEvents.PlaceColumn)
        End Function
        
        Public Sub SetPlaceNull()
            Me(Me.tableEvents.PlaceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableEvents.PriceColumn)
        End Function
        
        Public Sub SetPriceNull()
            Me(Me.tableEvents.PriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetMember_EventsRows() As Member_EventsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("EventsMember_Events")),Member_EventsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EventsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EventsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EventsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EventsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Member_EventsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnMember As DataColumn
        
        Private column_Event As DataColumn
        
        Private columnRegisteredAt As DataColumn
        
        Private columnIP As DataColumn
        
        Friend Sub New()
            MyBase.New("Member_Events")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property MemberColumn As DataColumn
            Get
                Return Me.columnMember
            End Get
        End Property
        
        Friend ReadOnly Property _EventColumn As DataColumn
            Get
                Return Me.column_Event
            End Get
        End Property
        
        Friend ReadOnly Property RegisteredAtColumn As DataColumn
            Get
                Return Me.columnRegisteredAt
            End Get
        End Property
        
        Friend ReadOnly Property IPColumn As DataColumn
            Get
                Return Me.columnIP
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Member_EventsRow
            Get
                Return CType(Me.Rows(index),Member_EventsRow)
            End Get
        End Property
        
        Public Event Member_EventsRowChanged As Member_EventsRowChangeEventHandler
        
        Public Event Member_EventsRowChanging As Member_EventsRowChangeEventHandler
        
        Public Event Member_EventsRowDeleted As Member_EventsRowChangeEventHandler
        
        Public Event Member_EventsRowDeleting As Member_EventsRowChangeEventHandler
        
        Public Overloads Sub AddMember_EventsRow(ByVal row As Member_EventsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMember_EventsRow(ByVal parentMembersRowByMembersMember_Events As MembersRow, ByVal parentEventsRowByEventsMember_Events As EventsRow, ByVal RegisteredAt As Date, ByVal IP As String) As Member_EventsRow
            Dim rowMember_EventsRow As Member_EventsRow = CType(Me.NewRow,Member_EventsRow)
            rowMember_EventsRow.ItemArray = New Object() {Nothing, parentMembersRowByMembersMember_Events(0), parentEventsRowByEventsMember_Events(0), RegisteredAt, IP}
            Me.Rows.Add(rowMember_EventsRow)
            Return rowMember_EventsRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As Member_EventsRow
            Return CType(Me.Rows.Find(New Object() {Id}),Member_EventsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Member_EventsDataTable = CType(MyBase.Clone,Member_EventsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Member_EventsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnMember = Me.Columns("Member")
            Me.column_Event = Me.Columns("Event")
            Me.columnRegisteredAt = Me.Columns("RegisteredAt")
            Me.columnIP = Me.Columns("IP")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnMember = New DataColumn("Member", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMember)
            Me.column_Event = New DataColumn("Event", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Event)
            Me.columnRegisteredAt = New DataColumn("RegisteredAt", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegisteredAt)
            Me.columnIP = New DataColumn("IP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIP)
            Me.Constraints.Add(New UniqueConstraint("DataSet_MembersKey4", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewMember_EventsRow() As Member_EventsRow
            Return CType(Me.NewRow,Member_EventsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Member_EventsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Member_EventsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Member_EventsRowChangedEvent) Is Nothing) Then
                RaiseEvent Member_EventsRowChanged(Me, New Member_EventsRowChangeEvent(CType(e.Row,Member_EventsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Member_EventsRowChangingEvent) Is Nothing) Then
                RaiseEvent Member_EventsRowChanging(Me, New Member_EventsRowChangeEvent(CType(e.Row,Member_EventsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Member_EventsRowDeletedEvent) Is Nothing) Then
                RaiseEvent Member_EventsRowDeleted(Me, New Member_EventsRowChangeEvent(CType(e.Row,Member_EventsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Member_EventsRowDeletingEvent) Is Nothing) Then
                RaiseEvent Member_EventsRowDeleting(Me, New Member_EventsRowChangeEvent(CType(e.Row,Member_EventsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMember_EventsRow(ByVal row As Member_EventsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Member_EventsRow
        Inherits DataRow
        
        Private tableMember_Events As Member_EventsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMember_Events = CType(Me.Table,Member_EventsDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableMember_Events.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableMember_Events.IdColumn) = value
            End Set
        End Property
        
        Public Property Member As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMember_Events.MemberColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Events.MemberColumn) = value
            End Set
        End Property
        
        Public Property _Event As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMember_Events._EventColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Events._EventColumn) = value
            End Set
        End Property
        
        Public Property RegisteredAt As Date
            Get
                Try 
                    Return CType(Me(Me.tableMember_Events.RegisteredAtColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Events.RegisteredAtColumn) = value
            End Set
        End Property
        
        Public Property IP As String
            Get
                Try 
                    Return CType(Me(Me.tableMember_Events.IPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Events.IPColumn) = value
            End Set
        End Property
        
        Public Property MembersRow As MembersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MembersMember_Events")),MembersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MembersMember_Events"))
            End Set
        End Property
        
        Public Property EventsRow As EventsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("EventsMember_Events")),EventsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("EventsMember_Events"))
            End Set
        End Property
        
        Public Function IsMemberNull() As Boolean
            Return Me.IsNull(Me.tableMember_Events.MemberColumn)
        End Function
        
        Public Sub SetMemberNull()
            Me(Me.tableMember_Events.MemberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_EventNull() As Boolean
            Return Me.IsNull(Me.tableMember_Events._EventColumn)
        End Function
        
        Public Sub Set_EventNull()
            Me(Me.tableMember_Events._EventColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegisteredAtNull() As Boolean
            Return Me.IsNull(Me.tableMember_Events.RegisteredAtColumn)
        End Function
        
        Public Sub SetRegisteredAtNull()
            Me(Me.tableMember_Events.RegisteredAtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIPNull() As Boolean
            Return Me.IsNull(Me.tableMember_Events.IPColumn)
        End Function
        
        Public Sub SetIPNull()
            Me(Me.tableMember_Events.IPColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Member_EventsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Member_EventsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Member_EventsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Member_EventsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Member_MeetingsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnMember As DataColumn
        
        Private columnMeeting As DataColumn
        
        Private columnRegisteredAt As DataColumn
        
        Private columnIP As DataColumn
        
        Friend Sub New()
            MyBase.New("Member_Meetings")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property MemberColumn As DataColumn
            Get
                Return Me.columnMember
            End Get
        End Property
        
        Friend ReadOnly Property MeetingColumn As DataColumn
            Get
                Return Me.columnMeeting
            End Get
        End Property
        
        Friend ReadOnly Property RegisteredAtColumn As DataColumn
            Get
                Return Me.columnRegisteredAt
            End Get
        End Property
        
        Friend ReadOnly Property IPColumn As DataColumn
            Get
                Return Me.columnIP
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Member_MeetingsRow
            Get
                Return CType(Me.Rows(index),Member_MeetingsRow)
            End Get
        End Property
        
        Public Event Member_MeetingsRowChanged As Member_MeetingsRowChangeEventHandler
        
        Public Event Member_MeetingsRowChanging As Member_MeetingsRowChangeEventHandler
        
        Public Event Member_MeetingsRowDeleted As Member_MeetingsRowChangeEventHandler
        
        Public Event Member_MeetingsRowDeleting As Member_MeetingsRowChangeEventHandler
        
        Public Overloads Sub AddMember_MeetingsRow(ByVal row As Member_MeetingsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMember_MeetingsRow(ByVal parentMembersRowByMembersMember_Meetings As MembersRow, ByVal parentMeetingsRowByMeetingsMember_Meetings As MeetingsRow, ByVal RegisteredAt As Date, ByVal IP As String) As Member_MeetingsRow
            Dim rowMember_MeetingsRow As Member_MeetingsRow = CType(Me.NewRow,Member_MeetingsRow)
            rowMember_MeetingsRow.ItemArray = New Object() {Nothing, parentMembersRowByMembersMember_Meetings(0), parentMeetingsRowByMeetingsMember_Meetings(0), RegisteredAt, IP}
            Me.Rows.Add(rowMember_MeetingsRow)
            Return rowMember_MeetingsRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As Member_MeetingsRow
            Return CType(Me.Rows.Find(New Object() {Id}),Member_MeetingsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Member_MeetingsDataTable = CType(MyBase.Clone,Member_MeetingsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Member_MeetingsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnMember = Me.Columns("Member")
            Me.columnMeeting = Me.Columns("Meeting")
            Me.columnRegisteredAt = Me.Columns("RegisteredAt")
            Me.columnIP = Me.Columns("IP")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnMember = New DataColumn("Member", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMember)
            Me.columnMeeting = New DataColumn("Meeting", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMeeting)
            Me.columnRegisteredAt = New DataColumn("RegisteredAt", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegisteredAt)
            Me.columnIP = New DataColumn("IP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIP)
            Me.Constraints.Add(New UniqueConstraint("DataSet_MembersKey5", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewMember_MeetingsRow() As Member_MeetingsRow
            Return CType(Me.NewRow,Member_MeetingsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Member_MeetingsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Member_MeetingsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Member_MeetingsRowChangedEvent) Is Nothing) Then
                RaiseEvent Member_MeetingsRowChanged(Me, New Member_MeetingsRowChangeEvent(CType(e.Row,Member_MeetingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Member_MeetingsRowChangingEvent) Is Nothing) Then
                RaiseEvent Member_MeetingsRowChanging(Me, New Member_MeetingsRowChangeEvent(CType(e.Row,Member_MeetingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Member_MeetingsRowDeletedEvent) Is Nothing) Then
                RaiseEvent Member_MeetingsRowDeleted(Me, New Member_MeetingsRowChangeEvent(CType(e.Row,Member_MeetingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Member_MeetingsRowDeletingEvent) Is Nothing) Then
                RaiseEvent Member_MeetingsRowDeleting(Me, New Member_MeetingsRowChangeEvent(CType(e.Row,Member_MeetingsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMember_MeetingsRow(ByVal row As Member_MeetingsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Member_MeetingsRow
        Inherits DataRow
        
        Private tableMember_Meetings As Member_MeetingsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMember_Meetings = CType(Me.Table,Member_MeetingsDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableMember_Meetings.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableMember_Meetings.IdColumn) = value
            End Set
        End Property
        
        Public Property Member As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMember_Meetings.MemberColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Meetings.MemberColumn) = value
            End Set
        End Property
        
        Public Property Meeting As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMember_Meetings.MeetingColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Meetings.MeetingColumn) = value
            End Set
        End Property
        
        Public Property RegisteredAt As Date
            Get
                Try 
                    Return CType(Me(Me.tableMember_Meetings.RegisteredAtColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Meetings.RegisteredAtColumn) = value
            End Set
        End Property
        
        Public Property IP As String
            Get
                Try 
                    Return CType(Me(Me.tableMember_Meetings.IPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Meetings.IPColumn) = value
            End Set
        End Property
        
        Public Property MembersRow As MembersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MembersMember_Meetings")),MembersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MembersMember_Meetings"))
            End Set
        End Property
        
        Public Property MeetingsRow As MeetingsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MeetingsMember_Meetings")),MeetingsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MeetingsMember_Meetings"))
            End Set
        End Property
        
        Public Function IsMemberNull() As Boolean
            Return Me.IsNull(Me.tableMember_Meetings.MemberColumn)
        End Function
        
        Public Sub SetMemberNull()
            Me(Me.tableMember_Meetings.MemberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMeetingNull() As Boolean
            Return Me.IsNull(Me.tableMember_Meetings.MeetingColumn)
        End Function
        
        Public Sub SetMeetingNull()
            Me(Me.tableMember_Meetings.MeetingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegisteredAtNull() As Boolean
            Return Me.IsNull(Me.tableMember_Meetings.RegisteredAtColumn)
        End Function
        
        Public Sub SetRegisteredAtNull()
            Me(Me.tableMember_Meetings.RegisteredAtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIPNull() As Boolean
            Return Me.IsNull(Me.tableMember_Meetings.IPColumn)
        End Function
        
        Public Sub SetIPNull()
            Me(Me.tableMember_Meetings.IPColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Member_MeetingsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Member_MeetingsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Member_MeetingsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Member_MeetingsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Member_PaymentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPID As DataColumn
        
        Private columnID1 As DataColumn
        
        Private columnTypeOfAccount As DataColumn
        
        Private columnPaymentMethod As DataColumn
        
        Private columnNotes As DataColumn
        
        Private columnDelivery_Point As DataColumn
        
        Private columnPaymentAmount As DataColumn
        
        Private columnDatePaid As DataColumn
        
        Private columnLicenseNumber As DataColumn
        
        Private columnCreationTime As DataColumn
        
        Private columnChangeTime As DataColumn
        
        Friend Sub New()
            MyBase.New("Member_Payment")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PIDColumn As DataColumn
            Get
                Return Me.columnPID
            End Get
        End Property
        
        Friend ReadOnly Property ID1Column As DataColumn
            Get
                Return Me.columnID1
            End Get
        End Property
        
        Friend ReadOnly Property TypeOfAccountColumn As DataColumn
            Get
                Return Me.columnTypeOfAccount
            End Get
        End Property
        
        Friend ReadOnly Property PaymentMethodColumn As DataColumn
            Get
                Return Me.columnPaymentMethod
            End Get
        End Property
        
        Friend ReadOnly Property NotesColumn As DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        Friend ReadOnly Property Delivery_PointColumn As DataColumn
            Get
                Return Me.columnDelivery_Point
            End Get
        End Property
        
        Friend ReadOnly Property PaymentAmountColumn As DataColumn
            Get
                Return Me.columnPaymentAmount
            End Get
        End Property
        
        Friend ReadOnly Property DatePaidColumn As DataColumn
            Get
                Return Me.columnDatePaid
            End Get
        End Property
        
        Friend ReadOnly Property LicenseNumberColumn As DataColumn
            Get
                Return Me.columnLicenseNumber
            End Get
        End Property
        
        Friend ReadOnly Property CreationTimeColumn As DataColumn
            Get
                Return Me.columnCreationTime
            End Get
        End Property
        
        Friend ReadOnly Property ChangeTimeColumn As DataColumn
            Get
                Return Me.columnChangeTime
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Member_PaymentRow
            Get
                Return CType(Me.Rows(index),Member_PaymentRow)
            End Get
        End Property
        
        Public Event Member_PaymentRowChanged As Member_PaymentRowChangeEventHandler
        
        Public Event Member_PaymentRowChanging As Member_PaymentRowChangeEventHandler
        
        Public Event Member_PaymentRowDeleted As Member_PaymentRowChangeEventHandler
        
        Public Event Member_PaymentRowDeleting As Member_PaymentRowChangeEventHandler
        
        Public Overloads Sub AddMember_PaymentRow(ByVal row As Member_PaymentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMember_PaymentRow(ByVal ID1 As Double, ByVal TypeOfAccount As String, ByVal PaymentMethod As String, ByVal Notes As String, ByVal Delivery_Point As String, ByVal PaymentAmount As Decimal, ByVal DatePaid As Date, ByVal LicenseNumber As Double, ByVal CreationTime As Date, ByVal ChangeTime As Date) As Member_PaymentRow
            Dim rowMember_PaymentRow As Member_PaymentRow = CType(Me.NewRow,Member_PaymentRow)
            rowMember_PaymentRow.ItemArray = New Object() {Nothing, ID1, TypeOfAccount, PaymentMethod, Notes, Delivery_Point, PaymentAmount, DatePaid, LicenseNumber, CreationTime, ChangeTime}
            Me.Rows.Add(rowMember_PaymentRow)
            Return rowMember_PaymentRow
        End Function
        
        Public Function FindByPID(ByVal PID As Integer) As Member_PaymentRow
            Return CType(Me.Rows.Find(New Object() {PID}),Member_PaymentRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Member_PaymentDataTable = CType(MyBase.Clone,Member_PaymentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Member_PaymentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPID = Me.Columns("PID")
            Me.columnID1 = Me.Columns("ID1")
            Me.columnTypeOfAccount = Me.Columns("TypeOfAccount")
            Me.columnPaymentMethod = Me.Columns("PaymentMethod")
            Me.columnNotes = Me.Columns("Notes")
            Me.columnDelivery_Point = Me.Columns("Delivery Point")
            Me.columnPaymentAmount = Me.Columns("PaymentAmount")
            Me.columnDatePaid = Me.Columns("DatePaid")
            Me.columnLicenseNumber = Me.Columns("LicenseNumber")
            Me.columnCreationTime = Me.Columns("CreationTime")
            Me.columnChangeTime = Me.Columns("ChangeTime")
        End Sub
        
        Private Sub InitClass()
            Me.columnPID = New DataColumn("PID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPID)
            Me.columnID1 = New DataColumn("ID1", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID1)
            Me.columnTypeOfAccount = New DataColumn("TypeOfAccount", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeOfAccount)
            Me.columnPaymentMethod = New DataColumn("PaymentMethod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentMethod)
            Me.columnNotes = New DataColumn("Notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotes)
            Me.columnDelivery_Point = New DataColumn("Delivery Point", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDelivery_Point)
            Me.columnPaymentAmount = New DataColumn("PaymentAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentAmount)
            Me.columnDatePaid = New DataColumn("DatePaid", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDatePaid)
            Me.columnLicenseNumber = New DataColumn("LicenseNumber", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicenseNumber)
            Me.columnCreationTime = New DataColumn("CreationTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreationTime)
            Me.columnChangeTime = New DataColumn("ChangeTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChangeTime)
            Me.Constraints.Add(New UniqueConstraint("DataSet_MembersKey6", New DataColumn() {Me.columnPID}, true))
            Me.columnPID.AutoIncrement = true
            Me.columnPID.AllowDBNull = false
            Me.columnPID.Unique = true
        End Sub
        
        Public Function NewMember_PaymentRow() As Member_PaymentRow
            Return CType(Me.NewRow,Member_PaymentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Member_PaymentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Member_PaymentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Member_PaymentRowChangedEvent) Is Nothing) Then
                RaiseEvent Member_PaymentRowChanged(Me, New Member_PaymentRowChangeEvent(CType(e.Row,Member_PaymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Member_PaymentRowChangingEvent) Is Nothing) Then
                RaiseEvent Member_PaymentRowChanging(Me, New Member_PaymentRowChangeEvent(CType(e.Row,Member_PaymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Member_PaymentRowDeletedEvent) Is Nothing) Then
                RaiseEvent Member_PaymentRowDeleted(Me, New Member_PaymentRowChangeEvent(CType(e.Row,Member_PaymentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Member_PaymentRowDeletingEvent) Is Nothing) Then
                RaiseEvent Member_PaymentRowDeleting(Me, New Member_PaymentRowChangeEvent(CType(e.Row,Member_PaymentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMember_PaymentRow(ByVal row As Member_PaymentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Member_PaymentRow
        Inherits DataRow
        
        Private tableMember_Payment As Member_PaymentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMember_Payment = CType(Me.Table,Member_PaymentDataTable)
        End Sub
        
        Public Property PID As Integer
            Get
                Return CType(Me(Me.tableMember_Payment.PIDColumn),Integer)
            End Get
            Set
                Me(Me.tableMember_Payment.PIDColumn) = value
            End Set
        End Property
        
        Public Property ID1 As Double
            Get
                Try 
                    Return CType(Me(Me.tableMember_Payment.ID1Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Payment.ID1Column) = value
            End Set
        End Property
        
        Public Property TypeOfAccount As String
            Get
                Try 
                    Return CType(Me(Me.tableMember_Payment.TypeOfAccountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Payment.TypeOfAccountColumn) = value
            End Set
        End Property
        
        Public Property PaymentMethod As String
            Get
                Try 
                    Return CType(Me(Me.tableMember_Payment.PaymentMethodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Payment.PaymentMethodColumn) = value
            End Set
        End Property
        
        Public Property Notes As String
            Get
                Try 
                    Return CType(Me(Me.tableMember_Payment.NotesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Payment.NotesColumn) = value
            End Set
        End Property
        
        Public Property Delivery_Point As String
            Get
                Try 
                    Return CType(Me(Me.tableMember_Payment.Delivery_PointColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Payment.Delivery_PointColumn) = value
            End Set
        End Property
        
        Public Property PaymentAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMember_Payment.PaymentAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Payment.PaymentAmountColumn) = value
            End Set
        End Property
        
        Public Property DatePaid As Date
            Get
                Try 
                    Return CType(Me(Me.tableMember_Payment.DatePaidColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Payment.DatePaidColumn) = value
            End Set
        End Property
        
        Public Property LicenseNumber As Double
            Get
                Try 
                    Return CType(Me(Me.tableMember_Payment.LicenseNumberColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Payment.LicenseNumberColumn) = value
            End Set
        End Property
        
        Public Property CreationTime As Date
            Get
                Try 
                    Return CType(Me(Me.tableMember_Payment.CreationTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Payment.CreationTimeColumn) = value
            End Set
        End Property
        
        Public Property ChangeTime As Date
            Get
                Try 
                    Return CType(Me(Me.tableMember_Payment.ChangeTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMember_Payment.ChangeTimeColumn) = value
            End Set
        End Property
        
        Public Function IsID1Null() As Boolean
            Return Me.IsNull(Me.tableMember_Payment.ID1Column)
        End Function
        
        Public Sub SetID1Null()
            Me(Me.tableMember_Payment.ID1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeOfAccountNull() As Boolean
            Return Me.IsNull(Me.tableMember_Payment.TypeOfAccountColumn)
        End Function
        
        Public Sub SetTypeOfAccountNull()
            Me(Me.tableMember_Payment.TypeOfAccountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentMethodNull() As Boolean
            Return Me.IsNull(Me.tableMember_Payment.PaymentMethodColumn)
        End Function
        
        Public Sub SetPaymentMethodNull()
            Me(Me.tableMember_Payment.PaymentMethodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableMember_Payment.NotesColumn)
        End Function
        
        Public Sub SetNotesNull()
            Me(Me.tableMember_Payment.NotesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDelivery_PointNull() As Boolean
            Return Me.IsNull(Me.tableMember_Payment.Delivery_PointColumn)
        End Function
        
        Public Sub SetDelivery_PointNull()
            Me(Me.tableMember_Payment.Delivery_PointColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentAmountNull() As Boolean
            Return Me.IsNull(Me.tableMember_Payment.PaymentAmountColumn)
        End Function
        
        Public Sub SetPaymentAmountNull()
            Me(Me.tableMember_Payment.PaymentAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDatePaidNull() As Boolean
            Return Me.IsNull(Me.tableMember_Payment.DatePaidColumn)
        End Function
        
        Public Sub SetDatePaidNull()
            Me(Me.tableMember_Payment.DatePaidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNumberNull() As Boolean
            Return Me.IsNull(Me.tableMember_Payment.LicenseNumberColumn)
        End Function
        
        Public Sub SetLicenseNumberNull()
            Me(Me.tableMember_Payment.LicenseNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreationTimeNull() As Boolean
            Return Me.IsNull(Me.tableMember_Payment.CreationTimeColumn)
        End Function
        
        Public Sub SetCreationTimeNull()
            Me(Me.tableMember_Payment.CreationTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChangeTimeNull() As Boolean
            Return Me.IsNull(Me.tableMember_Payment.ChangeTimeColumn)
        End Function
        
        Public Sub SetChangeTimeNull()
            Me(Me.tableMember_Payment.ChangeTimeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Member_PaymentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Member_PaymentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Member_PaymentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Member_PaymentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
