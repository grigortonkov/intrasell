'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


Namespace mabetex_news



<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet_RandomNews
    Inherits DataSet
    
    Private tableNews As NewsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("News")) Is Nothing) Then
                Me.Tables.Add(New NewsDataTable(ds.Tables("News")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property News As NewsDataTable
        Get
            Return Me.tableNews
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet_RandomNews = CType(MyBase.Clone,DataSet_RandomNews)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("News")) Is Nothing) Then
            Me.Tables.Add(New NewsDataTable(ds.Tables("News")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Public Sub InitVars()
        Me.tableNews = CType(Me.Tables("News"),NewsDataTable)
        If (Not (Me.tableNews) Is Nothing) Then
            Me.tableNews.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet_RandomNews"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet_RandomNews.xsd"
        Me.Locale = New System.Globalization.CultureInfo("de-AT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableNews = New NewsDataTable
        Me.Tables.Add(Me.tableNews)
    End Sub
    
    Private Function ShouldSerializeNews() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub NewsRowChangeEventHandler(ByVal sender As Object, ByVal e As NewsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NewsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDatum As DataColumn
        
        Private columnErstelltAm As DataColumn
        
        Private columnErstelltVon As DataColumn
        
        Private columnKatNr As DataColumn
        
        Private columnKurzText As DataColumn
        
        Private columnNewsNr As DataColumn
        
        Private columnPicture As DataColumn
        
        Private columnPrevSeite As DataColumn
        
        Private column_Text As DataColumn
        
        Private columnTitel As DataColumn
        
        Private columnUrl As DataColumn
        
        Public Sub New()
            MyBase.New("News")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property DatumColumn As DataColumn
            Get
                Return Me.columnDatum
            End Get
        End Property
        
        Public ReadOnly Property ErstelltAmColumn As DataColumn
            Get
                Return Me.columnErstelltAm
            End Get
        End Property
        
        Public ReadOnly Property ErstelltVonColumn As DataColumn
            Get
                Return Me.columnErstelltVon
            End Get
        End Property
        
        Public ReadOnly Property KatNrColumn As DataColumn
            Get
                Return Me.columnKatNr
            End Get
        End Property
        
        Public ReadOnly Property KurzTextColumn As DataColumn
            Get
                Return Me.columnKurzText
            End Get
        End Property
        
        Public ReadOnly Property NewsNrColumn As DataColumn
            Get
                Return Me.columnNewsNr
            End Get
        End Property
        
        Public ReadOnly Property PictureColumn As DataColumn
            Get
                Return Me.columnPicture
            End Get
        End Property
        
        Public ReadOnly Property PrevSeiteColumn As DataColumn
            Get
                Return Me.columnPrevSeite
            End Get
        End Property
        
        Public ReadOnly Property _TextColumn As DataColumn
            Get
                Return Me.column_Text
            End Get
        End Property
        
        Public ReadOnly Property TitelColumn As DataColumn
            Get
                Return Me.columnTitel
            End Get
        End Property
        
        Public ReadOnly Property UrlColumn As DataColumn
            Get
                Return Me.columnUrl
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NewsRow
            Get
                Return CType(Me.Rows(index),NewsRow)
            End Get
        End Property
        
        Public Event NewsRowChanged As NewsRowChangeEventHandler
        
        Public Event NewsRowChanging As NewsRowChangeEventHandler
        
        Public Event NewsRowDeleted As NewsRowChangeEventHandler
        
        Public Event NewsRowDeleting As NewsRowChangeEventHandler
        
        Public Overloads Sub AddNewsRow(ByVal row As NewsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNewsRow(ByVal Datum As Date, ByVal ErstelltAm As Date, ByVal ErstelltVon As String, ByVal KatNr As Integer, ByVal KurzText As String, ByVal Picture As String, ByVal PrevSeite As Integer, ByVal _Text As String, ByVal Titel As String, ByVal Url As String) As NewsRow
            Dim rowNewsRow As NewsRow = CType(Me.NewRow,NewsRow)
            rowNewsRow.ItemArray = New Object() {Datum, ErstelltAm, ErstelltVon, KatNr, KurzText, Nothing, Picture, PrevSeite, _Text, Titel, Url}
            Me.Rows.Add(rowNewsRow)
            Return rowNewsRow
        End Function
        
        Public Function FindByNewsNr(ByVal NewsNr As Integer) As NewsRow
            Return CType(Me.Rows.Find(New Object() {NewsNr}),NewsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NewsDataTable = CType(MyBase.Clone,NewsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NewsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnDatum = Me.Columns("Datum")
            Me.columnErstelltAm = Me.Columns("ErstelltAm")
            Me.columnErstelltVon = Me.Columns("ErstelltVon")
            Me.columnKatNr = Me.Columns("KatNr")
            Me.columnKurzText = Me.Columns("KurzText")
            Me.columnNewsNr = Me.Columns("NewsNr")
            Me.columnPicture = Me.Columns("Picture")
            Me.columnPrevSeite = Me.Columns("PrevSeite")
            Me.column_Text = Me.Columns("Text")
            Me.columnTitel = Me.Columns("Titel")
            Me.columnUrl = Me.Columns("Url")
        End Sub
        
        Private Sub InitClass()
            Me.columnDatum = New DataColumn("Datum", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDatum)
            Me.columnErstelltAm = New DataColumn("ErstelltAm", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnErstelltAm)
            Me.columnErstelltVon = New DataColumn("ErstelltVon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnErstelltVon)
            Me.columnKatNr = New DataColumn("KatNr", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKatNr)
            Me.columnKurzText = New DataColumn("KurzText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKurzText)
            Me.columnNewsNr = New DataColumn("NewsNr", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNewsNr)
            Me.columnPicture = New DataColumn("Picture", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPicture)
            Me.columnPrevSeite = New DataColumn("PrevSeite", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrevSeite)
            Me.column_Text = New DataColumn("Text", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Text)
            Me.columnTitel = New DataColumn("Titel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitel)
            Me.columnUrl = New DataColumn("Url", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUrl)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnNewsNr}, true))
            Me.columnNewsNr.AutoIncrement = true
            Me.columnNewsNr.AllowDBNull = false
            Me.columnNewsNr.Unique = true
        End Sub
        
        Public Function NewNewsRow() As NewsRow
            Return CType(Me.NewRow,NewsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NewsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NewsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NewsRowChangedEvent) Is Nothing) Then
                RaiseEvent NewsRowChanged(Me, New NewsRowChangeEvent(CType(e.Row,NewsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NewsRowChangingEvent) Is Nothing) Then
                RaiseEvent NewsRowChanging(Me, New NewsRowChangeEvent(CType(e.Row,NewsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NewsRowDeletedEvent) Is Nothing) Then
                RaiseEvent NewsRowDeleted(Me, New NewsRowChangeEvent(CType(e.Row,NewsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NewsRowDeletingEvent) Is Nothing) Then
                RaiseEvent NewsRowDeleting(Me, New NewsRowChangeEvent(CType(e.Row,NewsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNewsRow(ByVal row As NewsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NewsRow
        Inherits DataRow
        
        Private tableNews As NewsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNews = CType(Me.Table,NewsDataTable)
        End Sub
        
        Public Property Datum As Date
            Get
                Try 
                    Return CType(Me(Me.tableNews.DatumColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableNews.DatumColumn) = value
            End Set
        End Property
        
        Public Property ErstelltAm As Date
            Get
                Try 
                    Return CType(Me(Me.tableNews.ErstelltAmColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableNews.ErstelltAmColumn) = value
            End Set
        End Property
        
        Public Property ErstelltVon As String
            Get
                Try 
                    Return CType(Me(Me.tableNews.ErstelltVonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableNews.ErstelltVonColumn) = value
            End Set
        End Property
        
        Public Property KatNr As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNews.KatNrColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableNews.KatNrColumn) = value
            End Set
        End Property
        
        Public Property KurzText As String
            Get
                Try 
                    Return CType(Me(Me.tableNews.KurzTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableNews.KurzTextColumn) = value
            End Set
        End Property
        
        Public Property NewsNr As Integer
            Get
                Return CType(Me(Me.tableNews.NewsNrColumn),Integer)
            End Get
            Set
                Me(Me.tableNews.NewsNrColumn) = value
            End Set
        End Property
        
        Public Property Picture As String
            Get
                Try 
                    Return CType(Me(Me.tableNews.PictureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableNews.PictureColumn) = value
            End Set
        End Property
        
        Public Property PrevSeite As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNews.PrevSeiteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableNews.PrevSeiteColumn) = value
            End Set
        End Property
        
        Public Property _Text As String
            Get
                Try 
                    Return CType(Me(Me.tableNews._TextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableNews._TextColumn) = value
            End Set
        End Property
        
        Public Property Titel As String
            Get
                Try 
                    Return CType(Me(Me.tableNews.TitelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableNews.TitelColumn) = value
            End Set
        End Property
        
        Public Property Url As String
            Get
                Try 
                    Return CType(Me(Me.tableNews.UrlColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableNews.UrlColumn) = value
            End Set
        End Property
        
        Public Function IsDatumNull() As Boolean
            Return Me.IsNull(Me.tableNews.DatumColumn)
        End Function
        
        Public Sub SetDatumNull()
            Me(Me.tableNews.DatumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsErstelltAmNull() As Boolean
            Return Me.IsNull(Me.tableNews.ErstelltAmColumn)
        End Function
        
        Public Sub SetErstelltAmNull()
            Me(Me.tableNews.ErstelltAmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsErstelltVonNull() As Boolean
            Return Me.IsNull(Me.tableNews.ErstelltVonColumn)
        End Function
        
        Public Sub SetErstelltVonNull()
            Me(Me.tableNews.ErstelltVonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKatNrNull() As Boolean
            Return Me.IsNull(Me.tableNews.KatNrColumn)
        End Function
        
        Public Sub SetKatNrNull()
            Me(Me.tableNews.KatNrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKurzTextNull() As Boolean
            Return Me.IsNull(Me.tableNews.KurzTextColumn)
        End Function
        
        Public Sub SetKurzTextNull()
            Me(Me.tableNews.KurzTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPictureNull() As Boolean
            Return Me.IsNull(Me.tableNews.PictureColumn)
        End Function
        
        Public Sub SetPictureNull()
            Me(Me.tableNews.PictureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrevSeiteNull() As Boolean
            Return Me.IsNull(Me.tableNews.PrevSeiteColumn)
        End Function
        
        Public Sub SetPrevSeiteNull()
            Me(Me.tableNews.PrevSeiteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_TextNull() As Boolean
            Return Me.IsNull(Me.tableNews._TextColumn)
        End Function
        
        Public Sub Set_TextNull()
            Me(Me.tableNews._TextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTitelNull() As Boolean
            Return Me.IsNull(Me.tableNews.TitelColumn)
        End Function
        
        Public Sub SetTitelNull()
            Me(Me.tableNews.TitelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUrlNull() As Boolean
            Return Me.IsNull(Me.tableNews.UrlColumn)
        End Function
        
        Public Sub SetUrlNull()
            Me(Me.tableNews.UrlColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NewsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NewsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NewsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NewsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

End Namespace
