'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


Namespace mabetex_news



<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet_AllNews
    Inherits DataSet
    
    Private tableAllNews As AllNewsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AllNews")) Is Nothing) Then
                Me.Tables.Add(New AllNewsDataTable(ds.Tables("AllNews")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AllNews As AllNewsDataTable
        Get
            Return Me.tableAllNews
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet_AllNews = CType(MyBase.Clone,DataSet_AllNews)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("AllNews")) Is Nothing) Then
            Me.Tables.Add(New AllNewsDataTable(ds.Tables("AllNews")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Public Sub InitVars()
        Me.tableAllNews = CType(Me.Tables("AllNews"),AllNewsDataTable)
        If (Not (Me.tableAllNews) Is Nothing) Then
            Me.tableAllNews.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet_AllNews"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet_AllNews.xsd"
        Me.Locale = New System.Globalization.CultureInfo("de-AT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAllNews = New AllNewsDataTable
        Me.Tables.Add(Me.tableAllNews)
    End Sub
    
    Private Function ShouldSerializeAllNews() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub AllNewsRowChangeEventHandler(ByVal sender As Object, ByVal e As AllNewsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllNewsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBezeichnung As DataColumn
        
        Private columncolor As DataColumn
        
        Private columnDatum As DataColumn
        
        Private columnErstelltAm As DataColumn
        
        Private columnErstelltVon As DataColumn
        
        Private columnKatNr As DataColumn
        
        Private columnKurzText As DataColumn
        
        Private columnNewsNr As DataColumn
        
        Private columnPrevSeite As DataColumn
        
        Private columnSeiten As DataColumn
        
        Private columnTitel As DataColumn
        
        Public Sub New()
            MyBase.New("AllNews")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property BezeichnungColumn As DataColumn
            Get
                Return Me.columnBezeichnung
            End Get
        End Property
        
        Public ReadOnly Property colorColumn As DataColumn
            Get
                Return Me.columncolor
            End Get
        End Property
        
        Public ReadOnly Property DatumColumn As DataColumn
            Get
                Return Me.columnDatum
            End Get
        End Property
        
        Public ReadOnly Property ErstelltAmColumn As DataColumn
            Get
                Return Me.columnErstelltAm
            End Get
        End Property
        
        Public ReadOnly Property ErstelltVonColumn As DataColumn
            Get
                Return Me.columnErstelltVon
            End Get
        End Property
        
        Public ReadOnly Property KatNrColumn As DataColumn
            Get
                Return Me.columnKatNr
            End Get
        End Property
        
        Public ReadOnly Property KurzTextColumn As DataColumn
            Get
                Return Me.columnKurzText
            End Get
        End Property
        
        Public ReadOnly Property NewsNrColumn As DataColumn
            Get
                Return Me.columnNewsNr
            End Get
        End Property
        
        Public ReadOnly Property PrevSeiteColumn As DataColumn
            Get
                Return Me.columnPrevSeite
            End Get
        End Property
        
        Public ReadOnly Property SeitenColumn As DataColumn
            Get
                Return Me.columnSeiten
            End Get
        End Property
        
        Public ReadOnly Property TitelColumn As DataColumn
            Get
                Return Me.columnTitel
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AllNewsRow
            Get
                Return CType(Me.Rows(index),AllNewsRow)
            End Get
        End Property
        
        Public Event AllNewsRowChanged As AllNewsRowChangeEventHandler
        
        Public Event AllNewsRowChanging As AllNewsRowChangeEventHandler
        
        Public Event AllNewsRowDeleted As AllNewsRowChangeEventHandler
        
        Public Event AllNewsRowDeleting As AllNewsRowChangeEventHandler
        
        Public Overloads Sub AddAllNewsRow(ByVal row As AllNewsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAllNewsRow(ByVal Bezeichnung As String, ByVal color As Integer, ByVal Datum As Date, ByVal ErstelltAm As Date, ByVal ErstelltVon As String, ByVal KurzText As String, ByVal PrevSeite As Integer, ByVal Seiten As Integer, ByVal Titel As String) As AllNewsRow
            Dim rowAllNewsRow As AllNewsRow = CType(Me.NewRow,AllNewsRow)
            rowAllNewsRow.ItemArray = New Object() {Bezeichnung, color, Datum, ErstelltAm, ErstelltVon, Nothing, KurzText, Nothing, PrevSeite, Seiten, Titel}
            Me.Rows.Add(rowAllNewsRow)
            Return rowAllNewsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AllNewsDataTable = CType(MyBase.Clone,AllNewsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AllNewsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnBezeichnung = Me.Columns("Bezeichnung")
            Me.columncolor = Me.Columns("color")
            Me.columnDatum = Me.Columns("Datum")
            Me.columnErstelltAm = Me.Columns("ErstelltAm")
            Me.columnErstelltVon = Me.Columns("ErstelltVon")
            Me.columnKatNr = Me.Columns("KatNr")
            Me.columnKurzText = Me.Columns("KurzText")
            Me.columnNewsNr = Me.Columns("NewsNr")
            Me.columnPrevSeite = Me.Columns("PrevSeite")
            Me.columnSeiten = Me.Columns("Seiten")
            Me.columnTitel = Me.Columns("Titel")
        End Sub
        
        Private Sub InitClass()
            Me.columnBezeichnung = New DataColumn("Bezeichnung", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBezeichnung)
            Me.columncolor = New DataColumn("color", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncolor)
            Me.columnDatum = New DataColumn("Datum", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDatum)
            Me.columnErstelltAm = New DataColumn("ErstelltAm", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnErstelltAm)
            Me.columnErstelltVon = New DataColumn("ErstelltVon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnErstelltVon)
            Me.columnKatNr = New DataColumn("KatNr", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKatNr)
            Me.columnKurzText = New DataColumn("KurzText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKurzText)
            Me.columnNewsNr = New DataColumn("NewsNr", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNewsNr)
            Me.columnPrevSeite = New DataColumn("PrevSeite", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrevSeite)
            Me.columnSeiten = New DataColumn("Seiten", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSeiten)
            Me.columnTitel = New DataColumn("Titel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitel)
            Me.columnKatNr.AutoIncrement = true
            Me.columnNewsNr.AutoIncrement = true
        End Sub
        
        Public Function NewAllNewsRow() As AllNewsRow
            Return CType(Me.NewRow,AllNewsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AllNewsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AllNewsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AllNewsRowChangedEvent) Is Nothing) Then
                RaiseEvent AllNewsRowChanged(Me, New AllNewsRowChangeEvent(CType(e.Row,AllNewsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AllNewsRowChangingEvent) Is Nothing) Then
                RaiseEvent AllNewsRowChanging(Me, New AllNewsRowChangeEvent(CType(e.Row,AllNewsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AllNewsRowDeletedEvent) Is Nothing) Then
                RaiseEvent AllNewsRowDeleted(Me, New AllNewsRowChangeEvent(CType(e.Row,AllNewsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AllNewsRowDeletingEvent) Is Nothing) Then
                RaiseEvent AllNewsRowDeleting(Me, New AllNewsRowChangeEvent(CType(e.Row,AllNewsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAllNewsRow(ByVal row As AllNewsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllNewsRow
        Inherits DataRow
        
        Private tableAllNews As AllNewsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAllNews = CType(Me.Table,AllNewsDataTable)
        End Sub
        
        Public Property Bezeichnung As String
            Get
                Try 
                    Return CType(Me(Me.tableAllNews.BezeichnungColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllNews.BezeichnungColumn) = value
            End Set
        End Property
        
        Public Property color As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAllNews.colorColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllNews.colorColumn) = value
            End Set
        End Property
        
        Public Property Datum As Date
            Get
                Try 
                    Return CType(Me(Me.tableAllNews.DatumColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllNews.DatumColumn) = value
            End Set
        End Property
        
        Public Property ErstelltAm As Date
            Get
                Try 
                    Return CType(Me(Me.tableAllNews.ErstelltAmColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllNews.ErstelltAmColumn) = value
            End Set
        End Property
        
        Public Property ErstelltVon As String
            Get
                Try 
                    Return CType(Me(Me.tableAllNews.ErstelltVonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllNews.ErstelltVonColumn) = value
            End Set
        End Property
        
        Public Property KatNr As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAllNews.KatNrColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllNews.KatNrColumn) = value
            End Set
        End Property
        
        Public Property KurzText As String
            Get
                Try 
                    Return CType(Me(Me.tableAllNews.KurzTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllNews.KurzTextColumn) = value
            End Set
        End Property
        
        Public Property NewsNr As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAllNews.NewsNrColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllNews.NewsNrColumn) = value
            End Set
        End Property
        
        Public Property PrevSeite As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAllNews.PrevSeiteColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllNews.PrevSeiteColumn) = value
            End Set
        End Property
        
        Public Property Seiten As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAllNews.SeitenColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllNews.SeitenColumn) = value
            End Set
        End Property
        
        Public Property Titel As String
            Get
                Try 
                    Return CType(Me(Me.tableAllNews.TitelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableAllNews.TitelColumn) = value
            End Set
        End Property
        
        Public Function IsBezeichnungNull() As Boolean
            Return Me.IsNull(Me.tableAllNews.BezeichnungColumn)
        End Function
        
        Public Sub SetBezeichnungNull()
            Me(Me.tableAllNews.BezeichnungColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscolorNull() As Boolean
            Return Me.IsNull(Me.tableAllNews.colorColumn)
        End Function
        
        Public Sub SetcolorNull()
            Me(Me.tableAllNews.colorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDatumNull() As Boolean
            Return Me.IsNull(Me.tableAllNews.DatumColumn)
        End Function
        
        Public Sub SetDatumNull()
            Me(Me.tableAllNews.DatumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsErstelltAmNull() As Boolean
            Return Me.IsNull(Me.tableAllNews.ErstelltAmColumn)
        End Function
        
        Public Sub SetErstelltAmNull()
            Me(Me.tableAllNews.ErstelltAmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsErstelltVonNull() As Boolean
            Return Me.IsNull(Me.tableAllNews.ErstelltVonColumn)
        End Function
        
        Public Sub SetErstelltVonNull()
            Me(Me.tableAllNews.ErstelltVonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKatNrNull() As Boolean
            Return Me.IsNull(Me.tableAllNews.KatNrColumn)
        End Function
        
        Public Sub SetKatNrNull()
            Me(Me.tableAllNews.KatNrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKurzTextNull() As Boolean
            Return Me.IsNull(Me.tableAllNews.KurzTextColumn)
        End Function
        
        Public Sub SetKurzTextNull()
            Me(Me.tableAllNews.KurzTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNewsNrNull() As Boolean
            Return Me.IsNull(Me.tableAllNews.NewsNrColumn)
        End Function
        
        Public Sub SetNewsNrNull()
            Me(Me.tableAllNews.NewsNrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrevSeiteNull() As Boolean
            Return Me.IsNull(Me.tableAllNews.PrevSeiteColumn)
        End Function
        
        Public Sub SetPrevSeiteNull()
            Me(Me.tableAllNews.PrevSeiteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSeitenNull() As Boolean
            Return Me.IsNull(Me.tableAllNews.SeitenColumn)
        End Function
        
        Public Sub SetSeitenNull()
            Me(Me.tableAllNews.SeitenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTitelNull() As Boolean
            Return Me.IsNull(Me.tableAllNews.TitelColumn)
        End Function
        
        Public Sub SetTitelNull()
            Me(Me.tableAllNews.TitelColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AllNewsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AllNewsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AllNewsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AllNewsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

End Namespace
