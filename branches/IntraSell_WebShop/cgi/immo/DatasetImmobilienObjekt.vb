'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DatasetImmobilienObjekt
    Inherits DataSet
    
    Private tablegrArtikel As grArtikelDataTable
    
    Private table_grArtikel_KeyWordsToProducts As _grArtikel_KeyWordsToProductsDataTable
    
    Private table_ofAdressen_Weitere As _ofAdressen_WeitereDataTable
    
    Private _relationgrArtikelofAdressen_Weitere As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("grArtikel")) Is Nothing) Then
                Me.Tables.Add(New grArtikelDataTable(ds.Tables("grArtikel")))
            End If
            If (Not (ds.Tables("grArtikel-KeyWordsToProducts")) Is Nothing) Then
                Me.Tables.Add(New _grArtikel_KeyWordsToProductsDataTable(ds.Tables("grArtikel-KeyWordsToProducts")))
            End If
            If (Not (ds.Tables("ofAdressen-Weitere")) Is Nothing) Then
                Me.Tables.Add(New _ofAdressen_WeitereDataTable(ds.Tables("ofAdressen-Weitere")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property grArtikel As grArtikelDataTable
        Get
            Return Me.tablegrArtikel
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _grArtikel_KeyWordsToProducts As _grArtikel_KeyWordsToProductsDataTable
        Get
            Return Me.table_grArtikel_KeyWordsToProducts
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _ofAdressen_Weitere As _ofAdressen_WeitereDataTable
        Get
            Return Me.table_ofAdressen_Weitere
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DatasetImmobilienObjekt = CType(MyBase.Clone,DatasetImmobilienObjekt)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("grArtikel")) Is Nothing) Then
            Me.Tables.Add(New grArtikelDataTable(ds.Tables("grArtikel")))
        End If
        If (Not (ds.Tables("grArtikel-KeyWordsToProducts")) Is Nothing) Then
            Me.Tables.Add(New _grArtikel_KeyWordsToProductsDataTable(ds.Tables("grArtikel-KeyWordsToProducts")))
        End If
        If (Not (ds.Tables("ofAdressen-Weitere")) Is Nothing) Then
            Me.Tables.Add(New _ofAdressen_WeitereDataTable(ds.Tables("ofAdressen-Weitere")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablegrArtikel = CType(Me.Tables("grArtikel"),grArtikelDataTable)
        If (Not (Me.tablegrArtikel) Is Nothing) Then
            Me.tablegrArtikel.InitVars
        End If
        Me.table_grArtikel_KeyWordsToProducts = CType(Me.Tables("grArtikel-KeyWordsToProducts"),_grArtikel_KeyWordsToProductsDataTable)
        If (Not (Me.table_grArtikel_KeyWordsToProducts) Is Nothing) Then
            Me.table_grArtikel_KeyWordsToProducts.InitVars
        End If
        Me.table_ofAdressen_Weitere = CType(Me.Tables("ofAdressen-Weitere"),_ofAdressen_WeitereDataTable)
        If (Not (Me.table_ofAdressen_Weitere) Is Nothing) Then
            Me.table_ofAdressen_Weitere.InitVars
        End If
        Me._relationgrArtikelofAdressen_Weitere = Me.Relations("grArtikelofAdressen-Weitere")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DatasetImmobilienObjekt"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DatasetImmobilienObjekt.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablegrArtikel = New grArtikelDataTable
        Me.Tables.Add(Me.tablegrArtikel)
        Me.table_grArtikel_KeyWordsToProducts = New _grArtikel_KeyWordsToProductsDataTable
        Me.Tables.Add(Me.table_grArtikel_KeyWordsToProducts)
        Me.table_ofAdressen_Weitere = New _ofAdressen_WeitereDataTable
        Me.Tables.Add(Me.table_ofAdressen_Weitere)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("grArtikelgrArtikel-KeyWordsToProducts", New DataColumn() {Me.tablegrArtikel.ArtNrColumn}, New DataColumn() {Me.table_grArtikel_KeyWordsToProducts.ArtNrColumn})
        Me.table_grArtikel_KeyWordsToProducts.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        fkc = New ForeignKeyConstraint("grArtikelofAdressen-Weitere", New DataColumn() {Me.tablegrArtikel.ArtNrColumn}, New DataColumn() {Me.table_ofAdressen_Weitere.IDNRColumn})
        Me.table_ofAdressen_Weitere.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        Me._relationgrArtikelofAdressen_Weitere = New DataRelation("grArtikelofAdressen-Weitere", New DataColumn() {Me.tablegrArtikel.ArtNrColumn}, New DataColumn() {Me.table_ofAdressen_Weitere.IDNRColumn}, false)
        Me.Relations.Add(Me._relationgrArtikelofAdressen_Weitere)
    End Sub
    
    Private Function ShouldSerializegrArtikel() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize_grArtikel_KeyWordsToProducts() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize_ofAdressen_Weitere() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub grArtikelRowChangeEventHandler(ByVal sender As Object, ByVal e As grArtikelRowChangeEvent)
    
    Public Delegate Sub _grArtikel_KeyWordsToProductsRowChangeEventHandler(ByVal sender As Object, ByVal e As _grArtikel_KeyWordsToProductsRowChangeEvent)
    
    Public Delegate Sub _ofAdressen_WeitereRowChangeEventHandler(ByVal sender As Object, ByVal e As _ofAdressen_WeitereRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class grArtikelDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnArtNr As DataColumn
        
        Private columnEAN As DataColumn
        
        Private columnBarcode As DataColumn
        
        Private columnBezeichnung As DataColumn
        
        Private columnBezeichnung1 As DataColumn
        
        Private columnBeschreibung As DataColumn
        
        Private columnEinheit As DataColumn
        
        Private columnPreisATS As DataColumn
        
        Private columnPreisEuro As DataColumn
        
        Private columnPreisATS_Brutto As DataColumn
        
        Private columnLagerArtikel As DataColumn
        
        Private columnEKPreis As DataColumn
        
        Private columnLEKPreis As DataColumn
        
        Private columnSeriennummer As DataColumn
        
        Private columnLieferantNR As DataColumn
        
        Private columnSetArtikel As DataColumn
        
        Private columnArtKatNr As DataColumn
        
        Private columnMWST As DataColumn
        
        Private columnGewicht As DataColumn
        
        Private columnPicture As DataColumn
        
        Private columnHerstellerNr As DataColumn
        
        Private columnProduktAktiv As DataColumn
        
        Private columnShopURL As DataColumn
        
        Private columnHerstellerURL As DataColumn
        
        Private columnModifikationen As DataColumn
        
        Private columnHerstellerRabatt As DataColumn
        
        Private columnHerstellerRabattText As DataColumn
        
        Private columnAngelegtAn As DataColumn
        
        Friend Sub New()
            MyBase.New("grArtikel")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ArtNrColumn As DataColumn
            Get
                Return Me.columnArtNr
            End Get
        End Property
        
        Friend ReadOnly Property EANColumn As DataColumn
            Get
                Return Me.columnEAN
            End Get
        End Property
        
        Friend ReadOnly Property BarcodeColumn As DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        Friend ReadOnly Property BezeichnungColumn As DataColumn
            Get
                Return Me.columnBezeichnung
            End Get
        End Property
        
        Friend ReadOnly Property Bezeichnung1Column As DataColumn
            Get
                Return Me.columnBezeichnung1
            End Get
        End Property
        
        Friend ReadOnly Property BeschreibungColumn As DataColumn
            Get
                Return Me.columnBeschreibung
            End Get
        End Property
        
        Friend ReadOnly Property EinheitColumn As DataColumn
            Get
                Return Me.columnEinheit
            End Get
        End Property
        
        Friend ReadOnly Property PreisATSColumn As DataColumn
            Get
                Return Me.columnPreisATS
            End Get
        End Property
        
        Friend ReadOnly Property PreisEuroColumn As DataColumn
            Get
                Return Me.columnPreisEuro
            End Get
        End Property
        
        Friend ReadOnly Property PreisATS_BruttoColumn As DataColumn
            Get
                Return Me.columnPreisATS_Brutto
            End Get
        End Property
        
        Friend ReadOnly Property LagerArtikelColumn As DataColumn
            Get
                Return Me.columnLagerArtikel
            End Get
        End Property
        
        Friend ReadOnly Property EKPreisColumn As DataColumn
            Get
                Return Me.columnEKPreis
            End Get
        End Property
        
        Friend ReadOnly Property LEKPreisColumn As DataColumn
            Get
                Return Me.columnLEKPreis
            End Get
        End Property
        
        Friend ReadOnly Property SeriennummerColumn As DataColumn
            Get
                Return Me.columnSeriennummer
            End Get
        End Property
        
        Friend ReadOnly Property LieferantNRColumn As DataColumn
            Get
                Return Me.columnLieferantNR
            End Get
        End Property
        
        Friend ReadOnly Property SetArtikelColumn As DataColumn
            Get
                Return Me.columnSetArtikel
            End Get
        End Property
        
        Friend ReadOnly Property ArtKatNrColumn As DataColumn
            Get
                Return Me.columnArtKatNr
            End Get
        End Property
        
        Friend ReadOnly Property MWSTColumn As DataColumn
            Get
                Return Me.columnMWST
            End Get
        End Property
        
        Friend ReadOnly Property GewichtColumn As DataColumn
            Get
                Return Me.columnGewicht
            End Get
        End Property
        
        Friend ReadOnly Property PictureColumn As DataColumn
            Get
                Return Me.columnPicture
            End Get
        End Property
        
        Friend ReadOnly Property HerstellerNrColumn As DataColumn
            Get
                Return Me.columnHerstellerNr
            End Get
        End Property
        
        Friend ReadOnly Property ProduktAktivColumn As DataColumn
            Get
                Return Me.columnProduktAktiv
            End Get
        End Property
        
        Friend ReadOnly Property ShopURLColumn As DataColumn
            Get
                Return Me.columnShopURL
            End Get
        End Property
        
        Friend ReadOnly Property HerstellerURLColumn As DataColumn
            Get
                Return Me.columnHerstellerURL
            End Get
        End Property
        
        Friend ReadOnly Property ModifikationenColumn As DataColumn
            Get
                Return Me.columnModifikationen
            End Get
        End Property
        
        Friend ReadOnly Property HerstellerRabattColumn As DataColumn
            Get
                Return Me.columnHerstellerRabatt
            End Get
        End Property
        
        Friend ReadOnly Property HerstellerRabattTextColumn As DataColumn
            Get
                Return Me.columnHerstellerRabattText
            End Get
        End Property
        
        Friend ReadOnly Property AngelegtAnColumn As DataColumn
            Get
                Return Me.columnAngelegtAn
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As grArtikelRow
            Get
                Return CType(Me.Rows(index),grArtikelRow)
            End Get
        End Property
        
        Public Event grArtikelRowChanged As grArtikelRowChangeEventHandler
        
        Public Event grArtikelRowChanging As grArtikelRowChangeEventHandler
        
        Public Event grArtikelRowDeleted As grArtikelRowChangeEventHandler
        
        Public Event grArtikelRowDeleting As grArtikelRowChangeEventHandler
        
        Public Overloads Sub AddgrArtikelRow(ByVal row As grArtikelRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddgrArtikelRow( _
                    ByVal ArtNr As Integer,  _
                    ByVal EAN As String,  _
                    ByVal Barcode As String,  _
                    ByVal Bezeichnung As String,  _
                    ByVal Bezeichnung1 As String,  _
                    ByVal Beschreibung As String,  _
                    ByVal Einheit As String,  _
                    ByVal PreisATS As Decimal,  _
                    ByVal PreisEuro As Decimal,  _
                    ByVal PreisATS_Brutto As Decimal,  _
                    ByVal LagerArtikel As Boolean,  _
                    ByVal EKPreis As Decimal,  _
                    ByVal LEKPreis As Decimal,  _
                    ByVal Seriennummer As Boolean,  _
                    ByVal LieferantNR As Integer,  _
                    ByVal SetArtikel As Boolean,  _
                    ByVal ArtKatNr As Integer,  _
                    ByVal MWST As Integer,  _
                    ByVal Gewicht As String,  _
                    ByVal Picture As String,  _
                    ByVal HerstellerNr As Integer,  _
                    ByVal ProduktAktiv As Boolean,  _
                    ByVal ShopURL As String,  _
                    ByVal HerstellerURL As String,  _
                    ByVal Modifikationen As String,  _
                    ByVal HerstellerRabatt As Double,  _
                    ByVal HerstellerRabattText As String,  _
                    ByVal AngelegtAn As Date) As grArtikelRow
            Dim rowgrArtikelRow As grArtikelRow = CType(Me.NewRow,grArtikelRow)
            rowgrArtikelRow.ItemArray = New Object() {ArtNr, EAN, Barcode, Bezeichnung, Bezeichnung1, Beschreibung, Einheit, PreisATS, PreisEuro, PreisATS_Brutto, LagerArtikel, EKPreis, LEKPreis, Seriennummer, LieferantNR, SetArtikel, ArtKatNr, MWST, Gewicht, Picture, HerstellerNr, ProduktAktiv, ShopURL, HerstellerURL, Modifikationen, HerstellerRabatt, HerstellerRabattText, AngelegtAn}
            Me.Rows.Add(rowgrArtikelRow)
            Return rowgrArtikelRow
        End Function
        
        Public Function FindByArtNr(ByVal ArtNr As Integer) As grArtikelRow
            Return CType(Me.Rows.Find(New Object() {ArtNr}),grArtikelRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As grArtikelDataTable = CType(MyBase.Clone,grArtikelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New grArtikelDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnArtNr = Me.Columns("ArtNr")
            Me.columnEAN = Me.Columns("EAN")
            Me.columnBarcode = Me.Columns("Barcode")
            Me.columnBezeichnung = Me.Columns("Bezeichnung")
            Me.columnBezeichnung1 = Me.Columns("Bezeichnung1")
            Me.columnBeschreibung = Me.Columns("Beschreibung")
            Me.columnEinheit = Me.Columns("Einheit")
            Me.columnPreisATS = Me.Columns("PreisATS")
            Me.columnPreisEuro = Me.Columns("PreisEuro")
            Me.columnPreisATS_Brutto = Me.Columns("PreisATS_Brutto")
            Me.columnLagerArtikel = Me.Columns("LagerArtikel")
            Me.columnEKPreis = Me.Columns("EKPreis")
            Me.columnLEKPreis = Me.Columns("LEKPreis")
            Me.columnSeriennummer = Me.Columns("Seriennummer")
            Me.columnLieferantNR = Me.Columns("LieferantNR")
            Me.columnSetArtikel = Me.Columns("SetArtikel")
            Me.columnArtKatNr = Me.Columns("ArtKatNr")
            Me.columnMWST = Me.Columns("MWST")
            Me.columnGewicht = Me.Columns("Gewicht")
            Me.columnPicture = Me.Columns("Picture")
            Me.columnHerstellerNr = Me.Columns("HerstellerNr")
            Me.columnProduktAktiv = Me.Columns("ProduktAktiv")
            Me.columnShopURL = Me.Columns("ShopURL")
            Me.columnHerstellerURL = Me.Columns("HerstellerURL")
            Me.columnModifikationen = Me.Columns("Modifikationen")
            Me.columnHerstellerRabatt = Me.Columns("HerstellerRabatt")
            Me.columnHerstellerRabattText = Me.Columns("HerstellerRabattText")
            Me.columnAngelegtAn = Me.Columns("AngelegtAn")
        End Sub
        
        Private Sub InitClass()
            Me.columnArtNr = New DataColumn("ArtNr", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArtNr)
            Me.columnEAN = New DataColumn("EAN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEAN)
            Me.columnBarcode = New DataColumn("Barcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBarcode)
            Me.columnBezeichnung = New DataColumn("Bezeichnung", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBezeichnung)
            Me.columnBezeichnung1 = New DataColumn("Bezeichnung1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBezeichnung1)
            Me.columnBeschreibung = New DataColumn("Beschreibung", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBeschreibung)
            Me.columnEinheit = New DataColumn("Einheit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEinheit)
            Me.columnPreisATS = New DataColumn("PreisATS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreisATS)
            Me.columnPreisEuro = New DataColumn("PreisEuro", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreisEuro)
            Me.columnPreisATS_Brutto = New DataColumn("PreisATS_Brutto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreisATS_Brutto)
            Me.columnLagerArtikel = New DataColumn("LagerArtikel", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLagerArtikel)
            Me.columnEKPreis = New DataColumn("EKPreis", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEKPreis)
            Me.columnLEKPreis = New DataColumn("LEKPreis", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLEKPreis)
            Me.columnSeriennummer = New DataColumn("Seriennummer", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSeriennummer)
            Me.columnLieferantNR = New DataColumn("LieferantNR", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLieferantNR)
            Me.columnSetArtikel = New DataColumn("SetArtikel", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSetArtikel)
            Me.columnArtKatNr = New DataColumn("ArtKatNr", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArtKatNr)
            Me.columnMWST = New DataColumn("MWST", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMWST)
            Me.columnGewicht = New DataColumn("Gewicht", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGewicht)
            Me.columnPicture = New DataColumn("Picture", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPicture)
            Me.columnHerstellerNr = New DataColumn("HerstellerNr", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHerstellerNr)
            Me.columnProduktAktiv = New DataColumn("ProduktAktiv", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProduktAktiv)
            Me.columnShopURL = New DataColumn("ShopURL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShopURL)
            Me.columnHerstellerURL = New DataColumn("HerstellerURL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHerstellerURL)
            Me.columnModifikationen = New DataColumn("Modifikationen", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifikationen)
            Me.columnHerstellerRabatt = New DataColumn("HerstellerRabatt", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHerstellerRabatt)
            Me.columnHerstellerRabattText = New DataColumn("HerstellerRabattText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHerstellerRabattText)
            Me.columnAngelegtAn = New DataColumn("AngelegtAn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAngelegtAn)
            Me.Constraints.Add(New UniqueConstraint("DatasetImmobilienObjektKey1", New DataColumn() {Me.columnArtNr}, true))
            Me.columnArtNr.AllowDBNull = false
            Me.columnArtNr.Unique = true
        End Sub
        
        Public Function NewgrArtikelRow() As grArtikelRow
            Return CType(Me.NewRow,grArtikelRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New grArtikelRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(grArtikelRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.grArtikelRowChangedEvent) Is Nothing) Then
                RaiseEvent grArtikelRowChanged(Me, New grArtikelRowChangeEvent(CType(e.Row,grArtikelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.grArtikelRowChangingEvent) Is Nothing) Then
                RaiseEvent grArtikelRowChanging(Me, New grArtikelRowChangeEvent(CType(e.Row,grArtikelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.grArtikelRowDeletedEvent) Is Nothing) Then
                RaiseEvent grArtikelRowDeleted(Me, New grArtikelRowChangeEvent(CType(e.Row,grArtikelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.grArtikelRowDeletingEvent) Is Nothing) Then
                RaiseEvent grArtikelRowDeleting(Me, New grArtikelRowChangeEvent(CType(e.Row,grArtikelRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovegrArtikelRow(ByVal row As grArtikelRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class grArtikelRow
        Inherits DataRow
        
        Private tablegrArtikel As grArtikelDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablegrArtikel = CType(Me.Table,grArtikelDataTable)
        End Sub
        
        Public Property ArtNr As Integer
            Get
                Return CType(Me(Me.tablegrArtikel.ArtNrColumn),Integer)
            End Get
            Set
                Me(Me.tablegrArtikel.ArtNrColumn) = value
            End Set
        End Property
        
        Public Property EAN As String
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.EANColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.EANColumn) = value
            End Set
        End Property
        
        Public Property Barcode As String
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.BarcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.BarcodeColumn) = value
            End Set
        End Property
        
        Public Property Bezeichnung As String
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.BezeichnungColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.BezeichnungColumn) = value
            End Set
        End Property
        
        Public Property Bezeichnung1 As String
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.Bezeichnung1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.Bezeichnung1Column) = value
            End Set
        End Property
        
        Public Property Beschreibung As String
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.BeschreibungColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.BeschreibungColumn) = value
            End Set
        End Property
        
        Public Property Einheit As String
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.EinheitColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.EinheitColumn) = value
            End Set
        End Property
        
        Public Property PreisATS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.PreisATSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.PreisATSColumn) = value
            End Set
        End Property
        
        Public Property PreisEuro As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.PreisEuroColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.PreisEuroColumn) = value
            End Set
        End Property
        
        Public Property PreisATS_Brutto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.PreisATS_BruttoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.PreisATS_BruttoColumn) = value
            End Set
        End Property
        
        Public Property LagerArtikel As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.LagerArtikelColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.LagerArtikelColumn) = value
            End Set
        End Property
        
        Public Property EKPreis As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.EKPreisColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.EKPreisColumn) = value
            End Set
        End Property
        
        Public Property LEKPreis As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.LEKPreisColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.LEKPreisColumn) = value
            End Set
        End Property
        
        Public Property Seriennummer As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.SeriennummerColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.SeriennummerColumn) = value
            End Set
        End Property
        
        Public Property LieferantNR As Integer
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.LieferantNRColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.LieferantNRColumn) = value
            End Set
        End Property
        
        Public Property SetArtikel As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.SetArtikelColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.SetArtikelColumn) = value
            End Set
        End Property
        
        Public Property ArtKatNr As Integer
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.ArtKatNrColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.ArtKatNrColumn) = value
            End Set
        End Property
        
        Public Property MWST As Integer
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.MWSTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.MWSTColumn) = value
            End Set
        End Property
        
        Public Property Gewicht As String
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.GewichtColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.GewichtColumn) = value
            End Set
        End Property
        
        Public Property Picture As String
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.PictureColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.PictureColumn) = value
            End Set
        End Property
        
        Public Property HerstellerNr As Integer
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.HerstellerNrColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.HerstellerNrColumn) = value
            End Set
        End Property
        
        Public Property ProduktAktiv As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.ProduktAktivColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.ProduktAktivColumn) = value
            End Set
        End Property
        
        Public Property ShopURL As String
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.ShopURLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.ShopURLColumn) = value
            End Set
        End Property
        
        Public Property HerstellerURL As String
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.HerstellerURLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.HerstellerURLColumn) = value
            End Set
        End Property
        
        Public Property Modifikationen As String
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.ModifikationenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.ModifikationenColumn) = value
            End Set
        End Property
        
        Public Property HerstellerRabatt As Double
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.HerstellerRabattColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.HerstellerRabattColumn) = value
            End Set
        End Property
        
        Public Property HerstellerRabattText As String
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.HerstellerRabattTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.HerstellerRabattTextColumn) = value
            End Set
        End Property
        
        Public Property AngelegtAn As Date
            Get
                Try 
                    Return CType(Me(Me.tablegrArtikel.AngelegtAnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegrArtikel.AngelegtAnColumn) = value
            End Set
        End Property
        
        Public Function IsEANNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.EANColumn)
        End Function
        
        Public Sub SetEANNull()
            Me(Me.tablegrArtikel.EANColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.BarcodeColumn)
        End Function
        
        Public Sub SetBarcodeNull()
            Me(Me.tablegrArtikel.BarcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBezeichnungNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.BezeichnungColumn)
        End Function
        
        Public Sub SetBezeichnungNull()
            Me(Me.tablegrArtikel.BezeichnungColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBezeichnung1Null() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.Bezeichnung1Column)
        End Function
        
        Public Sub SetBezeichnung1Null()
            Me(Me.tablegrArtikel.Bezeichnung1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBeschreibungNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.BeschreibungColumn)
        End Function
        
        Public Sub SetBeschreibungNull()
            Me(Me.tablegrArtikel.BeschreibungColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEinheitNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.EinheitColumn)
        End Function
        
        Public Sub SetEinheitNull()
            Me(Me.tablegrArtikel.EinheitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreisATSNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.PreisATSColumn)
        End Function
        
        Public Sub SetPreisATSNull()
            Me(Me.tablegrArtikel.PreisATSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreisEuroNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.PreisEuroColumn)
        End Function
        
        Public Sub SetPreisEuroNull()
            Me(Me.tablegrArtikel.PreisEuroColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreisATS_BruttoNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.PreisATS_BruttoColumn)
        End Function
        
        Public Sub SetPreisATS_BruttoNull()
            Me(Me.tablegrArtikel.PreisATS_BruttoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLagerArtikelNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.LagerArtikelColumn)
        End Function
        
        Public Sub SetLagerArtikelNull()
            Me(Me.tablegrArtikel.LagerArtikelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEKPreisNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.EKPreisColumn)
        End Function
        
        Public Sub SetEKPreisNull()
            Me(Me.tablegrArtikel.EKPreisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLEKPreisNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.LEKPreisColumn)
        End Function
        
        Public Sub SetLEKPreisNull()
            Me(Me.tablegrArtikel.LEKPreisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSeriennummerNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.SeriennummerColumn)
        End Function
        
        Public Sub SetSeriennummerNull()
            Me(Me.tablegrArtikel.SeriennummerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLieferantNRNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.LieferantNRColumn)
        End Function
        
        Public Sub SetLieferantNRNull()
            Me(Me.tablegrArtikel.LieferantNRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSetArtikelNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.SetArtikelColumn)
        End Function
        
        Public Sub SetSetArtikelNull()
            Me(Me.tablegrArtikel.SetArtikelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArtKatNrNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.ArtKatNrColumn)
        End Function
        
        Public Sub SetArtKatNrNull()
            Me(Me.tablegrArtikel.ArtKatNrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMWSTNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.MWSTColumn)
        End Function
        
        Public Sub SetMWSTNull()
            Me(Me.tablegrArtikel.MWSTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGewichtNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.GewichtColumn)
        End Function
        
        Public Sub SetGewichtNull()
            Me(Me.tablegrArtikel.GewichtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPictureNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.PictureColumn)
        End Function
        
        Public Sub SetPictureNull()
            Me(Me.tablegrArtikel.PictureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHerstellerNrNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.HerstellerNrColumn)
        End Function
        
        Public Sub SetHerstellerNrNull()
            Me(Me.tablegrArtikel.HerstellerNrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProduktAktivNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.ProduktAktivColumn)
        End Function
        
        Public Sub SetProduktAktivNull()
            Me(Me.tablegrArtikel.ProduktAktivColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShopURLNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.ShopURLColumn)
        End Function
        
        Public Sub SetShopURLNull()
            Me(Me.tablegrArtikel.ShopURLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHerstellerURLNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.HerstellerURLColumn)
        End Function
        
        Public Sub SetHerstellerURLNull()
            Me(Me.tablegrArtikel.HerstellerURLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifikationenNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.ModifikationenColumn)
        End Function
        
        Public Sub SetModifikationenNull()
            Me(Me.tablegrArtikel.ModifikationenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHerstellerRabattNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.HerstellerRabattColumn)
        End Function
        
        Public Sub SetHerstellerRabattNull()
            Me(Me.tablegrArtikel.HerstellerRabattColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHerstellerRabattTextNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.HerstellerRabattTextColumn)
        End Function
        
        Public Sub SetHerstellerRabattTextNull()
            Me(Me.tablegrArtikel.HerstellerRabattTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAngelegtAnNull() As Boolean
            Return Me.IsNull(Me.tablegrArtikel.AngelegtAnColumn)
        End Function
        
        Public Sub SetAngelegtAnNull()
            Me(Me.tablegrArtikel.AngelegtAnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function _GetofAdressen_WeitereRows() As _ofAdressen_WeitereRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("grArtikelofAdressen-Weitere")),_ofAdressen_WeitereRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class grArtikelRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As grArtikelRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As grArtikelRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As grArtikelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _grArtikel_KeyWordsToProductsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnArtNr As DataColumn
        
        Private columnKeyWordId As DataColumn
        
        Private columnValue As DataColumn
        
        Friend Sub New()
            MyBase.New("grArtikel-KeyWordsToProducts")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property ArtNrColumn As DataColumn
            Get
                Return Me.columnArtNr
            End Get
        End Property
        
        Friend ReadOnly Property KeyWordIdColumn As DataColumn
            Get
                Return Me.columnKeyWordId
            End Get
        End Property
        
        Friend ReadOnly Property ValueColumn As DataColumn
            Get
                Return Me.columnValue
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As _grArtikel_KeyWordsToProductsRow
            Get
                Return CType(Me.Rows(index),_grArtikel_KeyWordsToProductsRow)
            End Get
        End Property
        
        Public Event _grArtikel_KeyWordsToProductsRowChanged As _grArtikel_KeyWordsToProductsRowChangeEventHandler
        
        Public Event _grArtikel_KeyWordsToProductsRowChanging As _grArtikel_KeyWordsToProductsRowChangeEventHandler
        
        Public Event _grArtikel_KeyWordsToProductsRowDeleted As _grArtikel_KeyWordsToProductsRowChangeEventHandler
        
        Public Event _grArtikel_KeyWordsToProductsRowDeleting As _grArtikel_KeyWordsToProductsRowChangeEventHandler
        
        Public Overloads Sub Add_grArtikel_KeyWordsToProductsRow(ByVal row As _grArtikel_KeyWordsToProductsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add_grArtikel_KeyWordsToProductsRow(ByVal ArtNr As Integer, ByVal KeyWordId As Integer, ByVal Value As String) As _grArtikel_KeyWordsToProductsRow
            Dim row_grArtikel_KeyWordsToProductsRow As _grArtikel_KeyWordsToProductsRow = CType(Me.NewRow,_grArtikel_KeyWordsToProductsRow)
            row_grArtikel_KeyWordsToProductsRow.ItemArray = New Object() {Nothing, ArtNr, KeyWordId, Value}
            Me.Rows.Add(row_grArtikel_KeyWordsToProductsRow)
            Return row_grArtikel_KeyWordsToProductsRow
        End Function
        
        Public Function FindByArtNrKeyWordId(ByVal ArtNr As Integer, ByVal KeyWordId As Integer) As _grArtikel_KeyWordsToProductsRow
            Return CType(Me.Rows.Find(New Object() {ArtNr, KeyWordId}),_grArtikel_KeyWordsToProductsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As _grArtikel_KeyWordsToProductsDataTable = CType(MyBase.Clone,_grArtikel_KeyWordsToProductsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New _grArtikel_KeyWordsToProductsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnArtNr = Me.Columns("ArtNr")
            Me.columnKeyWordId = Me.Columns("KeyWordId")
            Me.columnValue = Me.Columns("Value")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnArtNr = New DataColumn("ArtNr", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArtNr)
            Me.columnKeyWordId = New DataColumn("KeyWordId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeyWordId)
            Me.columnValue = New DataColumn("Value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValue)
            Me.Constraints.Add(New UniqueConstraint("DatasetImmobilienObjektKey2", New DataColumn() {Me.columnArtNr, Me.columnKeyWordId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnArtNr.AllowDBNull = false
            Me.columnKeyWordId.AllowDBNull = false
        End Sub
        
        Public Function New_grArtikel_KeyWordsToProductsRow() As _grArtikel_KeyWordsToProductsRow
            Return CType(Me.NewRow,_grArtikel_KeyWordsToProductsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New _grArtikel_KeyWordsToProductsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(_grArtikel_KeyWordsToProductsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._grArtikel_KeyWordsToProductsRowChangedEvent) Is Nothing) Then
                RaiseEvent _grArtikel_KeyWordsToProductsRowChanged(Me, New _grArtikel_KeyWordsToProductsRowChangeEvent(CType(e.Row,_grArtikel_KeyWordsToProductsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._grArtikel_KeyWordsToProductsRowChangingEvent) Is Nothing) Then
                RaiseEvent _grArtikel_KeyWordsToProductsRowChanging(Me, New _grArtikel_KeyWordsToProductsRowChangeEvent(CType(e.Row,_grArtikel_KeyWordsToProductsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._grArtikel_KeyWordsToProductsRowDeletedEvent) Is Nothing) Then
                RaiseEvent _grArtikel_KeyWordsToProductsRowDeleted(Me, New _grArtikel_KeyWordsToProductsRowChangeEvent(CType(e.Row,_grArtikel_KeyWordsToProductsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._grArtikel_KeyWordsToProductsRowDeletingEvent) Is Nothing) Then
                RaiseEvent _grArtikel_KeyWordsToProductsRowDeleting(Me, New _grArtikel_KeyWordsToProductsRowChangeEvent(CType(e.Row,_grArtikel_KeyWordsToProductsRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove_grArtikel_KeyWordsToProductsRow(ByVal row As _grArtikel_KeyWordsToProductsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _grArtikel_KeyWordsToProductsRow
        Inherits DataRow
        
        Private table_grArtikel_KeyWordsToProducts As _grArtikel_KeyWordsToProductsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table_grArtikel_KeyWordsToProducts = CType(Me.Table,_grArtikel_KeyWordsToProductsDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Try 
                    Return CType(Me(Me.table_grArtikel_KeyWordsToProducts.IdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_grArtikel_KeyWordsToProducts.IdColumn) = value
            End Set
        End Property
        
        Public Property ArtNr As Integer
            Get
                Return CType(Me(Me.table_grArtikel_KeyWordsToProducts.ArtNrColumn),Integer)
            End Get
            Set
                Me(Me.table_grArtikel_KeyWordsToProducts.ArtNrColumn) = value
            End Set
        End Property
        
        Public Property KeyWordId As Integer
            Get
                Return CType(Me(Me.table_grArtikel_KeyWordsToProducts.KeyWordIdColumn),Integer)
            End Get
            Set
                Me(Me.table_grArtikel_KeyWordsToProducts.KeyWordIdColumn) = value
            End Set
        End Property
        
        Public Property Value As String
            Get
                Try 
                    Return CType(Me(Me.table_grArtikel_KeyWordsToProducts.ValueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_grArtikel_KeyWordsToProducts.ValueColumn) = value
            End Set
        End Property
        
        Public Function IsIdNull() As Boolean
            Return Me.IsNull(Me.table_grArtikel_KeyWordsToProducts.IdColumn)
        End Function
        
        Public Sub SetIdNull()
            Me(Me.table_grArtikel_KeyWordsToProducts.IdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValueNull() As Boolean
            Return Me.IsNull(Me.table_grArtikel_KeyWordsToProducts.ValueColumn)
        End Function
        
        Public Sub SetValueNull()
            Me(Me.table_grArtikel_KeyWordsToProducts.ValueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _grArtikel_KeyWordsToProductsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As _grArtikel_KeyWordsToProductsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As _grArtikel_KeyWordsToProductsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As _grArtikel_KeyWordsToProductsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ofAdressen_WeitereDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnAnrede As DataColumn
        
        Private columnTyp As DataColumn
        
        Private columnBranche As DataColumn
        
        Private columnIDNR As DataColumn
        
        Private columnLand As DataColumn
        
        Private columnName As DataColumn
        
        Private columnVorname As DataColumn
        
        Private columnName1 As DataColumn
        
        Private columnFirma As DataColumn
        
        Private columnAdresse As DataColumn
        
        Private columnPLZ As DataColumn
        
        Private columnTel As DataColumn
        
        Private columnTel2 As DataColumn
        
        Private columnFax As DataColumn
        
        Private columnMobil As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnWeb As DataColumn
        
        Private columnAngelegtAn As DataColumn
        
        Private columnPasswort As DataColumn
        
        Private columnGeburtstag As DataColumn
        
        Friend Sub New()
            MyBase.New("ofAdressen-Weitere")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property AnredeColumn As DataColumn
            Get
                Return Me.columnAnrede
            End Get
        End Property
        
        Friend ReadOnly Property TypColumn As DataColumn
            Get
                Return Me.columnTyp
            End Get
        End Property
        
        Friend ReadOnly Property BrancheColumn As DataColumn
            Get
                Return Me.columnBranche
            End Get
        End Property
        
        Friend ReadOnly Property IDNRColumn As DataColumn
            Get
                Return Me.columnIDNR
            End Get
        End Property
        
        Friend ReadOnly Property LandColumn As DataColumn
            Get
                Return Me.columnLand
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property VornameColumn As DataColumn
            Get
                Return Me.columnVorname
            End Get
        End Property
        
        Friend ReadOnly Property Name1Column As DataColumn
            Get
                Return Me.columnName1
            End Get
        End Property
        
        Friend ReadOnly Property FirmaColumn As DataColumn
            Get
                Return Me.columnFirma
            End Get
        End Property
        
        Friend ReadOnly Property AdresseColumn As DataColumn
            Get
                Return Me.columnAdresse
            End Get
        End Property
        
        Friend ReadOnly Property PLZColumn As DataColumn
            Get
                Return Me.columnPLZ
            End Get
        End Property
        
        Friend ReadOnly Property TelColumn As DataColumn
            Get
                Return Me.columnTel
            End Get
        End Property
        
        Friend ReadOnly Property Tel2Column As DataColumn
            Get
                Return Me.columnTel2
            End Get
        End Property
        
        Friend ReadOnly Property FaxColumn As DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        Friend ReadOnly Property MobilColumn As DataColumn
            Get
                Return Me.columnMobil
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property WebColumn As DataColumn
            Get
                Return Me.columnWeb
            End Get
        End Property
        
        Friend ReadOnly Property AngelegtAnColumn As DataColumn
            Get
                Return Me.columnAngelegtAn
            End Get
        End Property
        
        Friend ReadOnly Property PasswortColumn As DataColumn
            Get
                Return Me.columnPasswort
            End Get
        End Property
        
        Friend ReadOnly Property GeburtstagColumn As DataColumn
            Get
                Return Me.columnGeburtstag
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As _ofAdressen_WeitereRow
            Get
                Return CType(Me.Rows(index),_ofAdressen_WeitereRow)
            End Get
        End Property
        
        Public Event _ofAdressen_WeitereRowChanged As _ofAdressen_WeitereRowChangeEventHandler
        
        Public Event _ofAdressen_WeitereRowChanging As _ofAdressen_WeitereRowChangeEventHandler
        
        Public Event _ofAdressen_WeitereRowDeleted As _ofAdressen_WeitereRowChangeEventHandler
        
        Public Event _ofAdressen_WeitereRowDeleting As _ofAdressen_WeitereRowChangeEventHandler
        
        Public Overloads Sub Add_ofAdressen_WeitereRow(ByVal row As _ofAdressen_WeitereRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add_ofAdressen_WeitereRow( _
                    ByVal Anrede As String,  _
                    ByVal Typ As String,  _
                    ByVal Branche As Integer,  _
                    ByVal _parentgrArtikelRowBygrArtikelofAdressen_Weitere As grArtikelRow,  _
                    ByVal Land As Integer,  _
                    ByVal Name As String,  _
                    ByVal Vorname As String,  _
                    ByVal Name1 As String,  _
                    ByVal Firma As String,  _
                    ByVal Adresse As String,  _
                    ByVal PLZ As Integer,  _
                    ByVal Tel As String,  _
                    ByVal Tel2 As String,  _
                    ByVal Fax As String,  _
                    ByVal Mobil As String,  _
                    ByVal Email As String,  _
                    ByVal Web As String,  _
                    ByVal AngelegtAn As Date,  _
                    ByVal Passwort As String,  _
                    ByVal Geburtstag As Date) As _ofAdressen_WeitereRow
            Dim row_ofAdressen_WeitereRow As _ofAdressen_WeitereRow = CType(Me.NewRow,_ofAdressen_WeitereRow)
            row_ofAdressen_WeitereRow.ItemArray = New Object() {Nothing, Anrede, Typ, Branche, _parentgrArtikelRowBygrArtikelofAdressen_Weitere(0), Land, Name, Vorname, Name1, Firma, Adresse, PLZ, Tel, Tel2, Fax, Mobil, Email, Web, AngelegtAn, Passwort, Geburtstag}
            Me.Rows.Add(row_ofAdressen_WeitereRow)
            Return row_ofAdressen_WeitereRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As _ofAdressen_WeitereRow
            Return CType(Me.Rows.Find(New Object() {ID}),_ofAdressen_WeitereRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As _ofAdressen_WeitereDataTable = CType(MyBase.Clone,_ofAdressen_WeitereDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New _ofAdressen_WeitereDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnAnrede = Me.Columns("Anrede")
            Me.columnTyp = Me.Columns("Typ")
            Me.columnBranche = Me.Columns("Branche")
            Me.columnIDNR = Me.Columns("IDNR")
            Me.columnLand = Me.Columns("Land")
            Me.columnName = Me.Columns("Name")
            Me.columnVorname = Me.Columns("Vorname")
            Me.columnName1 = Me.Columns("Name1")
            Me.columnFirma = Me.Columns("Firma")
            Me.columnAdresse = Me.Columns("Adresse")
            Me.columnPLZ = Me.Columns("PLZ")
            Me.columnTel = Me.Columns("Tel")
            Me.columnTel2 = Me.Columns("Tel2")
            Me.columnFax = Me.Columns("Fax")
            Me.columnMobil = Me.Columns("Mobil")
            Me.columnEmail = Me.Columns("Email")
            Me.columnWeb = Me.Columns("Web")
            Me.columnAngelegtAn = Me.Columns("AngelegtAn")
            Me.columnPasswort = Me.Columns("Passwort")
            Me.columnGeburtstag = Me.Columns("Geburtstag")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnAnrede = New DataColumn("Anrede", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnrede)
            Me.columnTyp = New DataColumn("Typ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTyp)
            Me.columnBranche = New DataColumn("Branche", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBranche)
            Me.columnIDNR = New DataColumn("IDNR", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDNR)
            Me.columnLand = New DataColumn("Land", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLand)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnVorname = New DataColumn("Vorname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVorname)
            Me.columnName1 = New DataColumn("Name1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName1)
            Me.columnFirma = New DataColumn("Firma", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirma)
            Me.columnAdresse = New DataColumn("Adresse", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdresse)
            Me.columnPLZ = New DataColumn("PLZ", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPLZ)
            Me.columnTel = New DataColumn("Tel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTel)
            Me.columnTel2 = New DataColumn("Tel2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTel2)
            Me.columnFax = New DataColumn("Fax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax)
            Me.columnMobil = New DataColumn("Mobil", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMobil)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnWeb = New DataColumn("Web", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeb)
            Me.columnAngelegtAn = New DataColumn("AngelegtAn", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAngelegtAn)
            Me.columnPasswort = New DataColumn("Passwort", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPasswort)
            Me.columnGeburtstag = New DataColumn("Geburtstag", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGeburtstag)
            Me.Constraints.Add(New UniqueConstraint("DatasetImmobilienObjektKey3", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        Public Function New_ofAdressen_WeitereRow() As _ofAdressen_WeitereRow
            Return CType(Me.NewRow,_ofAdressen_WeitereRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New _ofAdressen_WeitereRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(_ofAdressen_WeitereRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._ofAdressen_WeitereRowChangedEvent) Is Nothing) Then
                RaiseEvent _ofAdressen_WeitereRowChanged(Me, New _ofAdressen_WeitereRowChangeEvent(CType(e.Row,_ofAdressen_WeitereRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._ofAdressen_WeitereRowChangingEvent) Is Nothing) Then
                RaiseEvent _ofAdressen_WeitereRowChanging(Me, New _ofAdressen_WeitereRowChangeEvent(CType(e.Row,_ofAdressen_WeitereRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._ofAdressen_WeitereRowDeletedEvent) Is Nothing) Then
                RaiseEvent _ofAdressen_WeitereRowDeleted(Me, New _ofAdressen_WeitereRowChangeEvent(CType(e.Row,_ofAdressen_WeitereRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._ofAdressen_WeitereRowDeletingEvent) Is Nothing) Then
                RaiseEvent _ofAdressen_WeitereRowDeleting(Me, New _ofAdressen_WeitereRowChangeEvent(CType(e.Row,_ofAdressen_WeitereRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove_ofAdressen_WeitereRow(ByVal row As _ofAdressen_WeitereRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ofAdressen_WeitereRow
        Inherits DataRow
        
        Private table_ofAdressen_Weitere As _ofAdressen_WeitereDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table_ofAdressen_Weitere = CType(Me.Table,_ofAdressen_WeitereDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.table_ofAdressen_Weitere.IDColumn),Integer)
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.IDColumn) = value
            End Set
        End Property
        
        Public Property Anrede As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.AnredeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.AnredeColumn) = value
            End Set
        End Property
        
        Public Property Typ As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.TypColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.TypColumn) = value
            End Set
        End Property
        
        Public Property Branche As Integer
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.BrancheColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.BrancheColumn) = value
            End Set
        End Property
        
        Public Property IDNR As Integer
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.IDNRColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.IDNRColumn) = value
            End Set
        End Property
        
        Public Property Land As Integer
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.LandColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.LandColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.NameColumn) = value
            End Set
        End Property
        
        Public Property Vorname As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.VornameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.VornameColumn) = value
            End Set
        End Property
        
        Public Property Name1 As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.Name1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.Name1Column) = value
            End Set
        End Property
        
        Public Property Firma As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.FirmaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.FirmaColumn) = value
            End Set
        End Property
        
        Public Property Adresse As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.AdresseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.AdresseColumn) = value
            End Set
        End Property
        
        Public Property PLZ As Integer
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.PLZColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.PLZColumn) = value
            End Set
        End Property
        
        Public Property Tel As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.TelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.TelColumn) = value
            End Set
        End Property
        
        Public Property Tel2 As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.Tel2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.Tel2Column) = value
            End Set
        End Property
        
        Public Property Fax As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.FaxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.FaxColumn) = value
            End Set
        End Property
        
        Public Property Mobil As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.MobilColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.MobilColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.EmailColumn) = value
            End Set
        End Property
        
        Public Property Web As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.WebColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.WebColumn) = value
            End Set
        End Property
        
        Public Property AngelegtAn As Date
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.AngelegtAnColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.AngelegtAnColumn) = value
            End Set
        End Property
        
        Public Property Passwort As String
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.PasswortColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.PasswortColumn) = value
            End Set
        End Property
        
        Public Property Geburtstag As Date
            Get
                Try 
                    Return CType(Me(Me.table_ofAdressen_Weitere.GeburtstagColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ofAdressen_Weitere.GeburtstagColumn) = value
            End Set
        End Property
        
        Public Property grArtikelRow As grArtikelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("grArtikelofAdressen-Weitere")),grArtikelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("grArtikelofAdressen-Weitere"))
            End Set
        End Property
        
        Public Function IsAnredeNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.AnredeColumn)
        End Function
        
        Public Sub SetAnredeNull()
            Me(Me.table_ofAdressen_Weitere.AnredeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.TypColumn)
        End Function
        
        Public Sub SetTypNull()
            Me(Me.table_ofAdressen_Weitere.TypColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBrancheNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.BrancheColumn)
        End Function
        
        Public Sub SetBrancheNull()
            Me(Me.table_ofAdressen_Weitere.BrancheColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNRNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.IDNRColumn)
        End Function
        
        Public Sub SetIDNRNull()
            Me(Me.table_ofAdressen_Weitere.IDNRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLandNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.LandColumn)
        End Function
        
        Public Sub SetLandNull()
            Me(Me.table_ofAdressen_Weitere.LandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.table_ofAdressen_Weitere.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVornameNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.VornameColumn)
        End Function
        
        Public Sub SetVornameNull()
            Me(Me.table_ofAdressen_Weitere.VornameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsName1Null() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.Name1Column)
        End Function
        
        Public Sub SetName1Null()
            Me(Me.table_ofAdressen_Weitere.Name1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirmaNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.FirmaColumn)
        End Function
        
        Public Sub SetFirmaNull()
            Me(Me.table_ofAdressen_Weitere.FirmaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdresseNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.AdresseColumn)
        End Function
        
        Public Sub SetAdresseNull()
            Me(Me.table_ofAdressen_Weitere.AdresseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPLZNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.PLZColumn)
        End Function
        
        Public Sub SetPLZNull()
            Me(Me.table_ofAdressen_Weitere.PLZColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.TelColumn)
        End Function
        
        Public Sub SetTelNull()
            Me(Me.table_ofAdressen_Weitere.TelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTel2Null() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.Tel2Column)
        End Function
        
        Public Sub SetTel2Null()
            Me(Me.table_ofAdressen_Weitere.Tel2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.FaxColumn)
        End Function
        
        Public Sub SetFaxNull()
            Me(Me.table_ofAdressen_Weitere.FaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMobilNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.MobilColumn)
        End Function
        
        Public Sub SetMobilNull()
            Me(Me.table_ofAdressen_Weitere.MobilColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.table_ofAdressen_Weitere.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWebNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.WebColumn)
        End Function
        
        Public Sub SetWebNull()
            Me(Me.table_ofAdressen_Weitere.WebColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAngelegtAnNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.AngelegtAnColumn)
        End Function
        
        Public Sub SetAngelegtAnNull()
            Me(Me.table_ofAdressen_Weitere.AngelegtAnColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPasswortNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.PasswortColumn)
        End Function
        
        Public Sub SetPasswortNull()
            Me(Me.table_ofAdressen_Weitere.PasswortColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGeburtstagNull() As Boolean
            Return Me.IsNull(Me.table_ofAdressen_Weitere.GeburtstagColumn)
        End Function
        
        Public Sub SetGeburtstagNull()
            Me(Me.table_ofAdressen_Weitere.GeburtstagColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ofAdressen_WeitereRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As _ofAdressen_WeitereRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As _ofAdressen_WeitereRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As _ofAdressen_WeitereRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
