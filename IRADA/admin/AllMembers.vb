'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class AllMembers
    Inherits DataSet
    
    Private tableMembers As MembersDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Members")) Is Nothing) Then
                Me.Tables.Add(New MembersDataTable(ds.Tables("Members")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Members As MembersDataTable
        Get
            Return Me.tableMembers
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As AllMembers = CType(MyBase.Clone,AllMembers)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Members")) Is Nothing) Then
            Me.Tables.Add(New MembersDataTable(ds.Tables("Members")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMembers = CType(Me.Tables("Members"),MembersDataTable)
        If (Not (Me.tableMembers) Is Nothing) Then
            Me.tableMembers.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "AllMembers"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/AllMembers.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMembers = New MembersDataTable
        Me.Tables.Add(Me.tableMembers)
    End Sub
    
    Private Function ShouldSerializeMembers() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MembersRowChangeEventHandler(ByVal sender As Object, ByVal e As MembersRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MembersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID1 As DataColumn
        
        Private columnID As DataColumn
        
        Private columnTypeOfAccount As DataColumn
        
        Private columnCategory_5 As DataColumn
        
        Private columnCategory_6 As DataColumn
        
        Private columnTitle As DataColumn
        
        Private columnFirst_name As DataColumn
        
        Private columnMiddle_Name As DataColumn
        
        Private columnLast_Name As DataColumn
        
        Private columnStudent As DataColumn
        
        Private columnAddress As DataColumn
        
        Private columnCity As DataColumn
        
        Private columnState As DataColumn
        
        Private columnZipCode As DataColumn
        
        Private columnWork_Phone As DataColumn
        
        Private columnFax_Phone As DataColumn
        
        Private columnOther_Phone As DataColumn
        
        Private columnBoard_Member As DataColumn
        
        Private column_E_mail_Address As DataColumn
        
        Private columnContact As DataColumn
        
        Private columnPaymentMethod As DataColumn
        
        Private columnNotes_1 As DataColumn
        
        Private columnNotes As DataColumn
        
        Private columnpaid_2005 As DataColumn
        
        Private columnpayment_2005 As DataColumn
        
        Private columnDate_paid_2005 As DataColumn
        
        Private columnPaid_2004 As DataColumn
        
        Private columnPayment_2004 As DataColumn
        
        Private columndate_paid_2004 As DataColumn
        
        Private columnpaid_Member_2003 As DataColumn
        
        Private columnPayment2003 As DataColumn
        
        Private columnPrivacy_Option As DataColumn
        
        Private columnPaid_Member_2002 As DataColumn
        
        Private columnPaid_Member_2001 As DataColumn
        
        Private columnDelivery_Point As DataColumn
        
        Private columnPayment As DataColumn
        
        Private columnDatePaid As DataColumn
        
        Private columnLicenseNumber As DataColumn
        
        Private columnJan292003Payment As DataColumn
        
        Private columnApril02event As DataColumn
        
        Private columnCreationTime As DataColumn
        
        Private columnChangeTime As DataColumn
        
        Private columnPassword As DataColumn
        
        Private columnPasswordConfirmation As DataColumn
        
        Private columnOfficeAddress As DataColumn
        
        Private columnTypeOfPraxis As DataColumn
        
        Private columnWebsite As DataColumn
        
        Private columnEdu_First_Degree As DataColumn
        
        Private columnEdu_First_Year As DataColumn
        
        Private columnEdu_First_School As DataColumn
        
        Private columnEdu_Second_Degree As DataColumn
        
        Private columnEdu_Second_Year As DataColumn
        
        Private columnEdu_Second_School As DataColumn
        
        Private columnEdu_Spec_Degree As DataColumn
        
        Private columnEdu_Spec_Year As DataColumn
        
        Private columnEdu_Spec_School As DataColumn
        
        Friend Sub New()
            MyBase.New("Members")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID1Column As DataColumn
            Get
                Return Me.columnID1
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property TypeOfAccountColumn As DataColumn
            Get
                Return Me.columnTypeOfAccount
            End Get
        End Property
        
        Friend ReadOnly Property Category_5Column As DataColumn
            Get
                Return Me.columnCategory_5
            End Get
        End Property
        
        Friend ReadOnly Property Category_6Column As DataColumn
            Get
                Return Me.columnCategory_6
            End Get
        End Property
        
        Friend ReadOnly Property TitleColumn As DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        Friend ReadOnly Property First_nameColumn As DataColumn
            Get
                Return Me.columnFirst_name
            End Get
        End Property
        
        Friend ReadOnly Property Middle_NameColumn As DataColumn
            Get
                Return Me.columnMiddle_Name
            End Get
        End Property
        
        Friend ReadOnly Property Last_NameColumn As DataColumn
            Get
                Return Me.columnLast_Name
            End Get
        End Property
        
        Friend ReadOnly Property StudentColumn As DataColumn
            Get
                Return Me.columnStudent
            End Get
        End Property
        
        Friend ReadOnly Property AddressColumn As DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Friend ReadOnly Property CityColumn As DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Friend ReadOnly Property StateColumn As DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        Friend ReadOnly Property ZipCodeColumn As DataColumn
            Get
                Return Me.columnZipCode
            End Get
        End Property
        
        Friend ReadOnly Property Work_PhoneColumn As DataColumn
            Get
                Return Me.columnWork_Phone
            End Get
        End Property
        
        Friend ReadOnly Property Fax_PhoneColumn As DataColumn
            Get
                Return Me.columnFax_Phone
            End Get
        End Property
        
        Friend ReadOnly Property Other_PhoneColumn As DataColumn
            Get
                Return Me.columnOther_Phone
            End Get
        End Property
        
        Friend ReadOnly Property Board_MemberColumn As DataColumn
            Get
                Return Me.columnBoard_Member
            End Get
        End Property
        
        Friend ReadOnly Property _E_mail_AddressColumn As DataColumn
            Get
                Return Me.column_E_mail_Address
            End Get
        End Property
        
        Friend ReadOnly Property ContactColumn As DataColumn
            Get
                Return Me.columnContact
            End Get
        End Property
        
        Friend ReadOnly Property PaymentMethodColumn As DataColumn
            Get
                Return Me.columnPaymentMethod
            End Get
        End Property
        
        Friend ReadOnly Property Notes_1Column As DataColumn
            Get
                Return Me.columnNotes_1
            End Get
        End Property
        
        Friend ReadOnly Property NotesColumn As DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        Friend ReadOnly Property paid_2005Column As DataColumn
            Get
                Return Me.columnpaid_2005
            End Get
        End Property
        
        Friend ReadOnly Property payment_2005Column As DataColumn
            Get
                Return Me.columnpayment_2005
            End Get
        End Property
        
        Friend ReadOnly Property Date_paid_2005Column As DataColumn
            Get
                Return Me.columnDate_paid_2005
            End Get
        End Property
        
        Friend ReadOnly Property Paid_2004Column As DataColumn
            Get
                Return Me.columnPaid_2004
            End Get
        End Property
        
        Friend ReadOnly Property Payment_2004Column As DataColumn
            Get
                Return Me.columnPayment_2004
            End Get
        End Property
        
        Friend ReadOnly Property date_paid_2004Column As DataColumn
            Get
                Return Me.columndate_paid_2004
            End Get
        End Property
        
        Friend ReadOnly Property paid_Member_2003Column As DataColumn
            Get
                Return Me.columnpaid_Member_2003
            End Get
        End Property
        
        Friend ReadOnly Property Payment2003Column As DataColumn
            Get
                Return Me.columnPayment2003
            End Get
        End Property
        
        Friend ReadOnly Property Privacy_OptionColumn As DataColumn
            Get
                Return Me.columnPrivacy_Option
            End Get
        End Property
        
        Friend ReadOnly Property Paid_Member_2002Column As DataColumn
            Get
                Return Me.columnPaid_Member_2002
            End Get
        End Property
        
        Friend ReadOnly Property Paid_Member_2001Column As DataColumn
            Get
                Return Me.columnPaid_Member_2001
            End Get
        End Property
        
        Friend ReadOnly Property Delivery_PointColumn As DataColumn
            Get
                Return Me.columnDelivery_Point
            End Get
        End Property
        
        Friend ReadOnly Property PaymentColumn As DataColumn
            Get
                Return Me.columnPayment
            End Get
        End Property
        
        Friend ReadOnly Property DatePaidColumn As DataColumn
            Get
                Return Me.columnDatePaid
            End Get
        End Property
        
        Friend ReadOnly Property LicenseNumberColumn As DataColumn
            Get
                Return Me.columnLicenseNumber
            End Get
        End Property
        
        Friend ReadOnly Property Jan292003PaymentColumn As DataColumn
            Get
                Return Me.columnJan292003Payment
            End Get
        End Property
        
        Friend ReadOnly Property April02eventColumn As DataColumn
            Get
                Return Me.columnApril02event
            End Get
        End Property
        
        Friend ReadOnly Property CreationTimeColumn As DataColumn
            Get
                Return Me.columnCreationTime
            End Get
        End Property
        
        Friend ReadOnly Property ChangeTimeColumn As DataColumn
            Get
                Return Me.columnChangeTime
            End Get
        End Property
        
        Friend ReadOnly Property PasswordColumn As DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        Friend ReadOnly Property PasswordConfirmationColumn As DataColumn
            Get
                Return Me.columnPasswordConfirmation
            End Get
        End Property
        
        Friend ReadOnly Property OfficeAddressColumn As DataColumn
            Get
                Return Me.columnOfficeAddress
            End Get
        End Property
        
        Friend ReadOnly Property TypeOfPraxisColumn As DataColumn
            Get
                Return Me.columnTypeOfPraxis
            End Get
        End Property
        
        Friend ReadOnly Property WebsiteColumn As DataColumn
            Get
                Return Me.columnWebsite
            End Get
        End Property
        
        Friend ReadOnly Property Edu_First_DegreeColumn As DataColumn
            Get
                Return Me.columnEdu_First_Degree
            End Get
        End Property
        
        Friend ReadOnly Property Edu_First_YearColumn As DataColumn
            Get
                Return Me.columnEdu_First_Year
            End Get
        End Property
        
        Friend ReadOnly Property Edu_First_SchoolColumn As DataColumn
            Get
                Return Me.columnEdu_First_School
            End Get
        End Property
        
        Friend ReadOnly Property Edu_Second_DegreeColumn As DataColumn
            Get
                Return Me.columnEdu_Second_Degree
            End Get
        End Property
        
        Friend ReadOnly Property Edu_Second_YearColumn As DataColumn
            Get
                Return Me.columnEdu_Second_Year
            End Get
        End Property
        
        Friend ReadOnly Property Edu_Second_SchoolColumn As DataColumn
            Get
                Return Me.columnEdu_Second_School
            End Get
        End Property
        
        Friend ReadOnly Property Edu_Spec_DegreeColumn As DataColumn
            Get
                Return Me.columnEdu_Spec_Degree
            End Get
        End Property
        
        Friend ReadOnly Property Edu_Spec_YearColumn As DataColumn
            Get
                Return Me.columnEdu_Spec_Year
            End Get
        End Property
        
        Friend ReadOnly Property Edu_Spec_SchoolColumn As DataColumn
            Get
                Return Me.columnEdu_Spec_School
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MembersRow
            Get
                Return CType(Me.Rows(index),MembersRow)
            End Get
        End Property
        
        Public Event MembersRowChanged As MembersRowChangeEventHandler
        
        Public Event MembersRowChanging As MembersRowChangeEventHandler
        
        Public Event MembersRowDeleted As MembersRowChangeEventHandler
        
        Public Event MembersRowDeleting As MembersRowChangeEventHandler
        
        Public Overloads Sub AddMembersRow(ByVal row As MembersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMembersRow( _
                    ByVal ID As Double,  _
                    ByVal TypeOfAccount As String,  _
                    ByVal Category_5 As String,  _
                    ByVal Category_6 As String,  _
                    ByVal Title As String,  _
                    ByVal First_name As String,  _
                    ByVal Middle_Name As String,  _
                    ByVal Last_Name As String,  _
                    ByVal Student As Boolean,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode As String,  _
                    ByVal Work_Phone As String,  _
                    ByVal Fax_Phone As String,  _
                    ByVal Other_Phone As String,  _
                    ByVal Board_Member As String,  _
                    ByVal _E_mail_Address As String,  _
                    ByVal Contact As String,  _
                    ByVal PaymentMethod As String,  _
                    ByVal Notes_1 As String,  _
                    ByVal Notes As String,  _
                    ByVal paid_2005 As Boolean,  _
                    ByVal payment_2005 As Decimal,  _
                    ByVal Date_paid_2005 As Date,  _
                    ByVal Paid_2004 As Boolean,  _
                    ByVal Payment_2004 As Decimal,  _
                    ByVal date_paid_2004 As Date,  _
                    ByVal paid_Member_2003 As Boolean,  _
                    ByVal Payment2003 As Decimal,  _
                    ByVal Privacy_Option As Boolean,  _
                    ByVal Paid_Member_2002 As Boolean,  _
                    ByVal Paid_Member_2001 As String,  _
                    ByVal Delivery_Point As String,  _
                    ByVal Payment As Decimal,  _
                    ByVal DatePaid As Date,  _
                    ByVal LicenseNumber As Double,  _
                    ByVal Jan292003Payment As Decimal,  _
                    ByVal April02event As Boolean,  _
                    ByVal CreationTime As Date,  _
                    ByVal ChangeTime As Date,  _
                    ByVal Password As String,  _
                    ByVal PasswordConfirmation As String,  _
                    ByVal OfficeAddress As String,  _
                    ByVal TypeOfPraxis As String,  _
                    ByVal Website As String,  _
                    ByVal Edu_First_Degree As String,  _
                    ByVal Edu_First_Year As String,  _
                    ByVal Edu_First_School As String,  _
                    ByVal Edu_Second_Degree As String,  _
                    ByVal Edu_Second_Year As String,  _
                    ByVal Edu_Second_School As String,  _
                    ByVal Edu_Spec_Degree As String,  _
                    ByVal Edu_Spec_Year As String,  _
                    ByVal Edu_Spec_School As String) As MembersRow
            Dim rowMembersRow As MembersRow = CType(Me.NewRow,MembersRow)
            rowMembersRow.ItemArray = New Object() {Nothing, ID, TypeOfAccount, Category_5, Category_6, Title, First_name, Middle_Name, Last_Name, Student, Address, City, State, ZipCode, Work_Phone, Fax_Phone, Other_Phone, Board_Member, _E_mail_Address, Contact, PaymentMethod, Notes_1, Notes, paid_2005, payment_2005, Date_paid_2005, Paid_2004, Payment_2004, date_paid_2004, paid_Member_2003, Payment2003, Privacy_Option, Paid_Member_2002, Paid_Member_2001, Delivery_Point, Payment, DatePaid, LicenseNumber, Jan292003Payment, April02event, CreationTime, ChangeTime, Password, PasswordConfirmation, OfficeAddress, TypeOfPraxis, Website, Edu_First_Degree, Edu_First_Year, Edu_First_School, Edu_Second_Degree, Edu_Second_Year, Edu_Second_School, Edu_Spec_Degree, Edu_Spec_Year, Edu_Spec_School}
            Me.Rows.Add(rowMembersRow)
            Return rowMembersRow
        End Function
        
        Public Function FindByID1(ByVal ID1 As Integer) As MembersRow
            Return CType(Me.Rows.Find(New Object() {ID1}),MembersRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MembersDataTable = CType(MyBase.Clone,MembersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MembersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID1 = Me.Columns("ID1")
            Me.columnID = Me.Columns("ID")
            Me.columnTypeOfAccount = Me.Columns("TypeOfAccount")
            Me.columnCategory_5 = Me.Columns("Category_5")
            Me.columnCategory_6 = Me.Columns("Category_6")
            Me.columnTitle = Me.Columns("Title")
            Me.columnFirst_name = Me.Columns("First_name")
            Me.columnMiddle_Name = Me.Columns("Middle_Name")
            Me.columnLast_Name = Me.Columns("Last_Name")
            Me.columnStudent = Me.Columns("Student")
            Me.columnAddress = Me.Columns("Address")
            Me.columnCity = Me.Columns("City")
            Me.columnState = Me.Columns("State")
            Me.columnZipCode = Me.Columns("ZipCode")
            Me.columnWork_Phone = Me.Columns("Work_Phone")
            Me.columnFax_Phone = Me.Columns("Fax_Phone")
            Me.columnOther_Phone = Me.Columns("Other_Phone")
            Me.columnBoard_Member = Me.Columns("Board Member")
            Me.column_E_mail_Address = Me.Columns("E-mail Address")
            Me.columnContact = Me.Columns("Contact")
            Me.columnPaymentMethod = Me.Columns("PaymentMethod")
            Me.columnNotes_1 = Me.Columns("Notes_1")
            Me.columnNotes = Me.Columns("Notes")
            Me.columnpaid_2005 = Me.Columns("paid 2005")
            Me.columnpayment_2005 = Me.Columns("payment 2005")
            Me.columnDate_paid_2005 = Me.Columns("Date paid 2005")
            Me.columnPaid_2004 = Me.Columns("Paid 2004")
            Me.columnPayment_2004 = Me.Columns("Payment 2004")
            Me.columndate_paid_2004 = Me.Columns("date paid 2004")
            Me.columnpaid_Member_2003 = Me.Columns("paid Member 2003")
            Me.columnPayment2003 = Me.Columns("Payment2003")
            Me.columnPrivacy_Option = Me.Columns("Privacy Option")
            Me.columnPaid_Member_2002 = Me.Columns("Paid Member 2002")
            Me.columnPaid_Member_2001 = Me.Columns("Paid Member 2001")
            Me.columnDelivery_Point = Me.Columns("Delivery Point")
            Me.columnPayment = Me.Columns("Payment")
            Me.columnDatePaid = Me.Columns("DatePaid")
            Me.columnLicenseNumber = Me.Columns("LicenseNumber")
            Me.columnJan292003Payment = Me.Columns("Jan292003Payment")
            Me.columnApril02event = Me.Columns("April02event")
            Me.columnCreationTime = Me.Columns("CreationTime")
            Me.columnChangeTime = Me.Columns("ChangeTime")
            Me.columnPassword = Me.Columns("Password")
            Me.columnPasswordConfirmation = Me.Columns("PasswordConfirmation")
            Me.columnOfficeAddress = Me.Columns("OfficeAddress")
            Me.columnTypeOfPraxis = Me.Columns("TypeOfPraxis")
            Me.columnWebsite = Me.Columns("Website")
            Me.columnEdu_First_Degree = Me.Columns("Edu_First_Degree")
            Me.columnEdu_First_Year = Me.Columns("Edu_First_Year")
            Me.columnEdu_First_School = Me.Columns("Edu_First_School")
            Me.columnEdu_Second_Degree = Me.Columns("Edu_Second_Degree")
            Me.columnEdu_Second_Year = Me.Columns("Edu_Second_Year")
            Me.columnEdu_Second_School = Me.Columns("Edu_Second_School")
            Me.columnEdu_Spec_Degree = Me.Columns("Edu_Spec_Degree")
            Me.columnEdu_Spec_Year = Me.Columns("Edu_Spec_Year")
            Me.columnEdu_Spec_School = Me.Columns("Edu_Spec_School")
        End Sub
        
        Private Sub InitClass()
            Me.columnID1 = New DataColumn("ID1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID1)
            Me.columnID = New DataColumn("ID", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnTypeOfAccount = New DataColumn("TypeOfAccount", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeOfAccount)
            Me.columnCategory_5 = New DataColumn("Category_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCategory_5)
            Me.columnCategory_6 = New DataColumn("Category_6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCategory_6)
            Me.columnTitle = New DataColumn("Title", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitle)
            Me.columnFirst_name = New DataColumn("First_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirst_name)
            Me.columnMiddle_Name = New DataColumn("Middle_Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMiddle_Name)
            Me.columnLast_Name = New DataColumn("Last_Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLast_Name)
            Me.columnStudent = New DataColumn("Student", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStudent)
            Me.columnAddress = New DataColumn("Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress)
            Me.columnCity = New DataColumn("City", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCity)
            Me.columnState = New DataColumn("State", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnState)
            Me.columnZipCode = New DataColumn("ZipCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnZipCode)
            Me.columnWork_Phone = New DataColumn("Work_Phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWork_Phone)
            Me.columnFax_Phone = New DataColumn("Fax_Phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax_Phone)
            Me.columnOther_Phone = New DataColumn("Other_Phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOther_Phone)
            Me.columnBoard_Member = New DataColumn("Board Member", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBoard_Member)
            Me.column_E_mail_Address = New DataColumn("E-mail Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_E_mail_Address)
            Me.columnContact = New DataColumn("Contact", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContact)
            Me.columnPaymentMethod = New DataColumn("PaymentMethod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentMethod)
            Me.columnNotes_1 = New DataColumn("Notes_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotes_1)
            Me.columnNotes = New DataColumn("Notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotes)
            Me.columnpaid_2005 = New DataColumn("paid 2005", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpaid_2005)
            Me.columnpayment_2005 = New DataColumn("payment 2005", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpayment_2005)
            Me.columnDate_paid_2005 = New DataColumn("Date paid 2005", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDate_paid_2005)
            Me.columnPaid_2004 = New DataColumn("Paid 2004", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_2004)
            Me.columnPayment_2004 = New DataColumn("Payment 2004", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment_2004)
            Me.columndate_paid_2004 = New DataColumn("date paid 2004", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndate_paid_2004)
            Me.columnpaid_Member_2003 = New DataColumn("paid Member 2003", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpaid_Member_2003)
            Me.columnPayment2003 = New DataColumn("Payment2003", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment2003)
            Me.columnPrivacy_Option = New DataColumn("Privacy Option", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrivacy_Option)
            Me.columnPaid_Member_2002 = New DataColumn("Paid Member 2002", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_Member_2002)
            Me.columnPaid_Member_2001 = New DataColumn("Paid Member 2001", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaid_Member_2001)
            Me.columnDelivery_Point = New DataColumn("Delivery Point", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDelivery_Point)
            Me.columnPayment = New DataColumn("Payment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPayment)
            Me.columnDatePaid = New DataColumn("DatePaid", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDatePaid)
            Me.columnLicenseNumber = New DataColumn("LicenseNumber", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicenseNumber)
            Me.columnJan292003Payment = New DataColumn("Jan292003Payment", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJan292003Payment)
            Me.columnApril02event = New DataColumn("April02event", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApril02event)
            Me.columnCreationTime = New DataColumn("CreationTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreationTime)
            Me.columnChangeTime = New DataColumn("ChangeTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChangeTime)
            Me.columnPassword = New DataColumn("Password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPassword)
            Me.columnPasswordConfirmation = New DataColumn("PasswordConfirmation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPasswordConfirmation)
            Me.columnOfficeAddress = New DataColumn("OfficeAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOfficeAddress)
            Me.columnTypeOfPraxis = New DataColumn("TypeOfPraxis", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeOfPraxis)
            Me.columnWebsite = New DataColumn("Website", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWebsite)
            Me.columnEdu_First_Degree = New DataColumn("Edu_First_Degree", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_First_Degree)
            Me.columnEdu_First_Year = New DataColumn("Edu_First_Year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_First_Year)
            Me.columnEdu_First_School = New DataColumn("Edu_First_School", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_First_School)
            Me.columnEdu_Second_Degree = New DataColumn("Edu_Second_Degree", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_Second_Degree)
            Me.columnEdu_Second_Year = New DataColumn("Edu_Second_Year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_Second_Year)
            Me.columnEdu_Second_School = New DataColumn("Edu_Second_School", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_Second_School)
            Me.columnEdu_Spec_Degree = New DataColumn("Edu_Spec_Degree", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_Spec_Degree)
            Me.columnEdu_Spec_Year = New DataColumn("Edu_Spec_Year", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_Spec_Year)
            Me.columnEdu_Spec_School = New DataColumn("Edu_Spec_School", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdu_Spec_School)
            Me.Constraints.Add(New UniqueConstraint("AllMembersKey1", New DataColumn() {Me.columnID1}, true))
            Me.columnID1.AutoIncrement = true
            Me.columnID1.AllowDBNull = false
            Me.columnID1.Unique = true
        End Sub
        
        Public Function NewMembersRow() As MembersRow
            Return CType(Me.NewRow,MembersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MembersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MembersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MembersRowChangedEvent) Is Nothing) Then
                RaiseEvent MembersRowChanged(Me, New MembersRowChangeEvent(CType(e.Row,MembersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MembersRowChangingEvent) Is Nothing) Then
                RaiseEvent MembersRowChanging(Me, New MembersRowChangeEvent(CType(e.Row,MembersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MembersRowDeletedEvent) Is Nothing) Then
                RaiseEvent MembersRowDeleted(Me, New MembersRowChangeEvent(CType(e.Row,MembersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MembersRowDeletingEvent) Is Nothing) Then
                RaiseEvent MembersRowDeleting(Me, New MembersRowChangeEvent(CType(e.Row,MembersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMembersRow(ByVal row As MembersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MembersRow
        Inherits DataRow
        
        Private tableMembers As MembersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMembers = CType(Me.Table,MembersDataTable)
        End Sub
        
        Public Property ID1 As Integer
            Get
                Return CType(Me(Me.tableMembers.ID1Column),Integer)
            End Get
            Set
                Me(Me.tableMembers.ID1Column) = value
            End Set
        End Property
        
        Public Property ID As Double
            Get
                Try 
                    Return CType(Me(Me.tableMembers.IDColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.IDColumn) = value
            End Set
        End Property
        
        Public Property TypeOfAccount As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.TypeOfAccountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.TypeOfAccountColumn) = value
            End Set
        End Property
        
        Public Property Category_5 As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Category_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Category_5Column) = value
            End Set
        End Property
        
        Public Property Category_6 As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Category_6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Category_6Column) = value
            End Set
        End Property
        
        Public Property Title As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.TitleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.TitleColumn) = value
            End Set
        End Property
        
        Public Property First_name As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.First_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.First_nameColumn) = value
            End Set
        End Property
        
        Public Property Middle_Name As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Middle_NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Middle_NameColumn) = value
            End Set
        End Property
        
        Public Property Last_Name As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Last_NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Last_NameColumn) = value
            End Set
        End Property
        
        Public Property Student As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.StudentColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.StudentColumn) = value
            End Set
        End Property
        
        Public Property Address As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.AddressColumn) = value
            End Set
        End Property
        
        Public Property City As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.CityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.CityColumn) = value
            End Set
        End Property
        
        Public Property State As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.StateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.StateColumn) = value
            End Set
        End Property
        
        Public Property ZipCode As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.ZipCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.ZipCodeColumn) = value
            End Set
        End Property
        
        Public Property Work_Phone As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Work_PhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Work_PhoneColumn) = value
            End Set
        End Property
        
        Public Property Fax_Phone As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Fax_PhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Fax_PhoneColumn) = value
            End Set
        End Property
        
        Public Property Other_Phone As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Other_PhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Other_PhoneColumn) = value
            End Set
        End Property
        
        Public Property Board_Member As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Board_MemberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Board_MemberColumn) = value
            End Set
        End Property
        
        Public Property _E_mail_Address As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers._E_mail_AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers._E_mail_AddressColumn) = value
            End Set
        End Property
        
        Public Property Contact As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.ContactColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.ContactColumn) = value
            End Set
        End Property
        
        Public Property PaymentMethod As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.PaymentMethodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.PaymentMethodColumn) = value
            End Set
        End Property
        
        Public Property Notes_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Notes_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Notes_1Column) = value
            End Set
        End Property
        
        Public Property Notes As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.NotesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.NotesColumn) = value
            End Set
        End Property
        
        Public Property paid_2005 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.paid_2005Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.paid_2005Column) = value
            End Set
        End Property
        
        Public Property payment_2005 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMembers.payment_2005Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.payment_2005Column) = value
            End Set
        End Property
        
        Public Property Date_paid_2005 As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Date_paid_2005Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Date_paid_2005Column) = value
            End Set
        End Property
        
        Public Property Paid_2004 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Paid_2004Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Paid_2004Column) = value
            End Set
        End Property
        
        Public Property Payment_2004 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Payment_2004Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Payment_2004Column) = value
            End Set
        End Property
        
        Public Property date_paid_2004 As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.date_paid_2004Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.date_paid_2004Column) = value
            End Set
        End Property
        
        Public Property paid_Member_2003 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.paid_Member_2003Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.paid_Member_2003Column) = value
            End Set
        End Property
        
        Public Property Payment2003 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Payment2003Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Payment2003Column) = value
            End Set
        End Property
        
        Public Property Privacy_Option As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Privacy_OptionColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Privacy_OptionColumn) = value
            End Set
        End Property
        
        Public Property Paid_Member_2002 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Paid_Member_2002Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Paid_Member_2002Column) = value
            End Set
        End Property
        
        Public Property Paid_Member_2001 As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Paid_Member_2001Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Paid_Member_2001Column) = value
            End Set
        End Property
        
        Public Property Delivery_Point As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Delivery_PointColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Delivery_PointColumn) = value
            End Set
        End Property
        
        Public Property Payment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMembers.PaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.PaymentColumn) = value
            End Set
        End Property
        
        Public Property DatePaid As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.DatePaidColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.DatePaidColumn) = value
            End Set
        End Property
        
        Public Property LicenseNumber As Double
            Get
                Try 
                    Return CType(Me(Me.tableMembers.LicenseNumberColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.LicenseNumberColumn) = value
            End Set
        End Property
        
        Public Property Jan292003Payment As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Jan292003PaymentColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Jan292003PaymentColumn) = value
            End Set
        End Property
        
        Public Property April02event As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMembers.April02eventColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.April02eventColumn) = value
            End Set
        End Property
        
        Public Property CreationTime As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.CreationTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.CreationTimeColumn) = value
            End Set
        End Property
        
        Public Property ChangeTime As Date
            Get
                Try 
                    Return CType(Me(Me.tableMembers.ChangeTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.ChangeTimeColumn) = value
            End Set
        End Property
        
        Public Property Password As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.PasswordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.PasswordColumn) = value
            End Set
        End Property
        
        Public Property PasswordConfirmation As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.PasswordConfirmationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.PasswordConfirmationColumn) = value
            End Set
        End Property
        
        Public Property OfficeAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.OfficeAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.OfficeAddressColumn) = value
            End Set
        End Property
        
        Public Property TypeOfPraxis As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.TypeOfPraxisColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.TypeOfPraxisColumn) = value
            End Set
        End Property
        
        Public Property Website As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.WebsiteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.WebsiteColumn) = value
            End Set
        End Property
        
        Public Property Edu_First_Degree As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Edu_First_DegreeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Edu_First_DegreeColumn) = value
            End Set
        End Property
        
        Public Property Edu_First_Year As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Edu_First_YearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Edu_First_YearColumn) = value
            End Set
        End Property
        
        Public Property Edu_First_School As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Edu_First_SchoolColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Edu_First_SchoolColumn) = value
            End Set
        End Property
        
        Public Property Edu_Second_Degree As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Edu_Second_DegreeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Edu_Second_DegreeColumn) = value
            End Set
        End Property
        
        Public Property Edu_Second_Year As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Edu_Second_YearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Edu_Second_YearColumn) = value
            End Set
        End Property
        
        Public Property Edu_Second_School As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Edu_Second_SchoolColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Edu_Second_SchoolColumn) = value
            End Set
        End Property
        
        Public Property Edu_Spec_Degree As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Edu_Spec_DegreeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Edu_Spec_DegreeColumn) = value
            End Set
        End Property
        
        Public Property Edu_Spec_Year As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Edu_Spec_YearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Edu_Spec_YearColumn) = value
            End Set
        End Property
        
        Public Property Edu_Spec_School As String
            Get
                Try 
                    Return CType(Me(Me.tableMembers.Edu_Spec_SchoolColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMembers.Edu_Spec_SchoolColumn) = value
            End Set
        End Property
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMembers.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableMembers.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeOfAccountNull() As Boolean
            Return Me.IsNull(Me.tableMembers.TypeOfAccountColumn)
        End Function
        
        Public Sub SetTypeOfAccountNull()
            Me(Me.tableMembers.TypeOfAccountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCategory_5Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Category_5Column)
        End Function
        
        Public Sub SetCategory_5Null()
            Me(Me.tableMembers.Category_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCategory_6Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Category_6Column)
        End Function
        
        Public Sub SetCategory_6Null()
            Me(Me.tableMembers.Category_6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tableMembers.TitleColumn)
        End Function
        
        Public Sub SetTitleNull()
            Me(Me.tableMembers.TitleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirst_nameNull() As Boolean
            Return Me.IsNull(Me.tableMembers.First_nameColumn)
        End Function
        
        Public Sub SetFirst_nameNull()
            Me(Me.tableMembers.First_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMiddle_NameNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Middle_NameColumn)
        End Function
        
        Public Sub SetMiddle_NameNull()
            Me(Me.tableMembers.Middle_NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLast_NameNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Last_NameColumn)
        End Function
        
        Public Sub SetLast_NameNull()
            Me(Me.tableMembers.Last_NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStudentNull() As Boolean
            Return Me.IsNull(Me.tableMembers.StudentColumn)
        End Function
        
        Public Sub SetStudentNull()
            Me(Me.tableMembers.StudentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableMembers.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tableMembers.AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableMembers.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tableMembers.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableMembers.StateColumn)
        End Function
        
        Public Sub SetStateNull()
            Me(Me.tableMembers.StateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsZipCodeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.ZipCodeColumn)
        End Function
        
        Public Sub SetZipCodeNull()
            Me(Me.tableMembers.ZipCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWork_PhoneNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Work_PhoneColumn)
        End Function
        
        Public Sub SetWork_PhoneNull()
            Me(Me.tableMembers.Work_PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFax_PhoneNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Fax_PhoneColumn)
        End Function
        
        Public Sub SetFax_PhoneNull()
            Me(Me.tableMembers.Fax_PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOther_PhoneNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Other_PhoneColumn)
        End Function
        
        Public Sub SetOther_PhoneNull()
            Me(Me.tableMembers.Other_PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBoard_MemberNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Board_MemberColumn)
        End Function
        
        Public Sub SetBoard_MemberNull()
            Me(Me.tableMembers.Board_MemberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_E_mail_AddressNull() As Boolean
            Return Me.IsNull(Me.tableMembers._E_mail_AddressColumn)
        End Function
        
        Public Sub Set_E_mail_AddressNull()
            Me(Me.tableMembers._E_mail_AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContactNull() As Boolean
            Return Me.IsNull(Me.tableMembers.ContactColumn)
        End Function
        
        Public Sub SetContactNull()
            Me(Me.tableMembers.ContactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentMethodNull() As Boolean
            Return Me.IsNull(Me.tableMembers.PaymentMethodColumn)
        End Function
        
        Public Sub SetPaymentMethodNull()
            Me(Me.tableMembers.PaymentMethodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotes_1Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Notes_1Column)
        End Function
        
        Public Sub SetNotes_1Null()
            Me(Me.tableMembers.Notes_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableMembers.NotesColumn)
        End Function
        
        Public Sub SetNotesNull()
            Me(Me.tableMembers.NotesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispaid_2005Null() As Boolean
            Return Me.IsNull(Me.tableMembers.paid_2005Column)
        End Function
        
        Public Sub Setpaid_2005Null()
            Me(Me.tableMembers.paid_2005Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ispayment_2005Null() As Boolean
            Return Me.IsNull(Me.tableMembers.payment_2005Column)
        End Function
        
        Public Sub Setpayment_2005Null()
            Me(Me.tableMembers.payment_2005Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDate_paid_2005Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Date_paid_2005Column)
        End Function
        
        Public Sub SetDate_paid_2005Null()
            Me(Me.tableMembers.Date_paid_2005Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_2004Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Paid_2004Column)
        End Function
        
        Public Sub SetPaid_2004Null()
            Me(Me.tableMembers.Paid_2004Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPayment_2004Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Payment_2004Column)
        End Function
        
        Public Sub SetPayment_2004Null()
            Me(Me.tableMembers.Payment_2004Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdate_paid_2004Null() As Boolean
            Return Me.IsNull(Me.tableMembers.date_paid_2004Column)
        End Function
        
        Public Sub Setdate_paid_2004Null()
            Me(Me.tableMembers.date_paid_2004Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ispaid_Member_2003Null() As Boolean
            Return Me.IsNull(Me.tableMembers.paid_Member_2003Column)
        End Function
        
        Public Sub Setpaid_Member_2003Null()
            Me(Me.tableMembers.paid_Member_2003Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPayment2003Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Payment2003Column)
        End Function
        
        Public Sub SetPayment2003Null()
            Me(Me.tableMembers.Payment2003Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrivacy_OptionNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Privacy_OptionColumn)
        End Function
        
        Public Sub SetPrivacy_OptionNull()
            Me(Me.tableMembers.Privacy_OptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_Member_2002Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Paid_Member_2002Column)
        End Function
        
        Public Sub SetPaid_Member_2002Null()
            Me(Me.tableMembers.Paid_Member_2002Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaid_Member_2001Null() As Boolean
            Return Me.IsNull(Me.tableMembers.Paid_Member_2001Column)
        End Function
        
        Public Sub SetPaid_Member_2001Null()
            Me(Me.tableMembers.Paid_Member_2001Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDelivery_PointNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Delivery_PointColumn)
        End Function
        
        Public Sub SetDelivery_PointNull()
            Me(Me.tableMembers.Delivery_PointColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentNull() As Boolean
            Return Me.IsNull(Me.tableMembers.PaymentColumn)
        End Function
        
        Public Sub SetPaymentNull()
            Me(Me.tableMembers.PaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDatePaidNull() As Boolean
            Return Me.IsNull(Me.tableMembers.DatePaidColumn)
        End Function
        
        Public Sub SetDatePaidNull()
            Me(Me.tableMembers.DatePaidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNumberNull() As Boolean
            Return Me.IsNull(Me.tableMembers.LicenseNumberColumn)
        End Function
        
        Public Sub SetLicenseNumberNull()
            Me(Me.tableMembers.LicenseNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJan292003PaymentNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Jan292003PaymentColumn)
        End Function
        
        Public Sub SetJan292003PaymentNull()
            Me(Me.tableMembers.Jan292003PaymentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApril02eventNull() As Boolean
            Return Me.IsNull(Me.tableMembers.April02eventColumn)
        End Function
        
        Public Sub SetApril02eventNull()
            Me(Me.tableMembers.April02eventColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreationTimeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.CreationTimeColumn)
        End Function
        
        Public Sub SetCreationTimeNull()
            Me(Me.tableMembers.CreationTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChangeTimeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.ChangeTimeColumn)
        End Function
        
        Public Sub SetChangeTimeNull()
            Me(Me.tableMembers.ChangeTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tableMembers.PasswordColumn)
        End Function
        
        Public Sub SetPasswordNull()
            Me(Me.tableMembers.PasswordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPasswordConfirmationNull() As Boolean
            Return Me.IsNull(Me.tableMembers.PasswordConfirmationColumn)
        End Function
        
        Public Sub SetPasswordConfirmationNull()
            Me(Me.tableMembers.PasswordConfirmationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOfficeAddressNull() As Boolean
            Return Me.IsNull(Me.tableMembers.OfficeAddressColumn)
        End Function
        
        Public Sub SetOfficeAddressNull()
            Me(Me.tableMembers.OfficeAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeOfPraxisNull() As Boolean
            Return Me.IsNull(Me.tableMembers.TypeOfPraxisColumn)
        End Function
        
        Public Sub SetTypeOfPraxisNull()
            Me(Me.tableMembers.TypeOfPraxisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWebsiteNull() As Boolean
            Return Me.IsNull(Me.tableMembers.WebsiteColumn)
        End Function
        
        Public Sub SetWebsiteNull()
            Me(Me.tableMembers.WebsiteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_First_DegreeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_First_DegreeColumn)
        End Function
        
        Public Sub SetEdu_First_DegreeNull()
            Me(Me.tableMembers.Edu_First_DegreeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_First_YearNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_First_YearColumn)
        End Function
        
        Public Sub SetEdu_First_YearNull()
            Me(Me.tableMembers.Edu_First_YearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_First_SchoolNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_First_SchoolColumn)
        End Function
        
        Public Sub SetEdu_First_SchoolNull()
            Me(Me.tableMembers.Edu_First_SchoolColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_Second_DegreeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_Second_DegreeColumn)
        End Function
        
        Public Sub SetEdu_Second_DegreeNull()
            Me(Me.tableMembers.Edu_Second_DegreeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_Second_YearNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_Second_YearColumn)
        End Function
        
        Public Sub SetEdu_Second_YearNull()
            Me(Me.tableMembers.Edu_Second_YearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_Second_SchoolNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_Second_SchoolColumn)
        End Function
        
        Public Sub SetEdu_Second_SchoolNull()
            Me(Me.tableMembers.Edu_Second_SchoolColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_Spec_DegreeNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_Spec_DegreeColumn)
        End Function
        
        Public Sub SetEdu_Spec_DegreeNull()
            Me(Me.tableMembers.Edu_Spec_DegreeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_Spec_YearNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_Spec_YearColumn)
        End Function
        
        Public Sub SetEdu_Spec_YearNull()
            Me(Me.tableMembers.Edu_Spec_YearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEdu_Spec_SchoolNull() As Boolean
            Return Me.IsNull(Me.tableMembers.Edu_Spec_SchoolColumn)
        End Function
        
        Public Sub SetEdu_Spec_SchoolNull()
            Me(Me.tableMembers.Edu_Spec_SchoolColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MembersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MembersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MembersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MembersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
